Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2025.10.28 - 20:23:47]

BALDY.asm
Errors: 0

       1   00:0000                      ifexists game.cfg
       2   00:0000                      include game.cfg
       1.  00:0000                      ; Flags saved by AGD Compiler
       2.  00:0000                      
       3.  00:0000  (00:0000)           DISTYPE=0 ; Memory model & size
       4.  00:0000  (00:0020)           DISSIZE=32 ; Memory size
       5.  00:0000  (00:0000)           AFLAG=0 ; Adventure mode
       6.  00:0000  (00:0000)           MFLAG=0 ; Menu/Inventory
       7.  00:0000  (00:0001)           PFLAG=1 ; Particles
       8.  00:0000  (00:0000)           SFLAG=0 ; Scrolling
       9.  00:0000  (00:0000)           DFLAG=0 ; Digging
      10.  00:0000  (00:0000)           CFLAG=0 ; Collectables
      11.  00:0000  (00:0001)           OFLAG=1 ; Objects
      12.  00:0000  (00:0000)           LFLAG=0 ; Ladders
      13.  00:0000  (00:0001)           EFLAG=1 ; Beeper
      14.  00:0000  (00:0000)           YFLAG=0 ; PSG Music
      15.  00:0000  (00:0001)           XFLAG=1 ; PSG SFX
      16.  00:0000  (00:0000)           QFLAG=0 ; Marquee
      17.  00:0000  (00:0000)           CRFLAG=0 ; Crumbling blocks
      18.  00:0000  (00:0000)           MBFLAG=0 ; Metablocks
      19.  00:0000  (00:0000)           UFLAG=0 ; User routines
      20.  00:0000  (00:0000)           RTFLAG=0 ; Thrust for rotational control
      21.  00:0000  (00:0000)           HCFLAG=0 ; HW sprite collisions
      22.  00:0000  (00:0000)           TVFREQ=0 ; TV Mode
      23.  00:0000  (00:0000)           FX_RELATIVE=0 ; Relative SFX volume
      24.  00:0000  (00:0000)           FX_MODE=0 ; SFX replayer mode (0 = fixed channel, 1 = dynamic channel)
      25.  00:0000  (00:0001)           FX_CHANNEL=1 ; SFX fixed channel
       3   00:0000                      endif
       4   00:0000                      
       5   00:0000                          output BALDY.rom
       6   00:0000                      
       7   00:0000  (00:4000)           PageSize	equ	$4000
       8   00:0000                      
       9   00:0000                          defpage 0, $8000, $8000
      10   00:0000                      
      11   00:0000                          code @ $8000, #1, page 0
      12   00:8000                      
      13   00:8000                              include "header1.asm"
       1.  00:8000                      ;--------------------------------------------------------------------------
       2.  00:8000                      ; Cartridge header part 1
       3.  00:8000                      ;--------------------------------------------------------------------------
       4.  00:8000                      
       5.  00:8000                      ; Define cartridge header
       6.  00:8000                      
       7.  00:8000  AA 55               	db $aa,$55		; Cartridge type
       8.  00:8002  00 00               	dw $0000		; LOCAL_SPR_TBL
       9.  00:8004  00 00               	dw $0000		; SPRITE_ORDER
      10.  00:8006  00 00               	dw $0000		; WORK_BUFFER
      11.  00:8008  97 40               	dw CONTROLLER_BUFFER	; CONTROLLER_MAP
      12.  00:800A  3D 80               	dw init			; START_GAME
      13.  00:800C                      
      14.  00:800C                      ; Define rst vectors
      15.  00:800C                      
      16.  00:800C                      rst_8:
      17.  00:800C  ED 4D               	reti
      18.  00:800E  00                  	nop
      19.  00:800F                      rst_10:
      20.  00:800F  ED 4D               	reti
      21.  00:8011  00                  	nop
      22.  00:8012                      rst_18:
      23.  00:8012  ED 4D               	reti
      24.  00:8014  00                          nop
      25.  00:8015                      rst_20:
      26.  00:8015  ED 4D               	reti
      27.  00:8017  00                  	nop
      28.  00:8018                      rst_28:
      29.  00:8018  ED 4D               	reti
      30.  00:801A  00                  	nop
      31.  00:801B                      rst_30:
      32.  00:801B  ED 4D               	reti
      33.  00:801D  00                  	nop
      34.  00:801E                      rst_38:
      35.  00:801E  ED 4D               	reti
      36.  00:8020  00                  	nop
      37.  00:8021                      
      38.  00:8021                      ; Define NMI vector
      39.  00:8021                      
      40.  00:8021                      nmi_vec:			; NMI_INT_VECT
      41.  00:8021  C3 49 80            	jp NMI
      42.  00:8024                      
      14   00:8024                              include "name.txt"
       1.  00:8024                            db "BALDY/PRESENTS MPAGD/2025" 
       1.  00:8024  42 41 4C 44 59 2F 50 52 45 53 45 4E 54 53 20 4D 
       1.  00:8034  50 41 47 44 2F 32 30 32 35 
      15   00:803D                              include "header2.asm"
       1.  00:803D                      ;--------------------------------------------------------------------------
       2.  00:803D                      ; Cartridge header part 2
       3.  00:803D                      ;--------------------------------------------------------------------------
       4.  00:803D                      
       5.  00:803D                      ; Declare variables
       6.  00:803D                      
       7.  00:803D  (00:1FDC)           READ_REGISTER:	equ $1fdc	; Read VDP register to clear NMI flag
       8.  00:803D                      
       9.  00:803D                      ;--------------------------------------------------------------------------
      10.  00:803D                      ; Initialisation routine for Super Game Module (SGM)
      11.  00:803D                      ;--------------------------------------------------------------------------
      12.  00:803D                      
      13.  00:803D                      init:
      14.  00:803D  F3                  	di
      15.  00:803E  3E 01               	ld a,1			; Enable SGM
      16.  00:8040  D3 53               	out ($53),a
      17.  00:8042                      
      18.  00:8042  3E 1F               	ld a,00011111b		; Enable BIOS
      19.  00:8044  D3 7F               	out ($7f),a
      20.  00:8046                      
      21.  00:8046  C3 EF B4            	jp start
      22.  00:8049                      
      23.  00:8049                      ;--------------------------------------------------------------------------
      24.  00:8049                      ; NMI routine at 60 Hz
      25.  00:8049                      ;--------------------------------------------------------------------------
      26.  00:8049                      
      27.  00:8049                      NMI:
      28.  00:8049                      
      29.  00:8049                      ; Save registers
      30.  00:8049                      
      31.  00:8049  F5                  	PUSH	AF
      32.  00:804A  C5                  	PUSH	BC
      33.  00:804B  D5                  	PUSH	DE
      34.  00:804C  E5                  	PUSH	HL
      35.  00:804D  DD E5               	PUSH	IX
      36.  00:804F  FD E5               	PUSH	IY
      37.  00:8051  08                  	EX	AF,AF'
      38.  00:8052  F5                  	PUSH	AF
      39.  00:8053  D9                  	EXX
      40.  00:8054  C5                  	PUSH	BC
      41.  00:8055  D5                  	PUSH	DE
      42.  00:8056  E5                  	PUSH	HL
      43.  00:8057                      
      44.  00:8057                      ; Increment time to sync framerate at 25 Hz
      45.  00:8057                      
      46.  00:8057  21 7C 40            	ld hl,time
      47.  00:805A  7E                  	ld a,(hl)
      48.  00:805B  3C                  	inc a
      49.  00:805C  77                  	ld (hl),a
      50.  00:805D                      
      51.  00:805D  CD EB 1F            	call POLLER
      52.  00:8060                      
      53.  00:8060                      ;Now restore everything
      54.  00:8060                      
      55.  00:8060  E1                  	POP	HL
      56.  00:8061  D1                  	POP	DE
      57.  00:8062  C1                  	POP	BC
      58.  00:8063  D9                  	EXX
      59.  00:8064  F1                  	POP	AF
      60.  00:8065  08                  	EX	AF,AF'
      61.  00:8066  FD E1               	POP	IY
      62.  00:8068  DD E1               	POP	IX
      63.  00:806A  E1                  	POP	HL
      64.  00:806B  D1                  	POP	DE
      65.  00:806C  C1                  	POP	BC
      66.  00:806D                      
      67.  00:806D  CD DC 1F            	call READ_REGISTER	;Side effect allows another NMI to happen
      68.  00:8070  F1                  	pop af
      69.  00:8071                      
      70.  00:8071  ED 45               	retn
      71.  00:8073                      
      16   00:8073                          include "MSX_Defs.asm"
       1.  00:8073                      ; All MSX 1 BIOS calls ===========================================
       2.  00:8073                      	if (DISSIZE!=48)
       3.  00:8073                      
       4.  00:8073  (00:0000)           MSX_CHKRAM	equ $0000
       5.  00:8073  (00:0010)           MSX_CHRGTR	equ $0010
       6.  00:8073  (00:0014)           MSX_WRSLT	equ $0014
       7.  00:8073  (00:0018)           MSX_OUTDO	equ $0018
       8.  00:8073  (00:0020)           MSX_DCOMPR	equ $0020
       9.  00:8073  (00:0028)           MSX_GETYPR	equ $0028
      10.  00:8073  (00:0030)           MSX_CALLF	equ $0030
      11.  00:8073  (00:0038)           MSX_KEYINT	equ $0038
      12.  00:8073  (00:003B)           MSX_INITIO	equ $003B
      13.  00:8073  (00:003E)           MSX_INIFNK	equ $003E
      14.  00:8073  (00:005F)           MSX_CHGMOD	equ $005F
      15.  00:8073  (00:0062)           MSX_CHGCLR	equ $0062
      16.  00:8073  (00:0066)           MSX_NMI		equ $0066
      17.  00:8073  (00:0069)           MSX_CLRSPR	equ $0069
      18.  00:8073  (00:006C)           MSX_INITXT	equ $006C
      19.  00:8073  (00:006F)           MSX_INIT32	equ $006F
      20.  00:8073  (00:0075)           MSX_INIMLT	equ $0075
      21.  00:8073  (00:0078)           MSX_SETTXT	equ $0078
      22.  00:8073  (00:007B)           MSX_SETT32	equ $007B
      23.  00:8073  (00:007E)           MSX_SETGRP	equ $007E
      24.  00:8073  (00:0081)           MSX_SETMLT	equ $0081
      25.  00:8073  (00:0084)           MSX_CALPAT	equ $0084
      26.  00:8073  (00:0087)           MSX_CALATR	equ $0087
      27.  00:8073  (00:008A)           MSX_GSPSIZ	equ $008A
      28.  00:8073  (00:008D)           MSX_GRPPRT	equ $008D
      29.  00:8073  (00:0090)           MSX_GICINI	equ $0090
      30.  00:8073  (00:0093)           MSX_WRTPSG	equ $0093
      31.  00:8073  (00:0096)           MSX_RDPSG	equ $0096
      32.  00:8073  (00:0099)           MSX_STRTMS	equ $0099
      33.  00:8073  (00:009C)           MSX_CHSNS	equ $009C
      34.  00:8073  (00:009F)           MSX_CHGET	equ $009F
      35.  00:8073  (00:00A2)           MSX_CHPUT	equ $00A2
      36.  00:8073  (00:00A5)           MSX_LPTOUT	equ $00A5
      37.  00:8073  (00:00A8)           MSX_LPTSTT	equ $00A8
      38.  00:8073  (00:00AB)           MSX_CNVCHR	equ $00AB
      39.  00:8073  (00:00AE)           MSX_PINLIN	equ $00AE
      40.  00:8073  (00:00B1)           MSX_INLIN	equ $00B1
      41.  00:8073  (00:00B4)           MSX_QINLIN	equ $00B4
      42.  00:8073  (00:00B7)           MSX_BREAKX	equ $00B7
      43.  00:8073  (00:00BA)           MSX_ISCNTC	equ $00BA
      44.  00:8073  (00:00BD)           MSX_CKCNTC	equ $00BD
      45.  00:8073  (00:00C0)           MSX_BEEP	equ $00C0
      46.  00:8073  (00:00C6)           MSX_POSIT	equ $00C6
      47.  00:8073  (00:00C9)           MSX_FNKSB	equ $00C9
      48.  00:8073  (00:00CC)           MSX_ERAFNK	equ $00CC
      49.  00:8073  (00:00CF)           MSX_DSPFNK	equ $00CF
      50.  00:8073  (00:00D2)           MSX_TOTEXT	equ $00D2
      51.  00:8073  (00:00DB)           MSX_GTPAD	equ $00DB
      52.  00:8073  (00:00DE)           MSX_GTPDL	equ $00DE
      53.  00:8073  (00:00E1)           MSX_TAPION	equ $00E1
      54.  00:8073  (00:00E4)           MSX_TAPIN	equ $00E4
      55.  00:8073  (00:00E7)           MSX_TAPIOF	equ $00E7
      56.  00:8073  (00:00EA)           MSX_TAPOON	equ $00EA
      57.  00:8073  (00:00ED)           MSX_TAPOUT	equ $00ED
      58.  00:8073  (00:00F0)           MSX_TAPOOF	equ $00F0
      59.  00:8073  (00:00F3)           MSX_STMOTR	equ $00F3
      60.  00:8073  (00:00F6)           MSX_LFTQ	equ $00F6
      61.  00:8073  (00:00F9)           MSX_PUTQ	equ $00F9
      62.  00:8073  (00:00FC)           MSX_RIGHTC	equ $00FC
      63.  00:8073  (00:00FF)           MSX_LEFTC	equ $00FF
      64.  00:8073  (00:0102)           MSX_UPC		equ $0102
      65.  00:8073  (00:0105)           MSX_TUPC	equ $0105
      66.  00:8073  (00:0108)           MSX_DOWNC	equ $0108
      67.  00:8073  (00:010B)           MSX_TDOWNC	equ $010B
      68.  00:8073  (00:010E)           MSX_SCALXY	equ $010E
      69.  00:8073  (00:0111)           MSX_MAPXY	equ $0111
      70.  00:8073  (00:0114)           MSX_FETCHC	equ $0114
      71.  00:8073  (00:0117)           MSX_STOREC	equ $0117
      72.  00:8073  (00:011A)           MSX_SETATR	equ $011A
      73.  00:8073  (00:011D)           MSX_READC	equ $011D
      74.  00:8073  (00:0120)           MSX_SETC	equ $0120
      75.  00:8073  (00:0123)           MSX_NSETCX	equ $0123
      76.  00:8073  (00:0126)           MSX_GTASPC	equ $0126
      77.  00:8073  (00:0129)           MSX_PNTINI	equ $0129
      78.  00:8073  (00:012C)           MSX_SCANR	equ $012C
      79.  00:8073  (00:012F)           MSX_SCANL	equ $012F
      80.  00:8073  (00:0132)           MSX_CHGCAP	equ $0132
      81.  00:8073  (00:0135)           MSX_CHGSND	equ $0135
      82.  00:8073  (00:013B)           MSX_WSLREG	equ $013B
      83.  00:8073  (00:013E)           MSX_RDVDP	equ $013E
      84.  00:8073  (00:0144)           MSX_PHYDIO	equ $0144
      85.  00:8073  (00:0147)           MSX_FORMAT	equ $0147
      86.  00:8073  (00:014A)           MSX_ISFLIO	equ $014A
      87.  00:8073  (00:014D)           MSX_OUTDLP	equ $014D
      88.  00:8073  (00:0150)           MSX_GETVCP	equ $0150
      89.  00:8073  (00:0153)           MSX_GETVC2	equ $0153
      90.  00:8073  (00:0156)           MSX_KILBUF	equ $0156
      91.  00:8073  (00:0159)           MSX_CALBAS	equ $0159
      92.  00:8073                      	
      93.  00:8073                      	endif
      94.  00:8073                      
      95.  00:8073  (00:000C)           MSX_RDSLT	equ $000C
      96.  00:8073  (00:001C)           MSX_CALSLT	equ $001C
      97.  00:8073  (00:0138)           MSX_RSLREG	equ $0138
      98.  00:8073                      
      99.  00:8073                      ; --- end of all MSX 1 BIOS calls ---
     100.  00:8073                      ; BIOS routine - Turbo-R computers only!
     101.  00:8073  (00:0180)           MSX_CHGCPU	equ $0180
     102.  00:8073                      
     103.  00:8073                      ; Diskrom motor off entry point
     104.  00:8073  (00:4029)           MSX_MTOFF	equ	$4029
     105.  00:8073                      
     106.  00:8073                      ; VRAM addresses =================================================
     107.  00:8073                      
     108.  00:8073  (00:0000)           MSX_CHRTBL	equ $0000 ; (GRPCGP)
     109.  00:8073  (00:1800)           MSX_NAMTBL	equ $1800 ; (GRPNAM)
     110.  00:8073  (00:2000)           MSX_CLRTBL	equ $2000 ; (GRPCOL)
     111.  00:8073  (00:3800)           MSX_SPRTBL	equ $3800 ; (GRPPAT)
     112.  00:8073  (00:1B00)           MSX_SPRATR	equ $1B00 ; (GRPATR)
     113.  00:8073                      
     114.  00:8073                      ; BIOS constants =================================================
     115.  00:8073  (00:0007)           MSX_VDPPRT	equ	$0007	; VDP port 0
     116.  00:8073  (00:002D)           MSX_MSXVER	equ $002D
     117.  00:8073                      
     118.  00:8073                      ; System variables addresses =====================================
     119.  00:8073  (00:5348)           MSX_MSLOT	equ	$5348
     120.  00:8073  (00:53C7)           MSX_GRPNAM  	equ	$53C7
     121.  00:8073  (00:53C9)           MSX_GRPCOL  	equ	$53C9
     122.  00:8073  (00:53CB)           MSX_GRPCGP  	equ	$53CB
     123.  00:8073  (00:53CD)           MSX_GRPATR  	equ	$53CD
     124.  00:8073  (00:53CF)           MSX_GRPPAT  	equ	$53CF
     125.  00:8073  (00:53DB)           MSX_CLIKSW	equ	$53DB	; Keyboard click sound
     126.  00:8073  (00:53E9)           MSX_FORCLR	equ	$53E9	; Foreground colour
     127.  00:8073  (00:53EA)           MSX_BAKCLR	equ	$53EA	; Background colour
     128.  00:8073  (00:53EB)           MSX_BDRCLR	equ	$53EB	; Border colour
     129.  00:8073  (00:53DF)           MSX_RG0SAV	equ	$53DF 	; 	Mirror of VDP register 0 (Basic: VDP(0))
     130.  00:8073  (00:53E0)           MSX_RG1SAV	equ	$53E0 	; 	Mirror of VDP register 1 (Basic: VDP(1))
     131.  00:8073  (00:53E1)           MSX_RG2SAV	equ	$53E1 	; 	Mirror of VDP register 2 (Basic: VDP(2))
     132.  00:8073  (00:53E2)           MSX_RG3SAV	equ	$53E2 	; 	Mirror of VDP register 3 (Basic: VDP(3))
     133.  00:8073  (00:53E3)           MSX_RG4SAV	equ	$53E3 	; 	Mirror of VDP register 4 (Basic: VDP(4))
     134.  00:8073  (00:53E4)           MSX_RG5SAV	equ	$53E4 	; 	Mirror of VDP register 5 (Basic: VDP(5))
     135.  00:8073  (00:53E5)           MSX_RG6SAV	equ	$53E5 	; 	Mirror of VDP register 6 (Basic: VDP(6))
     136.  00:8073  (00:53E6)           MSX_RG7SAV	equ	$53E6 	; Mirror of VDP register 7 (Basic: VDP(7))
     137.  00:8073  (00:5FE7)           MSX_RG8SAV	equ	$5FE7	; Mirror of VDP register 9 (Basic: VDP(9))
     138.  00:8073  (00:5FE8)           MSX_RG9SAV	equ	$5FE8	; Mirror of VDP register 9 (Basic: VDP(9))
     139.  00:8073  (00:53E7)           MSX_STATFL	equ	$53E7 	; 	Mirror of VDP(8) status register (S#0)
     140.  00:8073  (00:53F6)           MSX_SCNCNT  	equ	$53F6
     141.  00:8073  (00:53F7)           MSX_REPCNT  	equ	$53F7
     142.  00:8073  (00:587F)           MSX_FNKSTR	equ	$587F	; Ubicacion textos teclas funcion (se reaprovecha como RAM, 160 bytes)
     143.  00:8073  (00:5BE5)           MSX_NEWKEY	equ	$5BE5
     144.  00:8073  (00:5C4A)           MSX_HIMEM	equ	$5C4A	; Highest available RAM
     145.  00:8073  (00:5C9E)           MSX_JIFFY	equ	$5C9E
     146.  00:8073  (00:5CA2)           MSX_INTCNT  	equ	$5CA2
     147.  00:8073  (00:5CC1)           MSX_EXPTBL	equ	$5CC1	; Bios Slot / Expansion Slot	
     148.  00:8073  (00:5CC5)           MSX_SLTTBL	equ	$5CC5
     149.  00:8073  (00:5D9A)           MSX_HKEYI	equ	$5D9A	 
     150.  00:8073  (00:5D9F)           MSX_HTIMI   	equ	$5D9F
     151.  00:8073  (00:5FFF)           MSX_SSSREG	equ	$5FFF	; secondary slot select register
     152.  00:8073                      
     153.  00:8073                      ; ================================================================
     154.  00:8073                      
     155.  00:8073                      ; Maximum stack address
     156.  00:8073  (00:3000)           CV_STACK	equ $3000
     157.  00:8073                      
     158.  00:8073                      ; I/O PORTS ================================================================
     159.  00:8073  (00:0040)           MSX_DEVID	equ	$40
     160.  00:8073  (00:0041)           MSX_SWTIO	equ $41
     161.  00:8073                      
     162.  00:8073                      ; PSG PORTS
     163.  00:8073  (00:00A0)           MSX_PSGLW	equ $A0 ;A0H    latch address for PSG
     164.  00:8073  (00:00A1)           MSX_PSGDW	equ $A1 ;A1H    write data to PSG
     165.  00:8073  (00:00A2)           MSX_PSGDR	equ $A2 ;A2H    read data from PSG
     166.  00:8073                      ;
     167.  00:8073  (00:000E)           MSX_PSGPA	equ 14  ;Port A of PSG
     168.  00:8073  (00:000F)           MSX_PSGPB	equ 15  ;Port B of PSG
     169.  00:8073                      
     170.  00:8073                      
     171.  00:8073                      ; VDP PORTS
     172.  00:8073  (00:00BE)           MSX_VDPDRW	equ	$be	;98H    Read/write data VDP
     173.  00:8073  (00:00BF)           MSX_VDPCW	equ	$bf	;99H    write command to VDP
     174.  00:8073  (00:00BF)           MSX_VDPSR	equ	$bf	;99H    read status from VDP
     175.  00:8073  (00:009B)           MSX_VDPPAL	equ	$9B     ; palette register (only MSX2)
     176.  00:8073                      
     177.  00:8073                      ; PPI / Programmable Peripheral Interface / 8255 I/O ports
     178.  00:8073  (00:00A8)           MSX_PPIA	equ $A8 ; PPI- register A. Primary slot select register
     179.  00:8073  (00:00A9)           MSX_PPIB	equ $A9 ; PPI- register B. Keyboard matrix row input register (read only)
     180.  00:8073  (00:00AA)           MSX_PPIC	equ $AA ; PPI- register C. Keyboard and cassette interface
     181.  00:8073  (00:00AB)           MSX_PPICM	equ $AB ; PPI- Command register (write only)
     182.  00:8073                      
     183.  00:8073  (00:00FC)           MSX_MMAP0	equ	$FC
     184.  00:8073  (00:00FD)           MSX_MMAP1	equ	$FD
     185.  00:8073  (00:00FE)           MSX_MMAP2	equ	$FE
     186.  00:8073  (00:00FF)           MSX_MMAP3	equ	$FF
     187.  00:8073                      
     188.  00:8073                      ; ================================================================
     189.  00:8073                      
     190.  00:8073                      ; Disable sprites magic numbers
     191.  00:8073  (00:00D0)           MSX_HIDE_SPRITES	equ	208
     192.  00:8073  (00:00D1)           MSX_HIDE_SPRITE		equ	209
     193.  00:8073                      
     194.  00:8073                      ; Replaced BIOS calls
     195.  00:8073                      
     196.  00:8073                      	ifdef NOBIOS
     197.  00:8073                    ~ 
     198.  00:8073                    ~ 		include "MSX_BIOS.asm"
     199.  00:8073                    ~ 		
     200.  00:8073                    ~ MSX_SNSMAT	equ 	BIOS_SNSMAT  
     201.  00:8073                    ~ MSX_INIGRP	equ	BIOS_INIGRP  
     202.  00:8073                    ~ MSX_ENASCR	equ	BIOS_ENASCR  
     203.  00:8073                    ~ MSX_DISSCR	equ	BIOS_DISSCR  
     204.  00:8073                    ~ MSX_WRTVDP	equ	BIOS_WRTVDP
     205.  00:8073                    ~ MSX_SETRD	equ	BIOS_SETRD
     206.  00:8073                    ~ MSX_SETWRT	equ	BIOS_SETWRT
     207.  00:8073                    ~ MSX_WRTVRM	equ	BIOS_WRTVRM 
     208.  00:8073                    ~ MSX_RDVRM	equ	BIOS_RDVRM
     209.  00:8073                    ~ MSX_LDIRMV	equ	BIOS_LDIRMV
     210.  00:8073                    ~ MSX_LDIRVM	equ	BIOS_LDIRVM
     211.  00:8073                    ~ MSX_CLS		equ	BIOS_CLS
     212.  00:8073                    ~ MSX_FILVRM	equ	BIOS_FILVRM
     213.  00:8073                    ~ MSX_ENASLT	equ	BIOS_ENASLT
     214.  00:8073                    ~ MSX_GTSTCK	equ	BIOS_GTSTCK
     215.  00:8073                    ~ MSX_GTTRIG	equ	BIOS_GTTRIG
     216.  00:8073                    ~ 
     217.  00:8073                    ~ 	else
     218.  00:8073                      
     219.  00:8073  (00:0024)           MSX_ENASLT	equ $0024
     220.  00:8073  (00:0041)           MSX_DISSCR	equ $0041
     221.  00:8073  (00:0044)           MSX_ENASCR	equ $0044
     222.  00:8073  (00:0047)           MSX_WRTVDP	equ $0047
     223.  00:8073  (00:004A)           MSX_RDVRM	equ $004A
     224.  00:8073  (00:CBA3)           MSX_WRTVRM	equ CV_WRTVRM	; $004D
     225.  00:8073  (00:0050)           MSX_SETRD	equ $0050
     226.  00:8073  (00:CB96)           MSX_SETWRT	equ CV_SETWRT	; $0053
     227.  00:8073  (00:0056)           MSX_FILVRM	equ $0056
     228.  00:8073  (00:0059)           MSX_LDIRMV	equ $0059
     229.  00:8073  (00:005C)           MSX_LDIRVM	equ $005C
     230.  00:8073  (00:0072)           MSX_INIGRP	equ $0072
     231.  00:8073  (00:CB71)           MSX_CLS		equ CV_CLS	; $00C3
     232.  00:8073  (00:00D5)           MSX_GTSTCK	equ $00D5
     233.  00:8073  (00:00D8)           MSX_GTTRIG	equ $00D8
     234.  00:8073  (00:0141)           MSX_SNSMAT	equ $0141
     235.  00:8073                      		
     236.  00:8073                      	endif
     237.  00:8073                      
      17   00:8073                          include "MSX_Macros.asm"
       1.  00:8073                      ; MSX MACROS
       2.  00:8073                      
       3.  00:8073                      	macro BORDER clr
       4.  00:8073                    < 		push af
       5.  00:8073                    <         ld a,clr             ;Get data to set
       6.  00:8073                    <         di
       7.  00:8073                    <         out (MSX_VDPCW),a
       8.  00:8073                    <         ld a,$87             ;Set register #
       9.  00:8073                    <         out (MSX_VDPCW),a
      10.  00:8073                    < 		pop af
      11.  00:8073                    <         ei
      12.  00:8073                    < 	endmacro
      13.  00:8073                      
      14.  00:8073                      	; Set VDP for write (based on DE or HL)
      15.  00:8073                      	macro SETWRT reg
      16.  00:8073                    < 	ifdifi reg,de
      17.  00:8073                    < 		ld a,l
      18.  00:8073                    < 		di
      19.  00:8073                    < 		out (MSX_VDPCW),a
      20.  00:8073                    < 		ld a,h
      21.  00:8073                    < 	else
      22.  00:8073                    < 		ld a,e
      23.  00:8073                    < 		di
      24.  00:8073                    < 		out (MSX_VDPCW),a
      25.  00:8073                    < 		ld a,d
      26.  00:8073                    < 	endif
      27.  00:8073                    < 		or $40
      28.  00:8073                    < 		out (MSX_VDPCW),a
      29.  00:8073                    < 		ei		
      30.  00:8073                    < 	endmacro
      31.  00:8073                      
      32.  00:8073                      	; Set VDP for read (based on DE or HL)
      33.  00:8073                      	macro SETRD reg
      34.  00:8073                    < 	ifdifi reg,de
      35.  00:8073                    < 		ld a,l
      36.  00:8073                    < 		di
      37.  00:8073                    < 		out (MSX_VDPCW),a
      38.  00:8073                    < 		ld a,h
      39.  00:8073                    < 	else
      40.  00:8073                    < 		ld a,e
      41.  00:8073                    < 		di
      42.  00:8073                    < 		out (MSX_VDPCW),a
      43.  00:8073                    < 		ld a,d
      44.  00:8073                    < 	endif
      45.  00:8073                    < 		and $3F
      46.  00:8073                    < 		out (MSX_VDPCW),a
      47.  00:8073                    < 		ei
      48.  00:8073                    < 	endmacro
      49.  00:8073                      
      50.  00:8073                      	/*
      51.  00:8073                    ~ 	macro HALT1
      52.  00:8073                    ~ 		ld hl,clock         ; previous clock setting.		
      53.  00:8073                    ~ 		inc (hl)
      54.  00:8073                    ~ .wait:
      55.  00:8073                    ~ 		ld a,(MSX_JIFFY)        ; current clock setting.
      56.  00:8073                    ~ 		cp (hl)             ; subtract last reading.
      57.  00:8073                    ~ 		jp z,.wait        ; yes, no more processing please.
      58.  00:8073                    ~ 		ld (hl),a
      59.  00:8073                    ~ 	endmacro 
      60.  00:8073                    ~ 	*/
      61.  00:8073                      
      62.  00:8073                      	macro WAITFRAME
      63.  00:8073                    < 		ifdef DEBUG
      64.  00:8073                    < 		BORDER 13
      65.  00:8073                    < 		endif
      66.  00:8073                    < 		ei
      67.  00:8073                    < 		ld hl,MSX_JIFFY
      68.  00:8073                    < 		ld a,(hl)
      69.  00:8073                    < .wait:
      70.  00:8073                    < 		cp (hl)
      71.  00:8073                    < 		jr z,.wait
      72.  00:8073                    < 		ifdef DEBUG
      73.  00:8073                    < 		BORDER 14
      74.  00:8073                    < 		endif
      75.  00:8073                    < 	endmacro
      76.  00:8073                      
      77.  00:8073                      	macro ADD_HL_A
      78.  00:8073                    < 		add a,l			; 5
      79.  00:8073                    < 		ld l,a			; 5
      80.  00:8073                    < 		adc a,h			; 5
      81.  00:8073                    < 		sub l			; 5
      82.  00:8073                    < 		ld h,a			; 5
      83.  00:8073                    < 	endmacro
      84.  00:8073                      
      85.  00:8073                      	macro ADD_DE_A
      86.  00:8073                    < 		add a,e
      87.  00:8073                    < 		ld e,a
      88.  00:8073                    < 		adc a,d
      89.  00:8073                    < 		sub e
      90.  00:8073                    < 		ld d,a	
      91.  00:8073                    < 	endmacro
      92.  00:8073                      
      93.  00:8073                      	macro ADD_BC_A
      94.  00:8073                    < 		add a,c
      95.  00:8073                    < 		ld c,a
      96.  00:8073                    < 		adc a,b
      97.  00:8073                    < 		sub c
      98.  00:8073                    < 		ld b,a	
      99.  00:8073                    < 	endmacro
     100.  00:8073                      
     101.  00:8073                      	macro EX_SP_DE
     102.  00:8073                    < 		ex de,hl
     103.  00:8073                    < 		ex (sp),hl
     104.  00:8073                    < 		ex de,hl
     105.  00:8073                    < 	endmacro
     106.  00:8073                      	
      18   00:8073                      
      19   00:8073                      
      20   00:8073  (00:0001)           WINDOWTOP equ 1
      21   00:8073  (00:0001)           WINDOWLFT equ 1
      22   00:8073  (00:0014)           WINDOWHGT equ 20
      23   00:8073  (00:001E)           WINDOWWID equ 30
      24   00:8073  (00:000D)           MAPWID	equ 13
      25   00:8073                      mapedge: 
      26   00:8073                             db 255,255,255,255,255,255,255,255,255,255,255,255,255
      26   00:8073  FF FF FF FF FF FF FF FF FF FF FF FF FF 
      27   00:8080                      mapdat:
      28   00:8080                             db 255,0,1,2,3,4,5,6,7,8,9,10,255
      28   00:8080  FF 00 01 02 03 04 05 06 07 08 09 0A FF 
      29   00:808D                             db 255,11,12,13,14,15,16,17,18,19,20,255,255
      29   00:808D  FF 0B 0C 0D 0E 0F 10 11 12 13 14 FF FF 
      30   00:809A                             db 255,255,255,255,255,255,255,255,255,255,255,255,255
      30   00:809A  FF FF FF FF FF FF FF FF FF FF FF FF FF 
      31   00:80A7  01                  stmap: db 1
      32   00:80A8                      
      33   00:80A8  (00:80A8)           evnt00:	equ $
      34   00:80A8  CD C9 BC                   call skobj
      35   00:80AB  32 57 40                   ld (varobj),a
      36   00:80AE  3E FF                      ld a,255
      37   00:80B0  21 57 40                   ld hl,varobj
      38   00:80B3  BE                         cp (hl)
      39   00:80B4  CA BC 80                   jp z,a00039
      40   00:80B7  3E 02                      ld a,2
      41   00:80B9  32 22 40                   ld (varg),a
      42   00:80BC  3E 02               a00039 ld a,2
      43   00:80BE  21 22 40                   ld hl,varg
      44   00:80C1  BE                         cp (hl)
      45   00:80C2  C2 00 81                   jp nz,a00161
      46   00:80C5  DD 7E 03                   ld a,(ix+3)
      47   00:80C8  32 25 40                   ld (varj),a
      48   00:80CB  3A 25 40                   ld a,(varj)
      49   00:80CE  1F                         rra
      50   00:80CF  1F                         rra
      51   00:80D0  E6 3F                      and 63
      52   00:80D2  32 25 40                   ld (varj),a
      53   00:80D5  3A 25 40                   ld a,(varj)
      54   00:80D8  E6 7F                      and 127
      55   00:80DA  32 16 40                   ld (sndtyp),a
      56   00:80DD  3E 10                      ld a,16
      57   00:80DF  DD 77 01                   ld (ix+1),a
      58   00:80E2  3E A0                      ld a,160
      59   00:80E4  DD BE 03                   cp (ix+3)
      60   00:80E7  DA FC 80                   jp c,a00152
      61   00:80EA  AF                         xor a
      62   00:80EB  21 1E 40                   ld hl,varc
      63   00:80EE  BE                         cp (hl)
      64   00:80EF  C2 F6 80                   jp nz,a00143
      65   00:80F2  AF                         xor a
      66   00:80F3  CD 3F C4                   call animsp
      67   00:80F6  DD 34 03            a00143 inc (ix+3)
      68   00:80F9  C3 00 81                   jp a00161
      69   00:80FC  21 52 40            a00152 ld hl,deadf
      70   00:80FF  74                         ld (hl),h
      71   00:8100  AF                  a00161 xor a
      72   00:8101  21 22 40                   ld hl,varg
      73   00:8104  BE                         cp (hl)
      74   00:8105  C2 EF 82                   jp nz,a01062
      75   00:8108  AF                         xor a
      76   00:8109  21 27 40                   ld hl,varl
      77   00:810C  BE                         cp (hl)
      78   00:810D  C2 1B 82                   jp nz,a00678
      79   00:8110  3A 40 40                   ld a,(joyval)
      80   00:8113  E6 01                      and 1
      81   00:8115  CA 6B 81                   jp z,a00357
      82   00:8118  3E 01                      ld a,1
      83   00:811A  21 20 40                   ld hl,vare
      84   00:811D  BE                         cp (hl)
      85   00:811E  C2 2E 81                   jp nz,a00248
      86   00:8121  AF                         xor a
      87   00:8122  32 20 40                   ld (vare),a
      88   00:8125  0E 08                      ld c,8
      89   00:8127  DD 7E 03                   ld a,(ix+3)
      90   00:812A  91                         sub c
      91   00:812B  DD 77 03                   ld (ix+3),a
      92   00:812E  3E DA               a00248 ld a,218
      93   00:8130  DD BE 04                   cp (ix+4)
      94   00:8133  DA 6B 81                   jp c,a00357
      95   00:8136  AF                         xor a
      96   00:8137  21 26 40                   ld hl,vark
      97   00:813A  BE                         cp (hl)
      98   00:813B  C2 6B 81                   jp nz,a00357
      99   00:813E  DD 7E 04                   ld a,(ix+4)
     100   00:8141  32 1C 40                   ld (vara),a
     101   00:8144  0E 14                      ld c,20
     102   00:8146  3A 1C 40                   ld a,(vara)
     103   00:8149  81                         add a,c
     104   00:814A  32 1C 40                   ld (vara),a
     105   00:814D  0E 04                      ld c,4
     106   00:814F  DD 7E 03                   ld a,(ix+3)
     107   00:8152  91                         sub c
     108   00:8153  DD 77 03                   ld (ix+3),a
     109   00:8156  3E 01                      ld a,1
     110   00:8158  32 1F 40                   ld (vard),a
     111   00:815B  3E 01                      ld a,1
     112   00:815D  32 26 40                   ld (vark),a
     113   00:8160  3E 01                      ld a,1
     114   00:8162  DD 77 01                   ld (ix+1),a
     115   00:8165  AF                         xor a
     116   00:8166  0E 00                      ld c,0
     117   00:8168  CD 20 C9                   call sfx_set
     118   00:816B  3A 40 40            a00357 ld a,(joyval)
     119   00:816E  E6 02                      and 2
     120   00:8170  CA C6 81                   jp z,a00520
     121   00:8173  3E 01                      ld a,1
     122   00:8175  21 20 40                   ld hl,vare
     123   00:8178  BE                         cp (hl)
     124   00:8179  C2 89 81                   jp nz,a00411
     125   00:817C  AF                         xor a
     126   00:817D  32 20 40                   ld (vare),a
     127   00:8180  0E 08                      ld c,8
     128   00:8182  DD 7E 03                   ld a,(ix+3)
     129   00:8185  91                         sub c
     130   00:8186  DD 77 03                   ld (ix+3),a
     131   00:8189  3E 1E               a00411 ld a,30
     132   00:818B  DD BE 04                   cp (ix+4)
     133   00:818E  D2 C6 81                   jp nc,a00520
     134   00:8191  AF                         xor a
     135   00:8192  21 26 40                   ld hl,vark
     136   00:8195  BE                         cp (hl)
     137   00:8196  C2 C6 81                   jp nz,a00520
     138   00:8199  DD 7E 04                   ld a,(ix+4)
     139   00:819C  32 1C 40                   ld (vara),a
     140   00:819F  0E 26                      ld c,38
     141   00:81A1  3A 1C 40                   ld a,(vara)
     142   00:81A4  91                         sub c
     143   00:81A5  32 1C 40                   ld (vara),a
     144   00:81A8  0E 04                      ld c,4
     145   00:81AA  DD 7E 03                   ld a,(ix+3)
     146   00:81AD  91                         sub c
     147   00:81AE  DD 77 03                   ld (ix+3),a
     148   00:81B1  3E 02                      ld a,2
     149   00:81B3  32 1F 40                   ld (vard),a
     150   00:81B6  3E 01                      ld a,1
     151   00:81B8  32 26 40                   ld (vark),a
     152   00:81BB  3E 03                      ld a,3
     153   00:81BD  DD 77 01                   ld (ix+1),a
     154   00:81C0  AF                         xor a
     155   00:81C1  0E 00                      ld c,0
     156   00:81C3  CD 20 C9                   call sfx_set
     157   00:81C6  3A 40 40            a00520 ld a,(joyval)
     158   00:81C9  E6 04                      and 4
     159   00:81CB  CA F1 81                   jp z,a00599
     160   00:81CE  AF                         xor a
     161   00:81CF  21 26 40                   ld hl,vark
     162   00:81D2  BE                         cp (hl)
     163   00:81D3  C2 F1 81                   jp nz,a00599
     164   00:81D6  AF                         xor a
     165   00:81D7  21 20 40                   ld hl,vare
     166   00:81DA  BE                         cp (hl)
     167   00:81DB  C2 F1 81                   jp nz,a00599
     168   00:81DE  3E 01                      ld a,1
     169   00:81E0  32 20 40                   ld (vare),a
     170   00:81E3  3E 04                      ld a,4
     171   00:81E5  DD 77 01                   ld (ix+1),a
     172   00:81E8  0E 08                      ld c,8
     173   00:81EA  DD 7E 03                   ld a,(ix+3)
     174   00:81ED  81                         add a,c
     175   00:81EE  DD 77 03                   ld (ix+3),a
     176   00:81F1  3A 40 40            a00599 ld a,(joyval)
     177   00:81F4  E6 08                      and 8
     178   00:81F6  CA 1B 82                   jp z,a00678
     179   00:81F9  AF                         xor a
     180   00:81FA  21 26 40                   ld hl,vark
     181   00:81FD  BE                         cp (hl)
     182   00:81FE  C2 1B 82                   jp nz,a00678
     183   00:8201  3E 01                      ld a,1
     184   00:8203  21 20 40                   ld hl,vare
     185   00:8206  BE                         cp (hl)
     186   00:8207  C2 1B 82                   jp nz,a00678
     187   00:820A  AF                         xor a
     188   00:820B  32 20 40                   ld (vare),a
     189   00:820E  AF                         xor a
     190   00:820F  DD 77 01                   ld (ix+1),a
     191   00:8212  0E 08                      ld c,8
     192   00:8214  DD 7E 03                   ld a,(ix+3)
     193   00:8217  91                         sub c
     194   00:8218  DD 77 03                   ld (ix+3),a
     195   00:821B  3E 01               a00678 ld a,1
     196   00:821D  21 1F 40                   ld hl,vard
     197   00:8220  BE                         cp (hl)
     198   00:8221  C2 4A 82                   jp nz,a00763
     199   00:8224  DD 7E 04                   ld a,(ix+4)
     200   00:8227  21 1C 40                   ld hl,vara
     201   00:822A  BE                         cp (hl)
     202   00:822B  D2 3E 82                   jp nc,a00739
     203   00:822E  DD 34 04                   inc (ix+4)
     204   00:8231  DD 34 04                   inc (ix+4)
     205   00:8234  3A 1C 40                   ld a,(vara)
     206   00:8237  3C                         inc a
     207   00:8238  32 1C 40                   ld (vara),a
     208   00:823B  C3 4A 82                   jp a00763
     209   00:823E  AF                  a00739 xor a
     210   00:823F  32 1F 40                   ld (vard),a
     211   00:8242  AF                         xor a
     212   00:8243  32 26 40                   ld (vark),a
     213   00:8246  AF                         xor a
     214   00:8247  DD 77 01                   ld (ix+1),a
     215   00:824A  3A 40 40            a00763 ld a,(joyval)
     216   00:824D  E6 10                      and 16
     217   00:824F  CA 9E 82                   jp z,a00918
     218   00:8252  AF                         xor a
     219   00:8253  21 1D 40                   ld hl,varb
     220   00:8256  BE                         cp (hl)
     221   00:8257  C2 78 82                   jp nz,a00847
     222   00:825A  06 05                      ld b,DEADLY
     223   00:825C  CD 18 C0                   call tded
     224   00:825F  B8                         cp b
     225   00:8260  C2 78 82                   jp nz,a00847
     226   00:8263  0E 28                      ld c,40
     227   00:8265  DD 7E 03                   ld a,(ix+3)
     228   00:8268  81                         add a,c
     229   00:8269  DD 77 03                   ld (ix+3),a
     230   00:826C  3E 01                      ld a,1
     231   00:826E  0E 00                      ld c,0
     232   00:8270  CD 20 C9                   call sfx_set
     233   00:8273  3E 0A                      ld a,10
     234   00:8275  32 1D 40                   ld (varb),a
     235   00:8278  AF                  a00847 xor a
     236   00:8279  21 1D 40                   ld hl,varb
     237   00:827C  BE                         cp (hl)
     238   00:827D  C2 9E 82                   jp nz,a00918
     239   00:8280  06 06                      ld b,CUSTOM
     240   00:8282  CD 18 C0                   call tded
     241   00:8285  B8                         cp b
     242   00:8286  C2 9E 82                   jp nz,a00918
     243   00:8289  0E 28                      ld c,40
     244   00:828B  DD 7E 03                   ld a,(ix+3)
     245   00:828E  91                         sub c
     246   00:828F  DD 77 03                   ld (ix+3),a
     247   00:8292  3E 01                      ld a,1
     248   00:8294  0E 00                      ld c,0
     249   00:8296  CD 20 C9                   call sfx_set
     250   00:8299  3E 0A                      ld a,10
     251   00:829B  32 1D 40                   ld (varb),a
     252   00:829E  3E 02               a00918 ld a,2
     253   00:82A0  21 1F 40                   ld hl,vard
     254   00:82A3  BE                         cp (hl)
     255   00:82A4  C2 C7 82                   jp nz,a00990
     256   00:82A7  DD 7E 04                   ld a,(ix+4)
     257   00:82AA  21 1C 40                   ld hl,vara
     258   00:82AD  BE                         cp (hl)
     259   00:82AE  DA BA 82                   jp c,a00965
     260   00:82B1  DD 35 04                   dec (ix+4)
     261   00:82B4  DD 35 04                   dec (ix+4)
     262   00:82B7  C3 C7 82                   jp a00990
     263   00:82BA  AF                  a00965 xor a
     264   00:82BB  32 1F 40                   ld (vard),a
     265   00:82BE  AF                         xor a
     266   00:82BF  32 26 40                   ld (vark),a
     267   00:82C2  3E 02                      ld a,2
     268   00:82C4  DD 77 01                   ld (ix+1),a
     269   00:82C7  AF                  a00990 xor a
     270   00:82C8  21 1F 40                   ld hl,vard
     271   00:82CB  BE                         cp (hl)
     272   00:82CC  C2 EF 82                   jp nz,a01062
     273   00:82CF  AF                         xor a
     274   00:82D0  21 20 40                   ld hl,vare
     275   00:82D3  BE                         cp (hl)
     276   00:82D4  C2 EF 82                   jp nz,a01062
     277   00:82D7  CD A6 BF                   call cangd
     278   00:82DA  C2 EB 82                   jp nz,a01054
     279   00:82DD  DD 34 03                   inc (ix+3)
     280   00:82E0  DD 34 03                   inc (ix+3)
     281   00:82E3  3E 01                      ld a,1
     282   00:82E5  32 27 40                   ld (varl),a
     283   00:82E8  C3 EF 82                   jp a01062
     284   00:82EB  AF                  a01054 xor a
     285   00:82EC  32 27 40                   ld (varl),a
     286   00:82EF  3E 01               a01062 ld a,1
     287   00:82F1  21 22 40                   ld hl,varg
     288   00:82F4  BE                         cp (hl)
     289   00:82F5  C2 62 83                   jp nz,a01285
     290   00:82F8  3E 72                      ld a,114
     291   00:82FA  21 21 40                   ld hl,varf
     292   00:82FD  BE                         cp (hl)
     293   00:82FE  D2 0B 83                   jp nc,a01113
     294   00:8301  CD D6 B6                   call cls
     295   00:8304  21 50 40                   ld hl,nexlev
     296   00:8307  74                         ld (hl),h
     297   00:8308  C3 62 83                   jp a01285
     298   00:830B  3E 0B               a01113 ld a,11
     299   00:830D  32 35 40                   ld (charx),a
     300   00:8310  3E 0A                      ld a,10
     301   00:8312  32 36 40                   ld (chary),a
     302   00:8315  3E 06                      ld a,6
     303   00:8317  87                         add a,a
     304   00:8318  87                         add a,a
     305   00:8319  87                         add a,a
     306   00:831A  87                         add a,a
     307   00:831B  5F                         ld e,a
     308   00:831C  3A 39 40                   ld a,(clratt)
     309   00:831F  E6 0F                      and $0F
     310   00:8321  B3                         or e
     311   00:8322  32 39 40                   ld (clratt),a
     312   00:8325  3E 02                      ld a,2
     313   00:8327  5F                         ld e,a
     314   00:8328  3A 39 40                   ld a,(clratt)
     315   00:832B  E6 F0                      and $F0
     316   00:832D  B3                         or e
     317   00:832E  32 39 40                   ld (clratt),a
     318   00:8331  3E 02                      ld a,2
     319   00:8333  CD 06 C1                   call dmsg
     320   00:8336  3E 04                      ld a,4
     321   00:8338  32 19 40                   ld (loopa),a
     322   00:833B  3E 02               a01210 ld a,2
     323   00:833D  0E 00                      ld c,0
     324   00:833F  CD 20 C9                   call sfx_set
     325   00:8342  21 19 40                   ld hl,loopa
     326   00:8345  35                         dec (hl)
     327   00:8346  C2 3B 83                   jp nz,a01210
     328   00:8349  DD E5                      push ix
     329   00:834B  06 64                      ld b,100
     330   00:834D  CD BF B5                   call delay
     331   00:8350  DD E1                      pop ix
     332   00:8352  AF                         xor a
     333   00:8353  32 22 40                   ld (varg),a
     334   00:8356  AF                         xor a
     335   00:8357  32 26 40                   ld (vark),a
     336   00:835A  AF                         xor a
     337   00:835B  32 1F 40                   ld (vard),a
     338   00:835E  21 50 40                   ld hl,nexlev
     339   00:8361  74                         ld (hl),h
     340   00:8362  C9                  a01285 ret
     341   00:8363                      
     342   00:8363  (00:8363)           evnt01:	equ $
     343   00:8363  0E 00                      ld c,0
     344   00:8365  CD 6D C4                   call sktyp
     345   00:8368  D2 70 83                   jp nc,b00025
     346   00:836B  3E 02                      ld a,2
     347   00:836D  32 22 40                   ld (varg),a
     348   00:8370  CD E8 BF            b00025 call cangr
     349   00:8373  C2 10 84                   jp nz,b00321
     350   00:8376  3E 05                      ld a,5
     351   00:8378  21 41 40                   ld hl,scno
     352   00:837B  BE                         cp (hl)
     353   00:837C  C2 87 83                   jp nz,b00066
     354   00:837F  3E 07                      ld a,7
     355   00:8381  E6 0F                      and $0F
     356   00:8383  4F                         ld c,a
     357   00:8384  CD 31 B7                   call cspr
     358   00:8387  3E 06               b00066 ld a,6
     359   00:8389  21 41 40                   ld hl,scno
     360   00:838C  BE                         cp (hl)
     361   00:838D  C2 98 83                   jp nz,b00098
     362   00:8390  3E 07                      ld a,7
     363   00:8392  E6 0F                      and $0F
     364   00:8394  4F                         ld c,a
     365   00:8395  CD 31 B7                   call cspr
     366   00:8398  3E 07               b00098 ld a,7
     367   00:839A  21 41 40                   ld hl,scno
     368   00:839D  BE                         cp (hl)
     369   00:839E  C2 A9 83                   jp nz,b00129
     370   00:83A1  3E 07                      ld a,7
     371   00:83A3  E6 0F                      and $0F
     372   00:83A5  4F                         ld c,a
     373   00:83A6  CD 31 B7                   call cspr
     374   00:83A9  3E 09               b00129 ld a,9
     375   00:83AB  21 41 40                   ld hl,scno
     376   00:83AE  BE                         cp (hl)
     377   00:83AF  D2 BA 83                   jp nc,b00161
     378   00:83B2  3E 07                      ld a,7
     379   00:83B4  E6 0F                      and $0F
     380   00:83B6  4F                         ld c,a
     381   00:83B7  CD 31 B7                   call cspr
     382   00:83BA  DD 34 04            b00161 inc (ix+4)
     383   00:83BD  3E 05                      ld a,5
     384   00:83BF  21 41 40                   ld hl,scno
     385   00:83C2  BE                         cp (hl)
     386   00:83C3  C2 CE 83                   jp nz,b00197
     387   00:83C6  3E 02                      ld a,2
     388   00:83C8  E6 0F                      and $0F
     389   00:83CA  4F                         ld c,a
     390   00:83CB  CD 31 B7                   call cspr
     391   00:83CE  3E 06               b00197 ld a,6
     392   00:83D0  21 41 40                   ld hl,scno
     393   00:83D3  BE                         cp (hl)
     394   00:83D4  C2 DF 83                   jp nz,b00229
     395   00:83D7  3E 02                      ld a,2
     396   00:83D9  E6 0F                      and $0F
     397   00:83DB  4F                         ld c,a
     398   00:83DC  CD 31 B7                   call cspr
     399   00:83DF  3E 07               b00229 ld a,7
     400   00:83E1  21 41 40                   ld hl,scno
     401   00:83E4  BE                         cp (hl)
     402   00:83E5  C2 F0 83                   jp nz,b00261
     403   00:83E8  3E 03                      ld a,3
     404   00:83EA  E6 0F                      and $0F
     405   00:83EC  4F                         ld c,a
     406   00:83ED  CD 31 B7                   call cspr
     407   00:83F0  3E 09               b00261 ld a,9
     408   00:83F2  21 41 40                   ld hl,scno
     409   00:83F5  BE                         cp (hl)
     410   00:83F6  D2 01 84                   jp nc,b00293
     411   00:83F9  3E 02                      ld a,2
     412   00:83FB  E6 0F                      and $0F
     413   00:83FD  4F                         ld c,a
     414   00:83FE  CD 31 B7                   call cspr
     415   00:8401  AF                  b00293 xor a
     416   00:8402  21 1E 40                   ld hl,varc
     417   00:8405  BE                         cp (hl)
     418   00:8406  C2 0D 84                   jp nz,b00317
     419   00:8409  AF                         xor a
     420   00:840A  CD 3F C4                   call animsp
     421   00:840D  C3 19 84            b00317 jp b00338
     422   00:8410  AF                  b00321 xor a
     423   00:8411  DD 77 04                   ld (ix+4),a
     424   00:8414  3E 04                      ld a,4
     425   00:8416  32 16 40                   ld (sndtyp),a
     426   00:8419  C9                  b00338 ret
     427   00:841A                      
     428   00:841A  (00:841A)           evnt02:	equ $
     429   00:841A  0E 00                      ld c,0
     430   00:841C  CD 6D C4                   call sktyp
     431   00:841F  D2 27 84                   jp nc,c00025
     432   00:8422  3E 02                      ld a,2
     433   00:8424  32 22 40                   ld (varg),a
     434   00:8427  CD E8 BF            c00025 call cangr
     435   00:842A  C2 42 84                   jp nz,c00072
     436   00:842D  DD 34 04                   inc (ix+4)
     437   00:8430  DD 34 04                   inc (ix+4)
     438   00:8433  AF                         xor a
     439   00:8434  21 1E 40                   ld hl,varc
     440   00:8437  BE                         cp (hl)
     441   00:8438  C2 3F 84                   jp nz,c00068
     442   00:843B  AF                         xor a
     443   00:843C  CD 3F C4                   call animsp
     444   00:843F  C3 4B 84            c00068 jp c00089
     445   00:8442  AF                  c00072 xor a
     446   00:8443  DD 77 04                   ld (ix+4),a
     447   00:8446  3E 04                      ld a,4
     448   00:8448  32 16 40                   ld (sndtyp),a
     449   00:844B  C9                  c00089 ret
     450   00:844C                      
     451   00:844C  (00:844C)           evnt03:	equ $
     452   00:844C  0E 00                      ld c,0
     453   00:844E  CD 6D C4                   call sktyp
     454   00:8451  D2 59 84                   jp nc,d00025
     455   00:8454  3E 02                      ld a,2
     456   00:8456  32 22 40                   ld (varg),a
     457   00:8459  CD DD BF            d00025 call cangl
     458   00:845C  C2 81 84                   jp nz,d00097
     459   00:845F  3E 07                      ld a,7
     460   00:8461  E6 0F                      and $0F
     461   00:8463  4F                         ld c,a
     462   00:8464  CD 31 B7                   call cspr
     463   00:8467  DD 35 04                   dec (ix+4)
     464   00:846A  3E 06                      ld a,6
     465   00:846C  E6 0F                      and $0F
     466   00:846E  4F                         ld c,a
     467   00:846F  CD 31 B7                   call cspr
     468   00:8472  AF                         xor a
     469   00:8473  21 1E 40                   ld hl,varc
     470   00:8476  BE                         cp (hl)
     471   00:8477  C2 7E 84                   jp nz,d00093
     472   00:847A  AF                         xor a
     473   00:847B  CD 3F C4                   call animsp
     474   00:847E  C3 8B 84            d00093 jp d00115
     475   00:8481  3E 04               d00097 ld a,4
     476   00:8483  32 16 40                   ld (sndtyp),a
     477   00:8486  3E F0                      ld a,240
     478   00:8488  DD 77 04                   ld (ix+4),a
     479   00:848B  C9                  d00115 ret
     480   00:848C                      
     481   00:848C  (00:848C)           evnt04:	equ $
     482   00:848C  0E 00                      ld c,0
     483   00:848E  CD 6D C4                   call sktyp
     484   00:8491  D2 99 84                   jp nc,e00025
     485   00:8494  3E 02                      ld a,2
     486   00:8496  32 22 40                   ld (varg),a
     487   00:8499  3E 14               e00025 ld a,20
     488   00:849B  21 41 40                   ld hl,scno
     489   00:849E  BE                         cp (hl)
     490   00:849F  C2 B1 84                   jp nz,e00070
     491   00:84A2  AF                         xor a
     492   00:84A3  21 1E 40                   ld hl,varc
     493   00:84A6  BE                         cp (hl)
     494   00:84A7  C2 AE 84                   jp nz,e00066
     495   00:84AA  AF                         xor a
     496   00:84AB  CD 3F C4                   call animsp
     497   00:84AE  C3 D6 84            e00066 jp e00135
     498   00:84B1  CD DD BF            e00070 call cangl
     499   00:84B4  C2 CC 84                   jp nz,e00118
     500   00:84B7  DD 35 04                   dec (ix+4)
     501   00:84BA  DD 35 04                   dec (ix+4)
     502   00:84BD  AF                         xor a
     503   00:84BE  21 1E 40                   ld hl,varc
     504   00:84C1  BE                         cp (hl)
     505   00:84C2  C2 C9 84                   jp nz,e00113
     506   00:84C5  AF                         xor a
     507   00:84C6  CD 3F C4                   call animsp
     508   00:84C9  C3 D6 84            e00113 jp e00135
     509   00:84CC  3E 04               e00118 ld a,4
     510   00:84CE  32 16 40                   ld (sndtyp),a
     511   00:84D1  3E F0                      ld a,240
     512   00:84D3  DD 77 04                   ld (ix+4),a
     513   00:84D6  C9                  e00135 ret
     514   00:84D7                      
     515   00:84D7  (00:84D7)           evnt05:	equ $
     516   00:84D7  0E 00                      ld c,0
     517   00:84D9  CD 6D C4                   call sktyp
     518   00:84DC  D2 E4 84                   jp nc,f00025
     519   00:84DF  3E 02                      ld a,2
     520   00:84E1  32 22 40                   ld (varg),a
     521   00:84E4  3E 96               f00025 ld a,150
     522   00:84E6  DD BE 03                   cp (ix+3)
     523   00:84E9  DA FE 84                   jp c,f00071
     524   00:84EC  DD 34 03                   inc (ix+3)
     525   00:84EF  AF                         xor a
     526   00:84F0  21 1E 40                   ld hl,varc
     527   00:84F3  BE                         cp (hl)
     528   00:84F4  C2 FB 84                   jp nz,f00067
     529   00:84F7  AF                         xor a
     530   00:84F8  CD 3F C4                   call animsp
     531   00:84FB  C3 22 85            f00067 jp f00139
     532   00:84FE  AF                  f00071 xor a
     533   00:84FF  DD 77 03                   ld (ix+3),a
     534   00:8502  3E A0                      ld a,160
     535   00:8504  57                         ld d,a
     536   00:8505  CD 98 C0                   call random
     537   00:8508  67                         ld h,a
     538   00:8509  CD 6C BB                   call imul
     539   00:850C  7C                         ld a,h
     540   00:850D  32 56 40                   ld (varrnd),a
     541   00:8510  3A 56 40                   ld a,(varrnd)
     542   00:8513  DD 77 04                   ld (ix+4),a
     543   00:8516  0E 3C                      ld c,60
     544   00:8518  DD 7E 04                   ld a,(ix+4)
     545   00:851B  81                         add a,c
     546   00:851C  DD 77 04                   ld (ix+4),a
     547   00:851F  C3 22 85                   jp f00139
     548   00:8522  C9                  f00139 ret
     549   00:8523                      
     550   00:8523  (00:8523)           evnt06:	equ $
     551   00:8523  0E 00                      ld c,0
     552   00:8525  CD 6D C4                   call sktyp
     553   00:8528  D2 30 85                   jp nc,g00025
     554   00:852B  3E 02                      ld a,2
     555   00:852D  32 22 40                   ld (varg),a
     556   00:8530  AF                  g00025 xor a
     557   00:8531  21 1E 40                   ld hl,varc
     558   00:8534  BE                         cp (hl)
     559   00:8535  C2 5C 85                   jp nz,g00105
     560   00:8538  AF                         xor a
     561   00:8539  CD 3F C4                   call animsp
     562   00:853C  CD E8 BF                   call cangr
     563   00:853F  C2 58 85                   jp nz,g00097
     564   00:8542  3E 07                      ld a,7
     565   00:8544  E6 0F                      and $0F
     566   00:8546  4F                         ld c,a
     567   00:8547  CD 31 B7                   call cspr
     568   00:854A  DD 34 04                   inc (ix+4)
     569   00:854D  3E 05                      ld a,5
     570   00:854F  E6 0F                      and $0F
     571   00:8551  4F                         ld c,a
     572   00:8552  CD 31 B7                   call cspr
     573   00:8555  C3 5C 85                   jp g00105
     574   00:8558  AF                  g00097 xor a
     575   00:8559  DD 77 04                   ld (ix+4),a
     576   00:855C  C9                  g00105 ret
     577   00:855D                      
     578   00:855D  (00:855D)           evnt07:	equ $
     579   00:855D  AF                         xor a
     580   00:855E  21 1E 40                   ld hl,varc
     581   00:8561  BE                         cp (hl)
     582   00:8562  C2 71 85                   jp nz,h00043
     583   00:8565  3E 03                      ld a,3
     584   00:8567  E6 0F                      and $0F
     585   00:8569  4F                         ld c,a
     586   00:856A  CD 31 B7                   call cspr
     587   00:856D  AF                         xor a
     588   00:856E  CD 3F C4                   call animsp
     589   00:8571  0E 00               h00043 ld c,0
     590   00:8573  CD 6D C4                   call sktyp
     591   00:8576  D2 94 85                   jp nc,h00104
     592   00:8579  3E 07                      ld a,7
     593   00:857B  E6 0F                      and $0F
     594   00:857D  4F                         ld c,a
     595   00:857E  CD 31 B7                   call cspr
     596   00:8581  3E 04                      ld a,4
     597   00:8583  CD 61 B9                   call explod
     598   00:8586  3A 21 40                   ld a,(varf)
     599   00:8589  3C                         inc a
     600   00:858A  32 21 40                   ld (varf),a
     601   00:858D  3E 03                      ld a,3
     602   00:858F  0E 00                      ld c,0
     603   00:8591  CD 20 C9                   call sfx_set
     604   00:8594  3E 72               h00104 ld a,114
     605   00:8596  21 21 40                   ld hl,varf
     606   00:8599  BE                         cp (hl)
     607   00:859A  C2 FE 85                   jp nz,h00314
     608   00:859D  CD D6 B6                   call cls
     609   00:85A0  3E FA                      ld a,250
     610   00:85A2  32 1D 40                   ld (varb),a
     611   00:85A5  3E 73                      ld a,115
     612   00:85A7  32 21 40                   ld (varf),a
     613   00:85AA  3E 63                      ld a,99
     614   00:85AC  32 34 40                   ld (contrl),a
     615   00:85AF  3E 63               h00152 ld a,99
     616   00:85B1  21 34 40                   ld hl,contrl
     617   00:85B4  BE                         cp (hl)
     618   00:85B5  C2 F9 85                   jp nz,h00305
     619   00:85B8  21 8B 40                   ld hl,keys+14
     620   00:85BB  7E                         ld a,(hl)
     621   00:85BC  23                         inc hl
     622   00:85BD  56                         ld d,(hl)
     623   00:85BE  CD AA C0                   call ktest
     624   00:85C1  DA C8 85                   jp c,h00204
     625   00:85C4  AF                         xor a
     626   00:85C5  32 34 40                   ld (contrl),a
     627   00:85C8  21 8D 40            h00204 ld hl,keys+16
     628   00:85CB  7E                         ld a,(hl)
     629   00:85CC  23                         inc hl
     630   00:85CD  56                         ld d,(hl)
     631   00:85CE  CD AA C0                   call ktest
     632   00:85D1  DA D9 85                   jp c,h00239
     633   00:85D4  3E 01                      ld a,1
     634   00:85D6  32 34 40                   ld (contrl),a
     635   00:85D9  21 8F 40            h00239 ld hl,keys+18
     636   00:85DC  7E                         ld a,(hl)
     637   00:85DD  23                         inc hl
     638   00:85DE  56                         ld d,(hl)
     639   00:85DF  CD AA C0                   call ktest
     640   00:85E2  DA EA 85                   jp c,h00275
     641   00:85E5  3E 02                      ld a,2
     642   00:85E7  32 34 40                   ld (contrl),a
     643   00:85EA  21 91 40            h00275 ld hl,keys+20
     644   00:85ED  7E                         ld a,(hl)
     645   00:85EE  23                         inc hl
     646   00:85EF  56                         ld d,(hl)
     647   00:85F0  CD AA C0                   call ktest
     648   00:85F3  DA F6 85                   jp c,h00301
     649   00:85F6  C3 AF 85            h00301 jp h00152
     650   00:85F9  3E 01               h00305 ld a,1
     651   00:85FB  32 22 40                   ld (varg),a
     652   00:85FE  3E 70               h00314 ld a,112
     653   00:8600  21 21 40                   ld hl,varf
     654   00:8603  BE                         cp (hl)
     655   00:8604  C2 1A 86                   jp nz,h00362
     656   00:8607  DD 36 00 FF                ld (ix+0),255
     657   00:860B  3E 71                      ld a,113
     658   00:860D  32 21 40                   ld (varf),a
     659   00:8610  3E 01                      ld a,1
     660   00:8612  32 22 40                   ld (varg),a
     661   00:8615  3E 14                      ld a,20
     662   00:8617  32 23 40                   ld (varh),a
     663   00:861A  3E 6F               h00362 ld a,111
     664   00:861C  21 21 40                   ld hl,varf
     665   00:861F  BE                         cp (hl)
     666   00:8620  C2 28 86                   jp nz,h00388
     667   00:8623  3E 88                      ld a,136
     668   00:8625  DD 77 03                   ld (ix+3),a
     669   00:8628  3E 6E               h00388 ld a,110
     670   00:862A  21 21 40                   ld hl,varf
     671   00:862D  BE                         cp (hl)
     672   00:862E  C2 36 86                   jp nz,h00413
     673   00:8631  3E 36                      ld a,54
     674   00:8633  DD 77 03                   ld (ix+3),a
     675   00:8636  3E 6D               h00413 ld a,109
     676   00:8638  21 21 40                   ld hl,varf
     677   00:863B  BE                         cp (hl)
     678   00:863C  C2 44 86                   jp nz,h00439
     679   00:863F  3E 10                      ld a,16
     680   00:8641  DD 77 03                   ld (ix+3),a
     681   00:8644  3E 6C               h00439 ld a,108
     682   00:8646  21 21 40                   ld hl,varf
     683   00:8649  BE                         cp (hl)
     684   00:864A  C2 57 86                   jp nz,h00473
     685   00:864D  3E 3C                      ld a,60
     686   00:864F  DD 77 04                   ld (ix+4),a
     687   00:8652  3E 36                      ld a,54
     688   00:8654  DD 77 03                   ld (ix+3),a
     689   00:8657  3E 6A               h00473 ld a,106
     690   00:8659  21 21 40                   ld hl,varf
     691   00:865C  BE                         cp (hl)
     692   00:865D  C2 73 86                   jp nz,h00521
     693   00:8660  DD 36 00 FF                ld (ix+0),255
     694   00:8664  3E 6B                      ld a,107
     695   00:8666  32 21 40                   ld (varf),a
     696   00:8669  3E 01                      ld a,1
     697   00:866B  32 22 40                   ld (varg),a
     698   00:866E  3E 13                      ld a,19
     699   00:8670  32 23 40                   ld (varh),a
     700   00:8673  3E 69               h00521 ld a,105
     701   00:8675  21 21 40                   ld hl,varf
     702   00:8678  BE                         cp (hl)
     703   00:8679  C2 86 86                   jp nz,h00556
     704   00:867C  3E DC                      ld a,220
     705   00:867E  DD 77 04                   ld (ix+4),a
     706   00:8681  3E 10                      ld a,16
     707   00:8683  DD 77 03                   ld (ix+3),a
     708   00:8686  3E 68               h00556 ld a,104
     709   00:8688  21 21 40                   ld hl,varf
     710   00:868B  BE                         cp (hl)
     711   00:868C  C2 99 86                   jp nz,h00590
     712   00:868F  3E 3C                      ld a,60
     713   00:8691  DD 77 04                   ld (ix+4),a
     714   00:8694  3E 86                      ld a,134
     715   00:8696  DD 77 03                   ld (ix+3),a
     716   00:8699  3E 67               h00590 ld a,103
     717   00:869B  21 21 40                   ld hl,varf
     718   00:869E  BE                         cp (hl)
     719   00:869F  C2 AC 86                   jp nz,h00625
     720   00:86A2  3E DC                      ld a,220
     721   00:86A4  DD 77 04                   ld (ix+4),a
     722   00:86A7  3E 36                      ld a,54
     723   00:86A9  DD 77 03                   ld (ix+3),a
     724   00:86AC  3E 66               h00625 ld a,102
     725   00:86AE  21 21 40                   ld hl,varf
     726   00:86B1  BE                         cp (hl)
     727   00:86B2  C2 BF 86                   jp nz,h00659
     728   00:86B5  3E B4                      ld a,180
     729   00:86B7  DD 77 04                   ld (ix+4),a
     730   00:86BA  3E 5C                      ld a,92
     731   00:86BC  DD 77 03                   ld (ix+3),a
     732   00:86BF  3E 65               h00659 ld a,101
     733   00:86C1  21 21 40                   ld hl,varf
     734   00:86C4  BE                         cp (hl)
     735   00:86C5  C2 D2 86                   jp nz,h00694
     736   00:86C8  3E DC                      ld a,220
     737   00:86CA  DD 77 04                   ld (ix+4),a
     738   00:86CD  3E 10                      ld a,16
     739   00:86CF  DD 77 03                   ld (ix+3),a
     740   00:86D2  3E 63               h00694 ld a,99
     741   00:86D4  21 21 40                   ld hl,varf
     742   00:86D7  BE                         cp (hl)
     743   00:86D8  C2 EE 86                   jp nz,h00742
     744   00:86DB  DD 36 00 FF                ld (ix+0),255
     745   00:86DF  3E 64                      ld a,100
     746   00:86E1  32 21 40                   ld (varf),a
     747   00:86E4  3E 01                      ld a,1
     748   00:86E6  32 22 40                   ld (varg),a
     749   00:86E9  3E 12                      ld a,18
     750   00:86EB  32 23 40                   ld (varh),a
     751   00:86EE  3E 62               h00742 ld a,98
     752   00:86F0  21 21 40                   ld hl,varf
     753   00:86F3  BE                         cp (hl)
     754   00:86F4  C2 FC 86                   jp nz,h00767
     755   00:86F7  3E 36                      ld a,54
     756   00:86F9  DD 77 03                   ld (ix+3),a
     757   00:86FC  3E 61               h00767 ld a,97
     758   00:86FE  21 21 40                   ld hl,varf
     759   00:8701  BE                         cp (hl)
     760   00:8702  C2 0A 87                   jp nz,h00793
     761   00:8705  3E 14                      ld a,20
     762   00:8707  DD 77 04                   ld (ix+4),a
     763   00:870A  3E 60               h00793 ld a,96
     764   00:870C  21 21 40                   ld hl,varf
     765   00:870F  BE                         cp (hl)
     766   00:8710  C2 18 87                   jp nz,h00818
     767   00:8713  3E 86                      ld a,134
     768   00:8715  DD 77 03                   ld (ix+3),a
     769   00:8718  3E 5F               h00818 ld a,95
     770   00:871A  21 21 40                   ld hl,varf
     771   00:871D  BE                         cp (hl)
     772   00:871E  C2 26 87                   jp nz,h00844
     773   00:8721  3E 10                      ld a,16
     774   00:8723  DD 77 03                   ld (ix+3),a
     775   00:8726  3E 5D               h00844 ld a,93
     776   00:8728  21 21 40                   ld hl,varf
     777   00:872B  BE                         cp (hl)
     778   00:872C  C2 42 87                   jp nz,h00891
     779   00:872F  DD 36 00 FF                ld (ix+0),255
     780   00:8733  3E 5E                      ld a,94
     781   00:8735  32 21 40                   ld (varf),a
     782   00:8738  3E 01                      ld a,1
     783   00:873A  32 22 40                   ld (varg),a
     784   00:873D  3E 11                      ld a,17
     785   00:873F  32 23 40                   ld (varh),a
     786   00:8742  3E 5C               h00891 ld a,92
     787   00:8744  21 21 40                   ld hl,varf
     788   00:8747  BE                         cp (hl)
     789   00:8748  C2 55 87                   jp nz,h00925
     790   00:874B  3E 14                      ld a,20
     791   00:874D  DD 77 04                   ld (ix+4),a
     792   00:8750  3E 10                      ld a,16
     793   00:8752  DD 77 03                   ld (ix+3),a
     794   00:8755  3E 5B               h00925 ld a,91
     795   00:8757  21 21 40                   ld hl,varf
     796   00:875A  BE                         cp (hl)
     797   00:875B  C2 68 87                   jp nz,h00960
     798   00:875E  3E B4                      ld a,180
     799   00:8760  DD 77 04                   ld (ix+4),a
     800   00:8763  3E 86                      ld a,134
     801   00:8765  DD 77 03                   ld (ix+3),a
     802   00:8768  3E 5A               h00960 ld a,90
     803   00:876A  21 21 40                   ld hl,varf
     804   00:876D  BE                         cp (hl)
     805   00:876E  C2 7B 87                   jp nz,h00994
     806   00:8771  3E DC                      ld a,220
     807   00:8773  DD 77 04                   ld (ix+4),a
     808   00:8776  3E 10                      ld a,16
     809   00:8778  DD 77 03                   ld (ix+3),a
     810   00:877B  3E 59               h00994 ld a,89
     811   00:877D  21 21 40                   ld hl,varf
     812   00:8780  BE                         cp (hl)
     813   00:8781  C2 89 87                   jp nz,h01020
     814   00:8784  3E B4                      ld a,180
     815   00:8786  DD 77 04                   ld (ix+4),a
     816   00:8789  3E 57               h01020 ld a,87
     817   00:878B  21 21 40                   ld hl,varf
     818   00:878E  BE                         cp (hl)
     819   00:878F  C2 A5 87                   jp nz,h01067
     820   00:8792  DD 36 00 FF                ld (ix+0),255
     821   00:8796  3E 58                      ld a,88
     822   00:8798  32 21 40                   ld (varf),a
     823   00:879B  3E 01                      ld a,1
     824   00:879D  32 22 40                   ld (varg),a
     825   00:87A0  3E 10                      ld a,16
     826   00:87A2  32 23 40                   ld (varh),a
     827   00:87A5  3E 56               h01067 ld a,86
     828   00:87A7  21 21 40                   ld hl,varf
     829   00:87AA  BE                         cp (hl)
     830   00:87AB  C2 B8 87                   jp nz,h01101
     831   00:87AE  3E 14                      ld a,20
     832   00:87B0  DD 77 04                   ld (ix+4),a
     833   00:87B3  3E 5C                      ld a,92
     834   00:87B5  DD 77 03                   ld (ix+3),a
     835   00:87B8  3E 55               h01101 ld a,85
     836   00:87BA  21 21 40                   ld hl,varf
     837   00:87BD  BE                         cp (hl)
     838   00:87BE  C2 CB 87                   jp nz,h01136
     839   00:87C1  3E 64                      ld a,100
     840   00:87C3  DD 77 04                   ld (ix+4),a
     841   00:87C6  3E 88                      ld a,136
     842   00:87C8  DD 77 03                   ld (ix+3),a
     843   00:87CB  3E 54               h01136 ld a,84
     844   00:87CD  21 21 40                   ld hl,varf
     845   00:87D0  BE                         cp (hl)
     846   00:87D1  C2 DE 87                   jp nz,h01170
     847   00:87D4  3E DC                      ld a,220
     848   00:87D6  DD 77 04                   ld (ix+4),a
     849   00:87D9  3E 10                      ld a,16
     850   00:87DB  DD 77 03                   ld (ix+3),a
     851   00:87DE  3E 53               h01170 ld a,83
     852   00:87E0  21 21 40                   ld hl,varf
     853   00:87E3  BE                         cp (hl)
     854   00:87E4  C2 F1 87                   jp nz,h01204
     855   00:87E7  3E 14                      ld a,20
     856   00:87E9  DD 77 04                   ld (ix+4),a
     857   00:87EC  3E 5C                      ld a,92
     858   00:87EE  DD 77 03                   ld (ix+3),a
     859   00:87F1  3E 52               h01204 ld a,82
     860   00:87F3  21 21 40                   ld hl,varf
     861   00:87F6  BE                         cp (hl)
     862   00:87F7  C2 FF 87                   jp nz,h01230
     863   00:87FA  3E 10                      ld a,16
     864   00:87FC  DD 77 03                   ld (ix+3),a
     865   00:87FF  3E 50               h01230 ld a,80
     866   00:8801  21 21 40                   ld hl,varf
     867   00:8804  BE                         cp (hl)
     868   00:8805  C2 1B 88                   jp nz,h01277
     869   00:8808  DD 36 00 FF                ld (ix+0),255
     870   00:880C  3E 51                      ld a,81
     871   00:880E  32 21 40                   ld (varf),a
     872   00:8811  3E 01                      ld a,1
     873   00:8813  32 22 40                   ld (varg),a
     874   00:8816  3E 0F                      ld a,15
     875   00:8818  32 23 40                   ld (varh),a
     876   00:881B  3E 4F               h01277 ld a,79
     877   00:881D  21 21 40                   ld hl,varf
     878   00:8820  BE                         cp (hl)
     879   00:8821  C2 2E 88                   jp nz,h01312
     880   00:8824  3E B4                      ld a,180
     881   00:8826  DD 77 04                   ld (ix+4),a
     882   00:8829  3E 86                      ld a,134
     883   00:882B  DD 77 03                   ld (ix+3),a
     884   00:882E  3E 4E               h01312 ld a,78
     885   00:8830  21 21 40                   ld hl,varf
     886   00:8833  BE                         cp (hl)
     887   00:8834  C2 41 88                   jp nz,h01346
     888   00:8837  3E DC                      ld a,220
     889   00:8839  DD 77 04                   ld (ix+4),a
     890   00:883C  3E 10                      ld a,16
     891   00:883E  DD 77 03                   ld (ix+3),a
     892   00:8841  3E 4D               h01346 ld a,77
     893   00:8843  21 21 40                   ld hl,varf
     894   00:8846  BE                         cp (hl)
     895   00:8847  C2 54 88                   jp nz,h01380
     896   00:884A  3E 14                      ld a,20
     897   00:884C  DD 77 04                   ld (ix+4),a
     898   00:884F  3E 86                      ld a,134
     899   00:8851  DD 77 03                   ld (ix+3),a
     900   00:8854  3E 4C               h01380 ld a,76
     901   00:8856  21 21 40                   ld hl,varf
     902   00:8859  BE                         cp (hl)
     903   00:885A  C2 62 88                   jp nz,h01406
     904   00:885D  3E DC                      ld a,220
     905   00:885F  DD 77 04                   ld (ix+4),a
     906   00:8862  3E 4B               h01406 ld a,75
     907   00:8864  21 21 40                   ld hl,varf
     908   00:8867  BE                         cp (hl)
     909   00:8868  C2 75 88                   jp nz,h01440
     910   00:886B  3E 14                      ld a,20
     911   00:886D  DD 77 04                   ld (ix+4),a
     912   00:8870  3E 36                      ld a,54
     913   00:8872  DD 77 03                   ld (ix+3),a
     914   00:8875  3E 49               h01440 ld a,73
     915   00:8877  21 21 40                   ld hl,varf
     916   00:887A  BE                         cp (hl)
     917   00:887B  C2 91 88                   jp nz,h01487
     918   00:887E  DD 36 00 FF                ld (ix+0),255
     919   00:8882  3E 4A                      ld a,74
     920   00:8884  32 21 40                   ld (varf),a
     921   00:8887  3E 01                      ld a,1
     922   00:8889  32 22 40                   ld (varg),a
     923   00:888C  3E 0E                      ld a,14
     924   00:888E  32 23 40                   ld (varh),a
     925   00:8891  3E 48               h01487 ld a,72
     926   00:8893  21 21 40                   ld hl,varf
     927   00:8896  BE                         cp (hl)
     928   00:8897  C2 9F 88                   jp nz,h01513
     929   00:889A  3E 10                      ld a,16
     930   00:889C  DD 77 03                   ld (ix+3),a
     931   00:889F  3E 47               h01513 ld a,71
     932   00:88A1  21 21 40                   ld hl,varf
     933   00:88A4  BE                         cp (hl)
     934   00:88A5  C2 B2 88                   jp nz,h01547
     935   00:88A8  3E 14                      ld a,20
     936   00:88AA  DD 77 04                   ld (ix+4),a
     937   00:88AD  3E 88                      ld a,136
     938   00:88AF  DD 77 03                   ld (ix+3),a
     939   00:88B2  3E 46               h01547 ld a,70
     940   00:88B4  21 21 40                   ld hl,varf
     941   00:88B7  BE                         cp (hl)
     942   00:88B8  C2 C0 88                   jp nz,h01573
     943   00:88BB  3E 36                      ld a,54
     944   00:88BD  DD 77 03                   ld (ix+3),a
     945   00:88C0  3E 45               h01573 ld a,69
     946   00:88C2  21 21 40                   ld hl,varf
     947   00:88C5  BE                         cp (hl)
     948   00:88C6  C2 D3 88                   jp nz,h01607
     949   00:88C9  3E B4                      ld a,180
     950   00:88CB  DD 77 04                   ld (ix+4),a
     951   00:88CE  3E 5C                      ld a,92
     952   00:88D0  DD 77 03                   ld (ix+3),a
     953   00:88D3  3E 43               h01607 ld a,67
     954   00:88D5  21 21 40                   ld hl,varf
     955   00:88D8  BE                         cp (hl)
     956   00:88D9  C2 EF 88                   jp nz,h01654
     957   00:88DC  DD 36 00 FF                ld (ix+0),255
     958   00:88E0  3E 44                      ld a,68
     959   00:88E2  32 21 40                   ld (varf),a
     960   00:88E5  3E 01                      ld a,1
     961   00:88E7  32 22 40                   ld (varg),a
     962   00:88EA  3E 0D                      ld a,13
     963   00:88EC  32 23 40                   ld (varh),a
     964   00:88EF  3E 42               h01654 ld a,66
     965   00:88F1  21 21 40                   ld hl,varf
     966   00:88F4  BE                         cp (hl)
     967   00:88F5  C2 02 89                   jp nz,h01688
     968   00:88F8  3E 14                      ld a,20
     969   00:88FA  DD 77 04                   ld (ix+4),a
     970   00:88FD  3E 10                      ld a,16
     971   00:88FF  DD 77 03                   ld (ix+3),a
     972   00:8902  3E 41               h01688 ld a,65
     973   00:8904  21 21 40                   ld hl,varf
     974   00:8907  BE                         cp (hl)
     975   00:8908  C2 15 89                   jp nz,h01723
     976   00:890B  3E 8C                      ld a,140
     977   00:890D  DD 77 04                   ld (ix+4),a
     978   00:8910  3E 36                      ld a,54
     979   00:8912  DD 77 03                   ld (ix+3),a
     980   00:8915  3E 40               h01723 ld a,64
     981   00:8917  21 21 40                   ld hl,varf
     982   00:891A  BE                         cp (hl)
     983   00:891B  C2 28 89                   jp nz,h01757
     984   00:891E  3E 3C                      ld a,60
     985   00:8920  DD 77 04                   ld (ix+4),a
     986   00:8923  3E 88                      ld a,136
     987   00:8925  DD 77 03                   ld (ix+3),a
     988   00:8928  3E 3F               h01757 ld a,63
     989   00:892A  21 21 40                   ld hl,varf
     990   00:892D  BE                         cp (hl)
     991   00:892E  C2 3B 89                   jp nz,h01791
     992   00:8931  3E 14                      ld a,20
     993   00:8933  DD 77 04                   ld (ix+4),a
     994   00:8936  3E 36                      ld a,54
     995   00:8938  DD 77 03                   ld (ix+3),a
     996   00:893B  3E 3D               h01791 ld a,61
     997   00:893D  21 21 40                   ld hl,varf
     998   00:8940  BE                         cp (hl)
     999   00:8941  C2 57 89                   jp nz,h01838
    1000   00:8944  DD 36 00 FF                ld (ix+0),255
    1001   00:8948  3E 3E                      ld a,62
    1002   00:894A  32 21 40                   ld (varf),a
    1003   00:894D  3E 01                      ld a,1
    1004   00:894F  32 22 40                   ld (varg),a
    1005   00:8952  3E 0C                      ld a,12
    1006   00:8954  32 23 40                   ld (varh),a
    1007   00:8957  3E 3C               h01838 ld a,60
    1008   00:8959  21 21 40                   ld hl,varf
    1009   00:895C  BE                         cp (hl)
    1010   00:895D  C2 6A 89                   jp nz,h01872
    1011   00:8960  3E 14                      ld a,20
    1012   00:8962  DD 77 04                   ld (ix+4),a
    1013   00:8965  3E 10                      ld a,16
    1014   00:8967  DD 77 03                   ld (ix+3),a
    1015   00:896A  3E 3B               h01872 ld a,59
    1016   00:896C  21 21 40                   ld hl,varf
    1017   00:896F  BE                         cp (hl)
    1018   00:8970  C2 7D 89                   jp nz,h01907
    1019   00:8973  3E 3C                      ld a,60
    1020   00:8975  DD 77 04                   ld (ix+4),a
    1021   00:8978  3E 88                      ld a,136
    1022   00:897A  DD 77 03                   ld (ix+3),a
    1023   00:897D  3E 3A               h01907 ld a,58
    1024   00:897F  21 21 40                   ld hl,varf
    1025   00:8982  BE                         cp (hl)
    1026   00:8983  C2 8B 89                   jp nz,h01932
    1027   00:8986  3E 10                      ld a,16
    1028   00:8988  DD 77 03                   ld (ix+3),a
    1029   00:898B  3E 39               h01932 ld a,57
    1030   00:898D  21 21 40                   ld hl,varf
    1031   00:8990  BE                         cp (hl)
    1032   00:8991  C2 9E 89                   jp nz,h01966
    1033   00:8994  3E 3C                      ld a,60
    1034   00:8996  DD 77 04                   ld (ix+4),a
    1035   00:8999  3E 5C                      ld a,92
    1036   00:899B  DD 77 03                   ld (ix+3),a
    1037   00:899E  3E 38               h01966 ld a,56
    1038   00:89A0  21 21 40                   ld hl,varf
    1039   00:89A3  BE                         cp (hl)
    1040   00:89A4  C2 AC 89                   jp nz,h01992
    1041   00:89A7  3E 10                      ld a,16
    1042   00:89A9  DD 77 03                   ld (ix+3),a
    1043   00:89AC  3E 36               h01992 ld a,54
    1044   00:89AE  21 21 40                   ld hl,varf
    1045   00:89B1  BE                         cp (hl)
    1046   00:89B2  C2 C8 89                   jp nz,h02039
    1047   00:89B5  DD 36 00 FF                ld (ix+0),255
    1048   00:89B9  3E 01                      ld a,1
    1049   00:89BB  32 22 40                   ld (varg),a
    1050   00:89BE  3E 37                      ld a,55
    1051   00:89C0  32 21 40                   ld (varf),a
    1052   00:89C3  3E 0B                      ld a,11
    1053   00:89C5  32 23 40                   ld (varh),a
    1054   00:89C8  3E 35               h02039 ld a,53
    1055   00:89CA  21 21 40                   ld hl,varf
    1056   00:89CD  BE                         cp (hl)
    1057   00:89CE  C2 DB 89                   jp nz,h02073
    1058   00:89D1  3E 14                      ld a,20
    1059   00:89D3  DD 77 04                   ld (ix+4),a
    1060   00:89D6  3E 10                      ld a,16
    1061   00:89D8  DD 77 03                   ld (ix+3),a
    1062   00:89DB  3E 34               h02073 ld a,52
    1063   00:89DD  21 21 40                   ld hl,varf
    1064   00:89E0  BE                         cp (hl)
    1065   00:89E1  C2 EE 89                   jp nz,h02108
    1066   00:89E4  3E 64                      ld a,100
    1067   00:89E6  DD 77 04                   ld (ix+4),a
    1068   00:89E9  3E 88                      ld a,136
    1069   00:89EB  DD 77 03                   ld (ix+3),a
    1070   00:89EE  3E 33               h02108 ld a,51
    1071   00:89F0  21 21 40                   ld hl,varf
    1072   00:89F3  BE                         cp (hl)
    1073   00:89F4  C2 FC 89                   jp nz,h02133
    1074   00:89F7  3E 10                      ld a,16
    1075   00:89F9  DD 77 03                   ld (ix+3),a
    1076   00:89FC  3E 32               h02133 ld a,50
    1077   00:89FE  21 21 40                   ld hl,varf
    1078   00:8A01  BE                         cp (hl)
    1079   00:8A02  C2 0F 8A                   jp nz,h02167
    1080   00:8A05  3E 3C                      ld a,60
    1081   00:8A07  DD 77 04                   ld (ix+4),a
    1082   00:8A0A  3E 5C                      ld a,92
    1083   00:8A0C  DD 77 03                   ld (ix+3),a
    1084   00:8A0F  3E 31               h02167 ld a,49
    1085   00:8A11  21 21 40                   ld hl,varf
    1086   00:8A14  BE                         cp (hl)
    1087   00:8A15  C2 22 8A                   jp nz,h02201
    1088   00:8A18  3E DC                      ld a,220
    1089   00:8A1A  DD 77 04                   ld (ix+4),a
    1090   00:8A1D  3E 10                      ld a,16
    1091   00:8A1F  DD 77 03                   ld (ix+3),a
    1092   00:8A22  C9                  h02201 ret
    1093   00:8A23                      
    1094   00:8A23  (00:8A23)           evnt08:	equ $
    1095   00:8A23  AF                         xor a
    1096   00:8A24  21 1E 40                   ld hl,varc
    1097   00:8A27  BE                         cp (hl)
    1098   00:8A28  C2 2F 8A                   jp nz,i00028
    1099   00:8A2B  AF                         xor a
    1100   00:8A2C  CD 3F C4                   call animsp
    1101   00:8A2F  3E 03               i00028 ld a,3
    1102   00:8A31  E6 0F                      and $0F
    1103   00:8A33  4F                         ld c,a
    1104   00:8A34  CD 31 B7                   call cspr
    1105   00:8A37  0E 00                      ld c,0
    1106   00:8A39  CD 6D C4                   call sktyp
    1107   00:8A3C  D2 5A 8A                   jp nc,i00104
    1108   00:8A3F  3E 07                      ld a,7
    1109   00:8A41  E6 0F                      and $0F
    1110   00:8A43  4F                         ld c,a
    1111   00:8A44  CD 31 B7                   call cspr
    1112   00:8A47  3E 04                      ld a,4
    1113   00:8A49  CD 61 B9                   call explod
    1114   00:8A4C  3E 03                      ld a,3
    1115   00:8A4E  0E 00                      ld c,0
    1116   00:8A50  CD 20 C9                   call sfx_set
    1117   00:8A53  3A 21 40                   ld a,(varf)
    1118   00:8A56  3C                         inc a
    1119   00:8A57  32 21 40                   ld (varf),a
    1120   00:8A5A  3E 30               i00104 ld a,48
    1121   00:8A5C  21 21 40                   ld hl,varf
    1122   00:8A5F  BE                         cp (hl)
    1123   00:8A60  C2 76 8A                   jp nz,i00151
    1124   00:8A63  DD 36 00 FF                ld (ix+0),255
    1125   00:8A67  3E 31                      ld a,49
    1126   00:8A69  32 21 40                   ld (varf),a
    1127   00:8A6C  3E 01                      ld a,1
    1128   00:8A6E  32 22 40                   ld (varg),a
    1129   00:8A71  3E 0A                      ld a,10
    1130   00:8A73  32 23 40                   ld (varh),a
    1131   00:8A76  3E 2F               i00151 ld a,47
    1132   00:8A78  21 21 40                   ld hl,varf
    1133   00:8A7B  BE                         cp (hl)
    1134   00:8A7C  C2 89 8A                   jp nz,i00186
    1135   00:8A7F  3E DC                      ld a,220
    1136   00:8A81  DD 77 04                   ld (ix+4),a
    1137   00:8A84  3E 5C                      ld a,92
    1138   00:8A86  DD 77 03                   ld (ix+3),a
    1139   00:8A89  3E 2E               i00186 ld a,46
    1140   00:8A8B  21 21 40                   ld hl,varf
    1141   00:8A8E  BE                         cp (hl)
    1142   00:8A8F  C2 9C 8A                   jp nz,i00220
    1143   00:8A92  3E 3C                      ld a,60
    1144   00:8A94  DD 77 04                   ld (ix+4),a
    1145   00:8A97  3E 10                      ld a,16
    1146   00:8A99  DD 77 03                   ld (ix+3),a
    1147   00:8A9C  3E 2D               i00220 ld a,45
    1148   00:8A9E  21 21 40                   ld hl,varf
    1149   00:8AA1  BE                         cp (hl)
    1150   00:8AA2  C2 AF 8A                   jp nz,i00254
    1151   00:8AA5  3E DC                      ld a,220
    1152   00:8AA7  DD 77 04                   ld (ix+4),a
    1153   00:8AAA  3E 36                      ld a,54
    1154   00:8AAC  DD 77 03                   ld (ix+3),a
    1155   00:8AAF  3E 2C               i00254 ld a,44
    1156   00:8AB1  21 21 40                   ld hl,varf
    1157   00:8AB4  BE                         cp (hl)
    1158   00:8AB5  C2 C2 8A                   jp nz,i00288
    1159   00:8AB8  3E 14                      ld a,20
    1160   00:8ABA  DD 77 04                   ld (ix+4),a
    1161   00:8ABD  3E 10                      ld a,16
    1162   00:8ABF  DD 77 03                   ld (ix+3),a
    1163   00:8AC2  3E 2A               i00288 ld a,42
    1164   00:8AC4  21 21 40                   ld hl,varf
    1165   00:8AC7  BE                         cp (hl)
    1166   00:8AC8  C2 DE 8A                   jp nz,i00335
    1167   00:8ACB  DD 36 00 FF                ld (ix+0),255
    1168   00:8ACF  3E 2B                      ld a,43
    1169   00:8AD1  32 21 40                   ld (varf),a
    1170   00:8AD4  3E 01                      ld a,1
    1171   00:8AD6  32 22 40                   ld (varg),a
    1172   00:8AD9  3E 09                      ld a,9
    1173   00:8ADB  32 23 40                   ld (varh),a
    1174   00:8ADE  3E 29               i00335 ld a,41
    1175   00:8AE0  21 21 40                   ld hl,varf
    1176   00:8AE3  BE                         cp (hl)
    1177   00:8AE4  C2 F1 8A                   jp nz,i00369
    1178   00:8AE7  3E DC                      ld a,220
    1179   00:8AE9  DD 77 04                   ld (ix+4),a
    1180   00:8AEC  3E 5C                      ld a,92
    1181   00:8AEE  DD 77 03                   ld (ix+3),a
    1182   00:8AF1  3E 28               i00369 ld a,40
    1183   00:8AF3  21 21 40                   ld hl,varf
    1184   00:8AF6  BE                         cp (hl)
    1185   00:8AF7  C2 04 8B                   jp nz,i00404
    1186   00:8AFA  3E 64                      ld a,100
    1187   00:8AFC  DD 77 04                   ld (ix+4),a
    1188   00:8AFF  3E 88                      ld a,136
    1189   00:8B01  DD 77 03                   ld (ix+3),a
    1190   00:8B04  3E 27               i00404 ld a,39
    1191   00:8B06  21 21 40                   ld hl,varf
    1192   00:8B09  BE                         cp (hl)
    1193   00:8B0A  C2 17 8B                   jp nz,i00438
    1194   00:8B0D  3E 8C                      ld a,140
    1195   00:8B0F  DD 77 04                   ld (ix+4),a
    1196   00:8B12  3E 10                      ld a,16
    1197   00:8B14  DD 77 03                   ld (ix+3),a
    1198   00:8B17  3E 26               i00438 ld a,38
    1199   00:8B19  21 21 40                   ld hl,varf
    1200   00:8B1C  BE                         cp (hl)
    1201   00:8B1D  C2 25 8B                   jp nz,i00464
    1202   00:8B20  3E 14                      ld a,20
    1203   00:8B22  DD 77 04                   ld (ix+4),a
    1204   00:8B25  3E 24               i00464 ld a,36
    1205   00:8B27  21 21 40                   ld hl,varf
    1206   00:8B2A  BE                         cp (hl)
    1207   00:8B2B  C2 41 8B                   jp nz,i00511
    1208   00:8B2E  DD 36 00 FF                ld (ix+0),255
    1209   00:8B32  3E 25                      ld a,37
    1210   00:8B34  32 21 40                   ld (varf),a
    1211   00:8B37  3E 01                      ld a,1
    1212   00:8B39  32 22 40                   ld (varg),a
    1213   00:8B3C  3E 08                      ld a,8
    1214   00:8B3E  32 23 40                   ld (varh),a
    1215   00:8B41  3E 23               i00511 ld a,35
    1216   00:8B43  21 21 40                   ld hl,varf
    1217   00:8B46  BE                         cp (hl)
    1218   00:8B47  C2 54 8B                   jp nz,i00545
    1219   00:8B4A  3E DC                      ld a,220
    1220   00:8B4C  DD 77 04                   ld (ix+4),a
    1221   00:8B4F  3E 10                      ld a,16
    1222   00:8B51  DD 77 03                   ld (ix+3),a
    1223   00:8B54  3E 22               i00545 ld a,34
    1224   00:8B56  21 21 40                   ld hl,varf
    1225   00:8B59  BE                         cp (hl)
    1226   00:8B5A  C2 62 8B                   jp nz,i00571
    1227   00:8B5D  3E 3C                      ld a,60
    1228   00:8B5F  DD 77 04                   ld (ix+4),a
    1229   00:8B62  3E 21               i00571 ld a,33
    1230   00:8B64  21 21 40                   ld hl,varf
    1231   00:8B67  BE                         cp (hl)
    1232   00:8B68  C2 75 8B                   jp nz,i00605
    1233   00:8B6B  3E 8C                      ld a,140
    1234   00:8B6D  DD 77 04                   ld (ix+4),a
    1235   00:8B70  3E 88                      ld a,136
    1236   00:8B72  DD 77 03                   ld (ix+3),a
    1237   00:8B75  3E 20               i00605 ld a,32
    1238   00:8B77  21 21 40                   ld hl,varf
    1239   00:8B7A  BE                         cp (hl)
    1240   00:8B7B  C2 88 8B                   jp nz,i00639
    1241   00:8B7E  3E 64                      ld a,100
    1242   00:8B80  DD 77 04                   ld (ix+4),a
    1243   00:8B83  3E 5C                      ld a,92
    1244   00:8B85  DD 77 03                   ld (ix+3),a
    1245   00:8B88  3E 1E               i00639 ld a,30
    1246   00:8B8A  21 21 40                   ld hl,varf
    1247   00:8B8D  BE                         cp (hl)
    1248   00:8B8E  C2 A4 8B                   jp nz,i00687
    1249   00:8B91  DD 36 00 FF                ld (ix+0),255
    1250   00:8B95  3E 1F                      ld a,31
    1251   00:8B97  32 21 40                   ld (varf),a
    1252   00:8B9A  3E 01                      ld a,1
    1253   00:8B9C  32 22 40                   ld (varg),a
    1254   00:8B9F  3E 07                      ld a,7
    1255   00:8BA1  32 23 40                   ld (varh),a
    1256   00:8BA4  3E 1D               i00687 ld a,29
    1257   00:8BA6  21 21 40                   ld hl,varf
    1258   00:8BA9  BE                         cp (hl)
    1259   00:8BAA  C2 B7 8B                   jp nz,i00721
    1260   00:8BAD  3E DC                      ld a,220
    1261   00:8BAF  DD 77 04                   ld (ix+4),a
    1262   00:8BB2  3E 10                      ld a,16
    1263   00:8BB4  DD 77 03                   ld (ix+3),a
    1264   00:8BB7  3E 1C               i00721 ld a,28
    1265   00:8BB9  21 21 40                   ld hl,varf
    1266   00:8BBC  BE                         cp (hl)
    1267   00:8BBD  C2 CA 8B                   jp nz,i00755
    1268   00:8BC0  3E 3C                      ld a,60
    1269   00:8BC2  DD 77 04                   ld (ix+4),a
    1270   00:8BC5  3E 36                      ld a,54
    1271   00:8BC7  DD 77 03                   ld (ix+3),a
    1272   00:8BCA  3E 1B               i00755 ld a,27
    1273   00:8BCC  21 21 40                   ld hl,varf
    1274   00:8BCF  BE                         cp (hl)
    1275   00:8BD0  C2 DD 8B                   jp nz,i00789
    1276   00:8BD3  3E DC                      ld a,220
    1277   00:8BD5  DD 77 04                   ld (ix+4),a
    1278   00:8BD8  3E 88                      ld a,136
    1279   00:8BDA  DD 77 03                   ld (ix+3),a
    1280   00:8BDD  3E 1A               i00789 ld a,26
    1281   00:8BDF  21 21 40                   ld hl,varf
    1282   00:8BE2  BE                         cp (hl)
    1283   00:8BE3  C2 F0 8B                   jp nz,i00823
    1284   00:8BE6  3E 14                      ld a,20
    1285   00:8BE8  DD 77 04                   ld (ix+4),a
    1286   00:8BEB  3E 10                      ld a,16
    1287   00:8BED  DD 77 03                   ld (ix+3),a
    1288   00:8BF0  3E 18               i00823 ld a,24
    1289   00:8BF2  21 21 40                   ld hl,varf
    1290   00:8BF5  BE                         cp (hl)
    1291   00:8BF6  C2 0C 8C                   jp nz,i00871
    1292   00:8BF9  DD 36 00 FF                ld (ix+0),255
    1293   00:8BFD  3E 19                      ld a,25
    1294   00:8BFF  32 21 40                   ld (varf),a
    1295   00:8C02  3E 01                      ld a,1
    1296   00:8C04  32 22 40                   ld (varg),a
    1297   00:8C07  3E 06                      ld a,6
    1298   00:8C09  32 23 40                   ld (varh),a
    1299   00:8C0C  3E 17               i00871 ld a,23
    1300   00:8C0E  21 21 40                   ld hl,varf
    1301   00:8C11  BE                         cp (hl)
    1302   00:8C12  C2 1F 8C                   jp nz,i00905
    1303   00:8C15  3E 14                      ld a,20
    1304   00:8C17  DD 77 04                   ld (ix+4),a
    1305   00:8C1A  3E 10                      ld a,16
    1306   00:8C1C  DD 77 03                   ld (ix+3),a
    1307   00:8C1F  3E 16               i00905 ld a,22
    1308   00:8C21  21 21 40                   ld hl,varf
    1309   00:8C24  BE                         cp (hl)
    1310   00:8C25  C2 32 8C                   jp nz,i00939
    1311   00:8C28  3E DC                      ld a,220
    1312   00:8C2A  DD 77 04                   ld (ix+4),a
    1313   00:8C2D  3E 5C                      ld a,92
    1314   00:8C2F  DD 77 03                   ld (ix+3),a
    1315   00:8C32  3E 15               i00939 ld a,21
    1316   00:8C34  21 21 40                   ld hl,varf
    1317   00:8C37  BE                         cp (hl)
    1318   00:8C38  C2 45 8C                   jp nz,i00973
    1319   00:8C3B  3E 14                      ld a,20
    1320   00:8C3D  DD 77 04                   ld (ix+4),a
    1321   00:8C40  3E 88                      ld a,136
    1322   00:8C42  DD 77 03                   ld (ix+3),a
    1323   00:8C45  3E 13               i00973 ld a,19
    1324   00:8C47  21 21 40                   ld hl,varf
    1325   00:8C4A  BE                         cp (hl)
    1326   00:8C4B  C2 61 8C                   jp nz,i01020
    1327   00:8C4E  DD 36 00 FF                ld (ix+0),255
    1328   00:8C52  3E 14                      ld a,20
    1329   00:8C54  32 21 40                   ld (varf),a
    1330   00:8C57  3E 01                      ld a,1
    1331   00:8C59  32 22 40                   ld (varg),a
    1332   00:8C5C  3E 05                      ld a,5
    1333   00:8C5E  32 23 40                   ld (varh),a
    1334   00:8C61  3E 12               i01020 ld a,18
    1335   00:8C63  21 21 40                   ld hl,varf
    1336   00:8C66  BE                         cp (hl)
    1337   00:8C67  C2 74 8C                   jp nz,i01054
    1338   00:8C6A  3E 3C                      ld a,60
    1339   00:8C6C  DD 77 04                   ld (ix+4),a
    1340   00:8C6F  3E 5C                      ld a,92
    1341   00:8C71  DD 77 03                   ld (ix+3),a
    1342   00:8C74  3E 11               i01054 ld a,17
    1343   00:8C76  21 21 40                   ld hl,varf
    1344   00:8C79  BE                         cp (hl)
    1345   00:8C7A  C2 87 8C                   jp nz,i01089
    1346   00:8C7D  3E DC                      ld a,220
    1347   00:8C7F  DD 77 04                   ld (ix+4),a
    1348   00:8C82  3E 10                      ld a,16
    1349   00:8C84  DD 77 03                   ld (ix+3),a
    1350   00:8C87  3E 01               i01089 ld a,1
    1351   00:8C89  21 21 40                   ld hl,varf
    1352   00:8C8C  BE                         cp (hl)
    1353   00:8C8D  C2 9A 8C                   jp nz,i01122
    1354   00:8C90  3E 3C                      ld a,60
    1355   00:8C92  DD 77 04                   ld (ix+4),a
    1356   00:8C95  3E 36                      ld a,54
    1357   00:8C97  DD 77 03                   ld (ix+3),a
    1358   00:8C9A  3E 02               i01122 ld a,2
    1359   00:8C9C  21 21 40                   ld hl,varf
    1360   00:8C9F  BE                         cp (hl)
    1361   00:8CA0  C2 A8 8C                   jp nz,i01148
    1362   00:8CA3  3E DC                      ld a,220
    1363   00:8CA5  DD 77 04                   ld (ix+4),a
    1364   00:8CA8  3E 03               i01148 ld a,3
    1365   00:8CAA  21 21 40                   ld hl,varf
    1366   00:8CAD  BE                         cp (hl)
    1367   00:8CAE  C2 BB 8C                   jp nz,i01182
    1368   00:8CB1  3E 14                      ld a,20
    1369   00:8CB3  DD 77 04                   ld (ix+4),a
    1370   00:8CB6  3E 10                      ld a,16
    1371   00:8CB8  DD 77 03                   ld (ix+3),a
    1372   00:8CBB  3E 04               i01182 ld a,4
    1373   00:8CBD  21 21 40                   ld hl,varf
    1374   00:8CC0  BE                         cp (hl)
    1375   00:8CC1  C2 D7 8C                   jp nz,i01228
    1376   00:8CC4  DD 36 00 FF                ld (ix+0),255
    1377   00:8CC8  3E 01                      ld a,1
    1378   00:8CCA  32 22 40                   ld (varg),a
    1379   00:8CCD  3E 05                      ld a,5
    1380   00:8CCF  32 21 40                   ld (varf),a
    1381   00:8CD2  3E 02                      ld a,2
    1382   00:8CD4  32 23 40                   ld (varh),a
    1383   00:8CD7  3E 06               i01228 ld a,6
    1384   00:8CD9  21 21 40                   ld hl,varf
    1385   00:8CDC  BE                         cp (hl)
    1386   00:8CDD  C2 EA 8C                   jp nz,i01263
    1387   00:8CE0  3E 64                      ld a,100
    1388   00:8CE2  DD 77 04                   ld (ix+4),a
    1389   00:8CE5  3E 88                      ld a,136
    1390   00:8CE7  DD 77 03                   ld (ix+3),a
    1391   00:8CEA  3E 07               i01263 ld a,7
    1392   00:8CEC  21 21 40                   ld hl,varf
    1393   00:8CEF  BE                         cp (hl)
    1394   00:8CF0  C2 F8 8C                   jp nz,i01288
    1395   00:8CF3  3E DC                      ld a,220
    1396   00:8CF5  DD 77 04                   ld (ix+4),a
    1397   00:8CF8  3E 08               i01288 ld a,8
    1398   00:8CFA  21 21 40                   ld hl,varf
    1399   00:8CFD  BE                         cp (hl)
    1400   00:8CFE  C2 06 8D                   jp nz,i01313
    1401   00:8D01  3E 14                      ld a,20
    1402   00:8D03  DD 77 04                   ld (ix+4),a
    1403   00:8D06  3E 09               i01313 ld a,9
    1404   00:8D08  21 21 40                   ld hl,varf
    1405   00:8D0B  BE                         cp (hl)
    1406   00:8D0C  C2 22 8D                   jp nz,i01360
    1407   00:8D0F  DD 36 00 FF                ld (ix+0),255
    1408   00:8D13  3E 0A                      ld a,10
    1409   00:8D15  32 21 40                   ld (varf),a
    1410   00:8D18  3E 01                      ld a,1
    1411   00:8D1A  32 22 40                   ld (varg),a
    1412   00:8D1D  3E 03                      ld a,3
    1413   00:8D1F  32 23 40                   ld (varh),a
    1414   00:8D22  3E 0B               i01360 ld a,11
    1415   00:8D24  21 21 40                   ld hl,varf
    1416   00:8D27  BE                         cp (hl)
    1417   00:8D28  C2 35 8D                   jp nz,i01394
    1418   00:8D2B  3E 14                      ld a,20
    1419   00:8D2D  DD 77 04                   ld (ix+4),a
    1420   00:8D30  3E 36                      ld a,54
    1421   00:8D32  DD 77 03                   ld (ix+3),a
    1422   00:8D35  3E 0C               i01394 ld a,12
    1423   00:8D37  21 21 40                   ld hl,varf
    1424   00:8D3A  BE                         cp (hl)
    1425   00:8D3B  C2 48 8D                   jp nz,i01429
    1426   00:8D3E  3E B4                      ld a,180
    1427   00:8D40  DD 77 04                   ld (ix+4),a
    1428   00:8D43  3E 5C                      ld a,92
    1429   00:8D45  DD 77 03                   ld (ix+3),a
    1430   00:8D48  3E 0D               i01429 ld a,13
    1431   00:8D4A  21 21 40                   ld hl,varf
    1432   00:8D4D  BE                         cp (hl)
    1433   00:8D4E  C2 5B 8D                   jp nz,i01463
    1434   00:8D51  3E 14                      ld a,20
    1435   00:8D53  DD 77 04                   ld (ix+4),a
    1436   00:8D56  3E 88                      ld a,136
    1437   00:8D58  DD 77 03                   ld (ix+3),a
    1438   00:8D5B  3E 0E               i01463 ld a,14
    1439   00:8D5D  21 21 40                   ld hl,varf
    1440   00:8D60  BE                         cp (hl)
    1441   00:8D61  C2 77 8D                   jp nz,i01510
    1442   00:8D64  DD 36 00 FF                ld (ix+0),255
    1443   00:8D68  3E 0F                      ld a,15
    1444   00:8D6A  32 21 40                   ld (varf),a
    1445   00:8D6D  3E 01                      ld a,1
    1446   00:8D6F  32 22 40                   ld (varg),a
    1447   00:8D72  3E 04                      ld a,4
    1448   00:8D74  32 23 40                   ld (varh),a
    1449   00:8D77  3E 10               i01510 ld a,16
    1450   00:8D79  21 21 40                   ld hl,varf
    1451   00:8D7C  BE                         cp (hl)
    1452   00:8D7D  C2 85 8D                   jp nz,i01536
    1453   00:8D80  3E 14                      ld a,20
    1454   00:8D82  DD 77 04                   ld (ix+4),a
    1455   00:8D85  C9                  i01536 ret
    1456   00:8D86                      
    1457   00:8D86  (00:8D86)           evnt09:	equ $
    1458   00:8D86  AF                         xor a
    1459   00:8D87  DD BE 00                   cp (ix+0)
    1460   00:8D8A  C2 92 8D                   jp nz,j00024
    1461   00:8D8D  3E 14                      ld a,20
    1462   00:8D8F  DD 77 04                   ld (ix+4),a
    1463   00:8D92  3E 01               j00024 ld a,1
    1464   00:8D94  DD BE 00                   cp (ix+0)
    1465   00:8D97  C2 A3 8D                   jp nz,j00054
    1466   00:8D9A  0E 04                      ld c,4
    1467   00:8D9C  DD 7E 03                   ld a,(ix+3)
    1468   00:8D9F  81                         add a,c
    1469   00:8DA0  DD 77 03                   ld (ix+3),a
    1470   00:8DA3  3E 02               j00054 ld a,2
    1471   00:8DA5  DD BE 00                   cp (ix+0)
    1472   00:8DA8  C2 B4 8D                   jp nz,j00083
    1473   00:8DAB  0E 04                      ld c,4
    1474   00:8DAD  DD 7E 03                   ld a,(ix+3)
    1475   00:8DB0  81                         add a,c
    1476   00:8DB1  DD 77 03                   ld (ix+3),a
    1477   00:8DB4  3E 03               j00083 ld a,3
    1478   00:8DB6  DD BE 00                   cp (ix+0)
    1479   00:8DB9  C2 C5 8D                   jp nz,j00113
    1480   00:8DBC  0E 02                      ld c,2
    1481   00:8DBE  DD 7E 03                   ld a,(ix+3)
    1482   00:8DC1  81                         add a,c
    1483   00:8DC2  DD 77 03                   ld (ix+3),a
    1484   00:8DC5  3E 04               j00113 ld a,4
    1485   00:8DC7  DD BE 00                   cp (ix+0)
    1486   00:8DCA  C2 D6 8D                   jp nz,j00142
    1487   00:8DCD  0E 04                      ld c,4
    1488   00:8DCF  DD 7E 03                   ld a,(ix+3)
    1489   00:8DD2  81                         add a,c
    1490   00:8DD3  DD 77 03                   ld (ix+3),a
    1491   00:8DD6  C9                  j00142 ret
    1492   00:8DD7                      
    1493   00:8DD7  (00:8DD7)           evnt10:	equ $
    1494   00:8DD7  AF                         xor a
    1495   00:8DD8  32 35 40                   ld (charx),a
    1496   00:8DDB  3E 07                      ld a,7
    1497   00:8DDD  32 36 40                   ld (chary),a
    1498   00:8DE0  3A 23 40                   ld a,(varh)
    1499   00:8DE3  CD CA C4                   call disply
    1500   00:8DE6  AF                         xor a
    1501   00:8DE7  32 35 40                   ld (charx),a
    1502   00:8DEA  3E 1E                      ld a,30
    1503   00:8DEC  32 36 40                   ld (chary),a
    1504   00:8DEF  3E 02                      ld a,2
    1505   00:8DF1  87                         add a,a
    1506   00:8DF2  87                         add a,a
    1507   00:8DF3  87                         add a,a
    1508   00:8DF4  87                         add a,a
    1509   00:8DF5  5F                         ld e,a
    1510   00:8DF6  3A 39 40                   ld a,(clratt)
    1511   00:8DF9  E6 0F                      and $0F
    1512   00:8DFB  B3                         or e
    1513   00:8DFC  32 39 40                   ld (clratt),a
    1514   00:8DFF  AF                         xor a
    1515   00:8E00  5F                         ld e,a
    1516   00:8E01  3A 39 40                   ld a,(clratt)
    1517   00:8E04  E6 F0                      and $F0
    1518   00:8E06  B3                         or e
    1519   00:8E07  32 39 40                   ld (clratt),a
    1520   00:8E0A  3A 45 40                   ld a,(numlif)
    1521   00:8E0D  CD CA C4                   call disply
    1522   00:8E10  C9                         ret
    1523   00:8E11                      
    1524   00:8E11  (00:8E11)           evnt11:	equ $
    1525   00:8E11  3E 02                      ld a,2
    1526   00:8E13  21 1E 40                   ld hl,varc
    1527   00:8E16  BE                         cp (hl)
    1528   00:8E17  C2 21 8E                   jp nz,l00032
    1529   00:8E1A  AF                         xor a
    1530   00:8E1B  32 1E 40                   ld (varc),a
    1531   00:8E1E  C3 28 8E                   jp l00045
    1532   00:8E21  3A 1E 40            l00032 ld a,(varc)
    1533   00:8E24  3C                         inc a
    1534   00:8E25  32 1E 40                   ld (varc),a
    1535   00:8E28  AF                  l00045 xor a
    1536   00:8E29  21 1D 40                   ld hl,varb
    1537   00:8E2C  BE                         cp (hl)
    1538   00:8E2D  C2 33 8E                   jp nz,l00066
    1539   00:8E30  C3 3A 8E                   jp l00079
    1540   00:8E33  3A 1D 40            l00066 ld a,(varb)
    1541   00:8E36  3D                         dec a
    1542   00:8E37  32 1D 40                   ld (varb),a
    1543   00:8E3A  3E 14               l00079 ld a,20
    1544   00:8E3C  21 41 40                   ld hl,scno
    1545   00:8E3F  BE                         cp (hl)
    1546   00:8E40  C2 B2 8E                   jp nz,l00313
    1547   00:8E43  3E 0A                      ld a,10
    1548   00:8E45  32 35 40                   ld (charx),a
    1549   00:8E48  3E 05                      ld a,5
    1550   00:8E4A  32 36 40                   ld (chary),a
    1551   00:8E4D  3E 05                      ld a,5
    1552   00:8E4F  87                         add a,a
    1553   00:8E50  87                         add a,a
    1554   00:8E51  87                         add a,a
    1555   00:8E52  87                         add a,a
    1556   00:8E53  5F                         ld e,a
    1557   00:8E54  3A 39 40                   ld a,(clratt)
    1558   00:8E57  E6 0F                      and $0F
    1559   00:8E59  B3                         or e
    1560   00:8E5A  32 39 40                   ld (clratt),a
    1561   00:8E5D  AF                         xor a
    1562   00:8E5E  5F                         ld e,a
    1563   00:8E5F  3A 39 40                   ld a,(clratt)
    1564   00:8E62  E6 F0                      and $F0
    1565   00:8E64  B3                         or e
    1566   00:8E65  32 39 40                   ld (clratt),a
    1567   00:8E68  3E 0B                      ld a,11
    1568   00:8E6A  CD 06 C1                   call dmsg
    1569   00:8E6D  3E 0C                      ld a,12
    1570   00:8E6F  32 35 40                   ld (charx),a
    1571   00:8E72  3E 0A                      ld a,10
    1572   00:8E74  32 36 40                   ld (chary),a
    1573   00:8E77  3E 0C                      ld a,12
    1574   00:8E79  CD 06 C1                   call dmsg
    1575   00:8E7C  3E 03                      ld a,3
    1576   00:8E7E  57                         ld d,a
    1577   00:8E7F  CD 98 C0                   call random
    1578   00:8E82  67                         ld h,a
    1579   00:8E83  CD 6C BB                   call imul
    1580   00:8E86  7C                         ld a,h
    1581   00:8E87  32 56 40                   ld (varrnd),a
    1582   00:8E8A  3A 56 40                   ld a,(varrnd)
    1583   00:8E8D  3C                         inc a
    1584   00:8E8E  32 56 40                   ld (varrnd),a
    1585   00:8E91  3E 07                      ld a,7
    1586   00:8E93  32 35 40                   ld (charx),a
    1587   00:8E96  3E 09                      ld a,9
    1588   00:8E98  32 36 40                   ld (chary),a
    1589   00:8E9B  3A 56 40                   ld a,(varrnd)
    1590   00:8E9E  32 36 40                   ld (chary),a
    1591   00:8EA1  3E 0A                      ld a,10
    1592   00:8EA3  CD 06 C1                   call dmsg
    1593   00:8EA6  AF                         xor a
    1594   00:8EA7  21 1D 40                   ld hl,varb
    1595   00:8EAA  BE                         cp (hl)
    1596   00:8EAB  C2 B2 8E                   jp nz,l00313
    1597   00:8EAE  21 53 40                   ld hl,gamwon
    1598   00:8EB1  74                         ld (hl),h
    1599   00:8EB2  C9                  l00313 ret
    1600   00:8EB3                      
    1601   00:8EB3  (00:8EB3)           evnt12:	equ $
    1602   00:8EB3  3E 01                      ld a,1
    1603   00:8EB5  32 EB 53                   ld (MSX_BDRCLR),a
    1604   00:8EB8  47                         ld b,a
    1605   00:8EB9  0E 07                      ld c,7
    1606   00:8EBB  CD 47 00                   call MSX_WRTVDP
    1607   00:8EBE  3E 04                      ld a,4
    1608   00:8EC0  87                         add a,a
    1609   00:8EC1  87                         add a,a
    1610   00:8EC2  87                         add a,a
    1611   00:8EC3  87                         add a,a
    1612   00:8EC4  5F                         ld e,a
    1613   00:8EC5  3A 39 40                   ld a,(clratt)
    1614   00:8EC8  E6 0F                      and $0F
    1615   00:8ECA  B3                         or e
    1616   00:8ECB  32 39 40                   ld (clratt),a
    1617   00:8ECE  AF                         xor a
    1618   00:8ECF  5F                         ld e,a
    1619   00:8ED0  3A 39 40                   ld a,(clratt)
    1620   00:8ED3  E6 F0                      and $F0
    1621   00:8ED5  B3                         or e
    1622   00:8ED6  32 39 40                   ld (clratt),a
    1623   00:8ED9  CD D6 B6                   call cls
    1624   00:8EDC  3E 03                      ld a,3
    1625   00:8EDE  32 35 40                   ld (charx),a
    1626   00:8EE1  3E 0B                      ld a,11
    1627   00:8EE3  32 36 40                   ld (chary),a
    1628   00:8EE6  3E 06                      ld a,6
    1629   00:8EE8  87                         add a,a
    1630   00:8EE9  87                         add a,a
    1631   00:8EEA  87                         add a,a
    1632   00:8EEB  87                         add a,a
    1633   00:8EEC  5F                         ld e,a
    1634   00:8EED  3A 39 40                   ld a,(clratt)
    1635   00:8EF0  E6 0F                      and $0F
    1636   00:8EF2  B3                         or e
    1637   00:8EF3  32 39 40                   ld (clratt),a
    1638   00:8EF6  AF                         xor a
    1639   00:8EF7  5F                         ld e,a
    1640   00:8EF8  3A 39 40                   ld a,(clratt)
    1641   00:8EFB  E6 F0                      and $F0
    1642   00:8EFD  B3                         or e
    1643   00:8EFE  32 39 40                   ld (clratt),a
    1644   00:8F01  3E 01                      ld a,1
    1645   00:8F03  32 EB 53                   ld (MSX_BDRCLR),a
    1646   00:8F06  47                         ld b,a
    1647   00:8F07  0E 07                      ld c,7
    1648   00:8F09  CD 47 00                   call MSX_WRTVDP
    1649   00:8F0C  3E 01                      ld a,1
    1650   00:8F0E  CD 06 C1                   call dmsg
    1651   00:8F11  3E 05                      ld a,5
    1652   00:8F13  32 35 40                   ld (charx),a
    1653   00:8F16  3E 08                      ld a,8
    1654   00:8F18  32 36 40                   ld (chary),a
    1655   00:8F1B  3E 05                      ld a,5
    1656   00:8F1D  87                         add a,a
    1657   00:8F1E  87                         add a,a
    1658   00:8F1F  87                         add a,a
    1659   00:8F20  87                         add a,a
    1660   00:8F21  5F                         ld e,a
    1661   00:8F22  3A 39 40                   ld a,(clratt)
    1662   00:8F25  E6 0F                      and $0F
    1663   00:8F27  B3                         or e
    1664   00:8F28  32 39 40                   ld (clratt),a
    1665   00:8F2B  AF                         xor a
    1666   00:8F2C  5F                         ld e,a
    1667   00:8F2D  3A 39 40                   ld a,(clratt)
    1668   00:8F30  E6 F0                      and $F0
    1669   00:8F32  B3                         or e
    1670   00:8F33  32 39 40                   ld (clratt),a
    1671   00:8F36  3E 05                      ld a,5
    1672   00:8F38  CD 06 C1                   call dmsg
    1673   00:8F3B  3E 08                      ld a,8
    1674   00:8F3D  32 35 40                   ld (charx),a
    1675   00:8F40  3E 04                      ld a,4
    1676   00:8F42  32 36 40                   ld (chary),a
    1677   00:8F45  3E 03                      ld a,3
    1678   00:8F47  87                         add a,a
    1679   00:8F48  87                         add a,a
    1680   00:8F49  87                         add a,a
    1681   00:8F4A  87                         add a,a
    1682   00:8F4B  5F                         ld e,a
    1683   00:8F4C  3A 39 40                   ld a,(clratt)
    1684   00:8F4F  E6 0F                      and $0F
    1685   00:8F51  B3                         or e
    1686   00:8F52  32 39 40                   ld (clratt),a
    1687   00:8F55  AF                         xor a
    1688   00:8F56  5F                         ld e,a
    1689   00:8F57  3A 39 40                   ld a,(clratt)
    1690   00:8F5A  E6 F0                      and $F0
    1691   00:8F5C  B3                         or e
    1692   00:8F5D  32 39 40                   ld (clratt),a
    1693   00:8F60  3E 06                      ld a,6
    1694   00:8F62  CD 06 C1                   call dmsg
    1695   00:8F65  3E 09                      ld a,9
    1696   00:8F67  32 35 40                   ld (charx),a
    1697   00:8F6A  3E 04                      ld a,4
    1698   00:8F6C  32 36 40                   ld (chary),a
    1699   00:8F6F  3E 07                      ld a,7
    1700   00:8F71  CD 06 C1                   call dmsg
    1701   00:8F74  3E 0A                      ld a,10
    1702   00:8F76  32 35 40                   ld (charx),a
    1703   00:8F79  3E 04                      ld a,4
    1704   00:8F7B  32 36 40                   ld (chary),a
    1705   00:8F7E  3E 08                      ld a,8
    1706   00:8F80  CD 06 C1                   call dmsg
    1707   00:8F83  3E 13                      ld a,19
    1708   00:8F85  32 35 40                   ld (charx),a
    1709   00:8F88  3E 05                      ld a,5
    1710   00:8F8A  32 36 40                   ld (chary),a
    1711   00:8F8D  3E 02                      ld a,2
    1712   00:8F8F  87                         add a,a
    1713   00:8F90  87                         add a,a
    1714   00:8F91  87                         add a,a
    1715   00:8F92  87                         add a,a
    1716   00:8F93  5F                         ld e,a
    1717   00:8F94  3A 39 40                   ld a,(clratt)
    1718   00:8F97  E6 0F                      and $0F
    1719   00:8F99  B3                         or e
    1720   00:8F9A  32 39 40                   ld (clratt),a
    1721   00:8F9D  AF                         xor a
    1722   00:8F9E  5F                         ld e,a
    1723   00:8F9F  3A 39 40                   ld a,(clratt)
    1724   00:8FA2  E6 F0                      and $F0
    1725   00:8FA4  B3                         or e
    1726   00:8FA5  32 39 40                   ld (clratt),a
    1727   00:8FA8  3E 09                      ld a,9
    1728   00:8FAA  CD 06 C1                   call dmsg
    1729   00:8FAD  3E 01                      ld a,1
    1730   00:8FAF  32 EB 53                   ld (MSX_BDRCLR),a
    1731   00:8FB2  47                         ld b,a
    1732   00:8FB3  0E 07                      ld c,7
    1733   00:8FB5  CD 47 00                   call MSX_WRTVDP
    1734   00:8FB8  3E 63                      ld a,99
    1735   00:8FBA  32 34 40                   ld (contrl),a
    1736   00:8FBD  3E 63               m00549 ld a,99
    1737   00:8FBF  21 34 40                   ld hl,contrl
    1738   00:8FC2  BE                         cp (hl)
    1739   00:8FC3  C2 07 90                   jp nz,m00703
    1740   00:8FC6  21 8B 40                   ld hl,keys+14
    1741   00:8FC9  7E                         ld a,(hl)
    1742   00:8FCA  23                         inc hl
    1743   00:8FCB  56                         ld d,(hl)
    1744   00:8FCC  CD AA C0                   call ktest
    1745   00:8FCF  DA D6 8F                   jp c,m00602
    1746   00:8FD2  AF                         xor a
    1747   00:8FD3  32 34 40                   ld (contrl),a
    1748   00:8FD6  21 8D 40            m00602 ld hl,keys+16
    1749   00:8FD9  7E                         ld a,(hl)
    1750   00:8FDA  23                         inc hl
    1751   00:8FDB  56                         ld d,(hl)
    1752   00:8FDC  CD AA C0                   call ktest
    1753   00:8FDF  DA E7 8F                   jp c,m00637
    1754   00:8FE2  3E 01                      ld a,1
    1755   00:8FE4  32 34 40                   ld (contrl),a
    1756   00:8FE7  21 8F 40            m00637 ld hl,keys+18
    1757   00:8FEA  7E                         ld a,(hl)
    1758   00:8FEB  23                         inc hl
    1759   00:8FEC  56                         ld d,(hl)
    1760   00:8FED  CD AA C0                   call ktest
    1761   00:8FF0  DA F8 8F                   jp c,m00672
    1762   00:8FF3  3E 02                      ld a,2
    1763   00:8FF5  32 34 40                   ld (contrl),a
    1764   00:8FF8  21 91 40            m00672 ld hl,keys+20
    1765   00:8FFB  7E                         ld a,(hl)
    1766   00:8FFC  23                         inc hl
    1767   00:8FFD  56                         ld d,(hl)
    1768   00:8FFE  CD AA C0                   call ktest
    1769   00:9001  DA 04 90                   jp c,m00699
    1770   00:9004  C3 BD 8F            m00699 jp m00549
    1771   00:9007  3E 03               m00703 ld a,3
    1772   00:9009  32 EB 53                   ld (MSX_BDRCLR),a
    1773   00:900C  47                         ld b,a
    1774   00:900D  0E 07                      ld c,7
    1775   00:900F  CD 47 00                   call MSX_WRTVDP
    1776   00:9012  C9                         ret
    1777   00:9013                      
    1778   00:9013  (00:9013)           evnt13:	equ $
    1779   00:9013  3E 03                      ld a,3
    1780   00:9015  32 45 40                   ld (numlif),a
    1781   00:9018  3E 0F                      ld a,15
    1782   00:901A  87                         add a,a
    1783   00:901B  87                         add a,a
    1784   00:901C  87                         add a,a
    1785   00:901D  87                         add a,a
    1786   00:901E  5F                         ld e,a
    1787   00:901F  3A 39 40                   ld a,(clratt)
    1788   00:9022  E6 0F                      and $0F
    1789   00:9024  B3                         or e
    1790   00:9025  32 39 40                   ld (clratt),a
    1791   00:9028  3E 08                      ld a,8
    1792   00:902A  5F                         ld e,a
    1793   00:902B  3A 39 40                   ld a,(clratt)
    1794   00:902E  E6 F0                      and $F0
    1795   00:9030  B3                         or e
    1796   00:9031  32 39 40                   ld (clratt),a
    1797   00:9034  AF                         xor a
    1798   00:9035  32 EB 53                   ld (MSX_BDRCLR),a
    1799   00:9038  47                         ld b,a
    1800   00:9039  0E 07                      ld c,7
    1801   00:903B  CD 47 00                   call MSX_WRTVDP
    1802   00:903E  CD D6 B6                   call cls
    1803   00:9041  3E 18                      ld a,24
    1804   00:9043  32 1C 40                   ld (vara),a
    1805   00:9046  AF                         xor a
    1806   00:9047  32 1D 40                   ld (varb),a
    1807   00:904A  AF                         xor a
    1808   00:904B  32 1E 40                   ld (varc),a
    1809   00:904E  AF                         xor a
    1810   00:904F  32 1F 40                   ld (vard),a
    1811   00:9052  AF                         xor a
    1812   00:9053  32 20 40                   ld (vare),a
    1813   00:9056  AF                         xor a
    1814   00:9057  32 21 40                   ld (varf),a
    1815   00:905A  AF                         xor a
    1816   00:905B  32 22 40                   ld (varg),a
    1817   00:905E  3E 01                      ld a,1
    1818   00:9060  32 23 40                   ld (varh),a
    1819   00:9063  AF                         xor a
    1820   00:9064  32 24 40                   ld (vari),a
    1821   00:9067  AF                         xor a
    1822   00:9068  32 25 40                   ld (varj),a
    1823   00:906B  AF                         xor a
    1824   00:906C  32 26 40                   ld (vark),a
    1825   00:906F  AF                         xor a
    1826   00:9070  32 27 40                   ld (varl),a
    1827   00:9073  AF                         xor a
    1828   00:9074  32 28 40                   ld (varm),a
    1829   00:9077  C9                         ret
    1830   00:9078                      
    1831   00:9078  (00:9078)           evnt14:	equ $
    1832   00:9078  CD 18 C9                   call sfx_mute
    1833   00:907B  AF                         xor a
    1834   00:907C  32 EB 53                   ld (MSX_BDRCLR),a
    1835   00:907F  47                         ld b,a
    1836   00:9080  0E 07                      ld c,7
    1837   00:9082  CD 47 00                   call MSX_WRTVDP
    1838   00:9085  3E 07                      ld a,7
    1839   00:9087  87                         add a,a
    1840   00:9088  87                         add a,a
    1841   00:9089  87                         add a,a
    1842   00:908A  87                         add a,a
    1843   00:908B  5F                         ld e,a
    1844   00:908C  3A 39 40                   ld a,(clratt)
    1845   00:908F  E6 0F                      and $0F
    1846   00:9091  B3                         or e
    1847   00:9092  32 39 40                   ld (clratt),a
    1848   00:9095  AF                         xor a
    1849   00:9096  5F                         ld e,a
    1850   00:9097  3A 39 40                   ld a,(clratt)
    1851   00:909A  E6 F0                      and $F0
    1852   00:909C  B3                         or e
    1853   00:909D  32 39 40                   ld (clratt),a
    1854   00:90A0  CD D6 B6                   call cls
    1855   00:90A3  AF                         xor a
    1856   00:90A4  32 1C 40                   ld (vara),a
    1857   00:90A7  AF                         xor a
    1858   00:90A8  32 22 40                   ld (varg),a
    1859   00:90AB  AF                         xor a
    1860   00:90AC  32 1F 40                   ld (vard),a
    1861   00:90AF  AF                         xor a
    1862   00:90B0  32 25 40                   ld (varj),a
    1863   00:90B3  AF                         xor a
    1864   00:90B4  32 26 40                   ld (vark),a
    1865   00:90B7  3E 72                      ld a,114
    1866   00:90B9  21 21 40                   ld hl,varf
    1867   00:90BC  BE                         cp (hl)
    1868   00:90BD  C2 C3 90                   jp nz,o00160
    1869   00:90C0  C3 3E 91                   jp o00423
    1870   00:90C3  AF                  o00160 xor a
    1871   00:90C4  32 35 40                   ld (charx),a
    1872   00:90C7  3E 01                      ld a,1
    1873   00:90C9  32 36 40                   ld (chary),a
    1874   00:90CC  3E 02                      ld a,2
    1875   00:90CE  87                         add a,a
    1876   00:90CF  87                         add a,a
    1877   00:90D0  87                         add a,a
    1878   00:90D1  87                         add a,a
    1879   00:90D2  5F                         ld e,a
    1880   00:90D3  3A 39 40                   ld a,(clratt)
    1881   00:90D6  E6 0F                      and $0F
    1882   00:90D8  B3                         or e
    1883   00:90D9  32 39 40                   ld (clratt),a
    1884   00:90DC  AF                         xor a
    1885   00:90DD  5F                         ld e,a
    1886   00:90DE  3A 39 40                   ld a,(clratt)
    1887   00:90E1  E6 F0                      and $F0
    1888   00:90E3  B3                         or e
    1889   00:90E4  32 39 40                   ld (clratt),a
    1890   00:90E7  3E 03                      ld a,3
    1891   00:90E9  CD 06 C1                   call dmsg
    1892   00:90EC  AF                         xor a
    1893   00:90ED  32 35 40                   ld (charx),a
    1894   00:90F0  3E 0C                      ld a,12
    1895   00:90F2  32 36 40                   ld (chary),a
    1896   00:90F5  3E 03                      ld a,3
    1897   00:90F7  87                         add a,a
    1898   00:90F8  87                         add a,a
    1899   00:90F9  87                         add a,a
    1900   00:90FA  87                         add a,a
    1901   00:90FB  5F                         ld e,a
    1902   00:90FC  3A 39 40                   ld a,(clratt)
    1903   00:90FF  E6 0F                      and $0F
    1904   00:9101  B3                         or e
    1905   00:9102  32 39 40                   ld (clratt),a
    1906   00:9105  AF                         xor a
    1907   00:9106  5F                         ld e,a
    1908   00:9107  3A 39 40                   ld a,(clratt)
    1909   00:910A  E6 F0                      and $F0
    1910   00:910C  B3                         or e
    1911   00:910D  32 39 40                   ld (clratt),a
    1912   00:9110  3E 01                      ld a,1
    1913   00:9112  CD 06 C1                   call dmsg
    1914   00:9115  AF                         xor a
    1915   00:9116  32 35 40                   ld (charx),a
    1916   00:9119  3E 18                      ld a,24
    1917   00:911B  32 36 40                   ld (chary),a
    1918   00:911E  3E 02                      ld a,2
    1919   00:9120  87                         add a,a
    1920   00:9121  87                         add a,a
    1921   00:9122  87                         add a,a
    1922   00:9123  87                         add a,a
    1923   00:9124  5F                         ld e,a
    1924   00:9125  3A 39 40                   ld a,(clratt)
    1925   00:9128  E6 0F                      and $0F
    1926   00:912A  B3                         or e
    1927   00:912B  32 39 40                   ld (clratt),a
    1928   00:912E  AF                         xor a
    1929   00:912F  5F                         ld e,a
    1930   00:9130  3A 39 40                   ld a,(clratt)
    1931   00:9133  E6 F0                      and $F0
    1932   00:9135  B3                         or e
    1933   00:9136  32 39 40                   ld (clratt),a
    1934   00:9139  3E 04                      ld a,4
    1935   00:913B  CD 06 C1                   call dmsg
    1936   00:913E  C9                  o00423 ret
    1937   00:913F                      
    1938   00:913F  (00:913F)           evnt15:	equ $
    1939   00:913F  AF                         xor a
    1940   00:9140  DD BE 00                   cp (ix+0)
    1941   00:9143  C2 4A 91                   jp nz,p00025
    1942   00:9146  21 52 40                   ld hl,deadf
    1943   00:9149  74                         ld (hl),h
    1944   00:914A  C9                  p00025 ret
    1945   00:914B                      
    1946   00:914B  (00:914B)           evnt16:	equ $
    1947   00:914B  3A 45 40                   ld a,(numlif)
    1948   00:914E  3D                         dec a
    1949   00:914F  32 45 40                   ld (numlif),a
    1950   00:9152  DD 36 00 FF                ld (ix+0),255
    1951   00:9156  AF                         xor a
    1952   00:9157  32 22 40                   ld (varg),a
    1953   00:915A  CD D6 B6                   call cls
    1954   00:915D  C9                         ret
    1955   00:915E                      
    1956   00:915E  (00:915E)           evnt17:	equ $
    1957   00:915E  3E 0A                      ld a,10
    1958   00:9160  32 35 40                   ld (charx),a
    1959   00:9163  3E 0C                      ld a,12
    1960   00:9165  32 36 40                   ld (chary),a
    1961   00:9168  3E 02                      ld a,2
    1962   00:916A  32 EB 53                   ld (MSX_BDRCLR),a
    1963   00:916D  47                         ld b,a
    1964   00:916E  0E 07                      ld c,7
    1965   00:9170  CD 47 00                   call MSX_WRTVDP
    1966   00:9173  CD D6 B6                   call cls
    1967   00:9176  3E 04                      ld a,4
    1968   00:9178  87                         add a,a
    1969   00:9179  87                         add a,a
    1970   00:917A  87                         add a,a
    1971   00:917B  87                         add a,a
    1972   00:917C  5F                         ld e,a
    1973   00:917D  3A 39 40                   ld a,(clratt)
    1974   00:9180  E6 0F                      and $0F
    1975   00:9182  B3                         or e
    1976   00:9183  32 39 40                   ld (clratt),a
    1977   00:9186  AF                         xor a
    1978   00:9187  5F                         ld e,a
    1979   00:9188  3A 39 40                   ld a,(clratt)
    1980   00:918B  E6 F0                      and $F0
    1981   00:918D  B3                         or e
    1982   00:918E  32 39 40                   ld (clratt),a
    1983   00:9191  AF                         xor a
    1984   00:9192  CD 06 C1                   call dmsg
    1985   00:9195  3E 0C                      ld a,12
    1986   00:9197  32 35 40                   ld (charx),a
    1987   00:919A  3E 04                      ld a,4
    1988   00:919C  32 36 40                   ld (chary),a
    1989   00:919F  3E 03                      ld a,3
    1990   00:91A1  87                         add a,a
    1991   00:91A2  87                         add a,a
    1992   00:91A3  87                         add a,a
    1993   00:91A4  87                         add a,a
    1994   00:91A5  5F                         ld e,a
    1995   00:91A6  3A 39 40                   ld a,(clratt)
    1996   00:91A9  E6 0F                      and $0F
    1997   00:91AB  B3                         or e
    1998   00:91AC  32 39 40                   ld (clratt),a
    1999   00:91AF  AF                         xor a
    2000   00:91B0  5F                         ld e,a
    2001   00:91B1  3A 39 40                   ld a,(clratt)
    2002   00:91B4  E6 F0                      and $F0
    2003   00:91B6  B3                         or e
    2004   00:91B7  32 39 40                   ld (clratt),a
    2005   00:91BA  3E 0D                      ld a,13
    2006   00:91BC  CD 06 C1                   call dmsg
    2007   00:91BF  CD 83 B5                   call prskey
    2008   00:91C2  C9                         ret
    2009   00:91C3                      
    2010   00:91C3  (00:91C3)           evnt18:	equ $
    2011   00:91C3  DD E5                      push ix
    2012   00:91C5  06 32                      ld b,50
    2013   00:91C7  CD BF B5                   call delay
    2014   00:91CA  DD E1                      pop ix
    2015   00:91CC  C9                         ret
    2016   00:91CD                      
    2017   00:91CD  (00:91CD)           evnt19:	equ $
    2018   00:91CD  C9                         ret
    2019   00:91CE                      
    2020   00:91CE  (00:91CE)           evnt20:	equ $
    2021   00:91CE  C9                         ret
    2022   00:91CF  C9                  ptcusr ret
    2023   00:91D0  (00:91D0)           msgdat:	equ $
    2024   00:91D0                             db "GAME OVER",141
    2024   00:91D0  47 41 4D 45 20 4F 56 45 52 8D 
    2025   00:91DA                             db "BALDY ZX",141
    2025   00:91DA  42 41 4C 44 59 20 5A 58 8D 
    2026   00:91E3                             db "-NEXT LEVEL-",141
    2026   00:91E3  2D 4E 45 58 54 20 4C 45 56 45 4C 2D 8D 
    2027   00:91F0                             db "LEVEL:",141
    2027   00:91F0  4C 45 56 45 4C 3A 8D 
    2028   00:91F7                             db "LIVES:",141
    2028   00:91F7  4C 49 56 45 53 3A 8D 
    2029   00:91FE                             db "SELECT CONTROL",141
    2029   00:91FE  53 45 4C 45 43 54 20 43 4F 4E 54 52 4F 4C 8D 
    2030   00:920D                             db "1.............KEYBOARD",141
    2030   00:920D  31 2E 2E 2E 2E 2E 2E 2E 2E 2E 2E 2E 2E 2E 4B 45 
    2030   00:921D  59 42 4F 41 52 44 8D 
    2031   00:9224                             db "2....KEMPSTON JOYSTICK",141
    2031   00:9224  32 2E 2E 2E 2E 4B 45 4D 50 53 54 4F 4E 20 4A 4F 
    2031   00:9234  59 53 54 49 43 4B 8D 
    2032   00:923B                             db "3....SINCLAIR JOYSTICK",141
    2032   00:923B  33 2E 2E 2E 2E 53 49 4E 43 4C 41 49 52 20 4A 4F 
    2032   00:924B  59 53 54 49 43 4B 8D 
    2033   00:9252                             db ";PAUL JENKINSON 2015",141
    2033   00:9252  3B 50 41 55 4C 20 4A 45 4E 4B 49 4E 53 4F 4E 20 
    2033   00:9262  32 30 31 35 8D 
    2034   00:9267                             db "CONGRATULATIONS",141
    2034   00:9267  43 4F 4E 47 52 41 54 55 4C 41 54 49 4F 4E 53 8D 
    2035   00:9277                             db "BALDY HAS COLLECTED ALL",141
    2035   00:9277  42 41 4C 44 59 20 48 41 53 20 43 4F 4C 4C 45 43 
    2035   00:9287  54 45 44 20 41 4C 4C 8D 
    2036   00:928F                             db "OF HIS GAMES",141
    2036   00:928F  4F 46 20 48 49 53 20 47 41 4D 45 53 8D 
    2037   00:929C                             db "BALDY IS IN NEED OF WINE!",141
    2037   00:929C  42 41 4C 44 59 20 49 53 20 49 4E 20 4E 45 45 44 
    2037   00:92AC  20 4F 46 20 57 49 4E 45 21 8D 
    2038   00:92B6  0E                  nummsg db 14
    2039   00:92B7  (00:92B7)           scdat:	equ $
    2040   00:92B7                             defw 83,72,72,57,62,58,52,60,53,101,56,43,60,70,50,65,48,49,41,37,21
    2040   00:92B7  53 00 48 00 48 00 39 00 3E 00 3A 00 34 00 3C 00 
    2040   00:92C7  35 00 65 00 38 00 2B 00 3C 00 46 00 32 00 41 00 
    2040   00:92D7  30 00 31 00 29 00 25 00 15 00 
    2041   00:92E1                             db 30,0,172,0,6,183,0,97,24,31,8,31,143,5,7,135,14,1,1,2,163,4,19,208,14,3,5,123,4,159,4,189
    2041   00:92E1  1E 00 AC 00 06 B7 00 61 18 1F 08 1F 8F 05 07 87 
    2041   00:92F1  0E 01 01 02 A3 04 13 D0 0E 03 05 7B 04 9F 04 BD 
    2042   00:9301                             db 139,181,134,0,224,139,31,9,31,222,19,181,134,199,149,19,255,127,149,222,154,125,134,159,253,154,188,149,19,254,154,215
    2042   00:9301  8B B5 86 00 E0 8B 1F 09 1F DE 13 B5 86 C7 95 13 
    2042   00:9311  FF 7F 95 DE 9A 7D 86 9F FD 9A BC 95 13 FE 9A D7 
    2043   00:9321                             db 211,149,212,0,239,159,235,14,134,92,149,107,1,167,149,255,255,255,254,26,0,187,13,0,31,8,31,80,9,10,11,124
    2043   00:9321  D3 95 D4 00 EF 9F EB 0E 86 5C 95 6B 01 A7 95 FF 
    2043   00:9331  FF FF FE 1A 00 BB 0D 00 1F 08 1F 50 09 0A 0B 7C 
    2044   00:9341                             db 12,4,17,213,135,9,13,14,15,185,4,171,227,139,9,159,9,16,105,9,24,111,139,205,149,17,253,181,149,47,129,144
    2044   00:9341  0C 04 11 D5 87 09 0D 0E 0F B9 04 AB E3 8B 09 9F 
    2044   00:9351  09 10 69 09 18 6F 8B CD 95 11 FD B5 95 2F 81 90 
    2045   00:9361                             db 78,169,24,220,129,189,144,222,149,251,154,231,10,16,165,14,134,191,63,149,11,239,149,255,255,255,252,26,0,187,13,0
    2045   00:9361  4E A9 18 DC 81 BD 90 DE 95 FB 9A E7 0A 10 A5 0E 
    2045   00:9371  86 BF 3F 95 0B EF 95 FF FF FF FC 1A 00 BB 0D 00 
    2046   00:9381                             db 31,8,31,80,14,20,21,124,22,4,26,191,9,135,14,23,24,25,185,4,171,176,139,31,9,31,222,19,211,14,239,139
    2046   00:9381  1F 08 1F 50 0E 14 15 7C 16 04 1A BF 09 87 0E 17 
    2046   00:9391  18 19 B9 04 AB B0 8B 1F 09 1F DE 13 D3 0E EF 8B 
    2047   00:93A1                             db 239,9,85,58,149,124,154,254,144,242,14,124,223,45,144,14,253,62,149,154,254,9,219,0,239,139,237,9,92,149,255,255
    2047   00:93A1  EF 09 55 3A 95 7C 9A FE 90 F2 0E 7C DF 2D 90 0E 
    2047   00:93B1  FD 3E 95 9A FE 09 DB 00 EF 8B ED 09 5C 95 FF FF 
    2048   00:93C1                             db 255,255,192,58,0,170,8,0,31,8,31,4,18,18,251,9,88,0,27,28,123,29,155,4,235,113,0,134,62,4,9,139
    2048   00:93C1  FF FF C0 3A 00 AA 08 00 1F 08 1F 04 12 12 FB 09 
    2048   00:93D1  58 00 1B 1C 7B 1D 9B 04 EB 71 00 86 3E 04 09 8B 
    2049   00:93E1                             db 55,47,9,24,247,8,149,134,221,155,171,24,253,195,149,227,129,225,149,9,171,245,193,255,255,255,255,128,26,0,170,13
    2049   00:93E1  37 2F 09 18 F7 08 95 86 DD 9B AB 18 FD C3 95 E3 
    2049   00:93F1  81 E1 95 09 AB F5 C1 FF FF FF FF 80 1A 00 AA 0D 
    2050   00:9401                             db 0,31,8,31,216,14,32,33,123,34,131,4,35,36,37,209,4,30,233,14,255,209,144,4,9,31,253,14,191,159,149,106
    2050   00:9401  00 1F 08 1F D8 0E 20 21 7B 22 83 04 23 24 25 D1 
    2050   00:9411  04 1E E9 0E FF D1 90 04 09 1F FD 0E BF 9F 95 6A 
    2051   00:9421                             db 144,253,149,123,144,155,159,169,149,174,106,159,237,0,223,144,222,14,185,149,247,4,255,255,255,254,31,0,188,0,31,49
    2051   00:9421  90 FD 95 7B 90 9B 9F A9 95 AE 6A 9F ED 00 DF 90 
    2051   00:9431  DE 0E B9 95 F7 04 FF FF FF FE 1F 00 BC 00 1F 31 
    2052   00:9441                             db 8,31,5,18,174,112,19,0,38,39,40,247,7,4,41,42,43,185,4,254,139,149,9,129,251,159,187,19,14,253,111,149
    2052   00:9441  08 1F 05 12 AE 70 13 00 26 27 28 F7 07 04 29 2A 
    2052   00:9451  2B B9 04 FE 8B 95 09 81 FB 9F BB 13 0E FD 6F 95 
    2053   00:9461                             db 190,144,159,122,18,127,14,237,149,110,144,223,14,185,149,255,255,255,255,128,31,0,188,0,31,61,8,31,193,14,44,45
    2053   00:9461  BE 90 9F 7A 12 7F 0E ED 95 6E 90 DF 0E B9 95 FF 
    2053   00:9471  FF FF FF 80 1F 00 BC 00 1F 3D 08 1F C1 0E 2C 2D 
    2054   00:9481                             db 46,238,111,4,172,0,31,60,9,31,139,62,6,6,14,251,159,253,203,149,124,123,139,190,154,19,255,123,149,219,144,243
    2054   00:9481  2E EE 6F 04 AC 00 1F 3C 09 1F 8B 3E 06 06 0E FB 
    2054   00:9491  9F FD CB 95 7C 7B 8B BE 9A 13 FF 7B 95 DB 90 F3 
    2055   00:94A1                             db 19,247,63,149,255,255,255,240,58,0,170,13,0,31,8,31,216,19,47,48,124,49,4,50,212,9,251,4,125,206,0,124
    2055   00:94A1  13 F7 3F 95 FF FF FF F0 3A 00 AA 0D 00 1F 08 1F 
    2055   00:94B1  D8 13 2F 30 7C 31 04 32 D4 09 FB 04 7D CE 00 7C 
    2056   00:94C1                             db 143,4,9,31,227,159,191,19,143,134,119,14,149,124,252,139,62,14,255,89,171,248,139,221,191,14,150,161,50,235,31,149
    2056   00:94C1  8F 04 09 1F E3 9F BF 13 8F 86 77 0E 95 7C FC 8B 
    2056   00:94D1  3E 0E FF 59 AB F8 8B DD BF 0E 96 A1 32 EB 1F 95 
    2057   00:94E1                             db 255,255,255,248,31,0,188,0,31,55,8,31,143,14,18,18,65,24,51,52,53,238,111,4,172,0,31,55,9,31,175,154
    2057   00:94E1  FF FF FF F8 1F 00 BC 00 1F 37 08 1F 8F 0E 12 12 
    2057   00:94F1  41 18 33 34 35 EE 6F 04 AC 00 1F 37 09 1F AF 9A 
    2058   00:9501                             db 149,175,144,24,247,190,149,129,254,144,239,0,245,175,149,129,115,14,247,63,149,255,255,255,240,58,0,187,12,0,31,8
    2058   00:9501  95 AF 90 18 F7 BE 95 81 FE 90 EF 00 F5 AF 95 81 
    2058   00:9511  73 0E F7 3F 95 FF FF FF F0 3A 00 BB 0C 00 1F 08 
    2059   00:9521                             db 31,5,106,6,112,9,0,54,55,56,244,4,122,50,7,14,65,64,65,0,119,5,3,151,8,0,45,19,64,10,95,131
    2059   00:9521  1F 05 6A 06 70 09 00 36 37 38 F4 04 7A 32 07 0E 
    2059   00:9531  41 40 41 00 77 05 03 97 08 00 2D 13 40 0A 5F 83 
    2060   00:9541                             db 144,31,9,227,139,78,9,19,239,124,115,4,195,129,67,139,227,150,107,15,14,93,67,144,217,166,239,19,89,166,235,4
    2060   00:9541  90 1F 09 E3 8B 4E 09 13 EF 7C 73 04 C3 81 43 8B 
    2060   00:9551  E3 96 6B 0F 0E 5D 43 90 D9 A6 EF 13 59 A6 EB 04 
    2061   00:9561                             db 123,81,166,180,3,149,26,65,191,61,171,124,235,126,14,206,171,221,123,5,225,149,223,3,31,154,255,255,255,248,58,0
    2061   00:9561  7B 51 A6 B4 03 95 1A 41 BF 3D AB 7C EB 7E 0E CE 
    2061   00:9571  AB DD 7B 05 E1 95 DF 03 1F 9A FF FF FF F8 3A 00 
    2062   00:9581                             db 255,15,0,31,8,31,7,9,32,33,34,184,4,57,61,58,59,205,4,119,13,134,155,14,9,252,149,53,58,252,149,56
    2062   00:9581  FF 0F 00 1F 08 1F 07 09 20 21 22 B8 04 39 3D 3A 
    2062   00:9591  3B CD 04 77 0D 86 9B 0E 09 FC 95 35 3A FC 95 38 
    2063   00:95A1                             db 144,227,134,248,159,255,217,171,214,144,23,18,0,106,14,252,149,127,255,255,255,224,27,0,186,8,0,31,8,31,4,60
    2063   00:95A1  90 E3 86 F8 9F FF D9 AB D6 90 17 12 00 6A 0E FC 
    2063   00:95B1  95 7F FF FF FF E0 1B 00 BA 08 00 1F 08 1F 04 3C 
    2064   00:95C1                             db 61,123,62,139,4,63,0,220,4,255,237,124,217,24,9,254,245,149,124,238,126,159,253,149,253,159,174,167,149,255,255,255
    2064   00:95C1  3D 7B 3E 8B 04 3F 00 DC 04 FF ED 7C D9 18 09 FE 
    2064   00:95D1  F5 95 7C EE 7E 9F FD 95 FD 9F AE A7 95 FF FF FF 
    2065   00:95E1                             db 254,58,0,187,13,0,31,8,31,80,19,66,67,123,68,154,4,171,61,0,72,224,139,69,70,98,71,9,9,9,239,14
    2065   00:95E1  FE 3A 00 BB 0D 00 1F 08 1F 50 13 42 43 7B 44 9A 
    2065   00:95F1  04 AB 3D 00 48 E0 8B 45 46 62 47 09 09 09 EF 0E 
    2066   00:9601                             db 119,141,149,251,0,240,139,211,14,227,174,221,227,149,249,181,244,139,57,181,251,19,253,143,149,255,255,255,252,58,0,187
    2066   00:9601  77 8D 95 FB 00 F0 8B D3 0E E3 AE DD E3 95 F9 B5 
    2066   00:9611  F4 8B 39 B5 FB 13 FD 8F 95 FF FF FF FC 3A 00 BB 
    2067   00:9621                             db 13,0,31,8,31,80,19,73,74,123,75,155,4,179,0,64,251,127,253,131,149,9,31,248,159,223,225,149,65,246,127,235
    2067   00:9621  0D 00 1F 08 1F 50 13 49 4A 7B 4B 9B 04 B3 00 40 
    2067   00:9631  FB 7F FD 83 95 09 1F F8 9F DF E1 95 41 F6 7F EB 
    2068   00:9641                             db 207,166,27,159,127,19,199,149,243,151,187,226,166,69,55,30,71,191,19,135,139,1,224,149,65,244,166,91,59,223,83,255
    2068   00:9641  CF A6 1B 9F 7F 13 C7 95 F3 97 BB E2 A6 45 37 1E 
    2068   00:9651  47 BF 13 87 8B 01 E0 95 41 F4 A6 5B 3B DF 53 FF 
    2069   00:9661                             db 255,255,248,31,0,188,0,31,61,8,31,193,29,76,77,78,238,111,4,172,0,31,61,9,31,207,174,223,181,149,135,129
    2069   00:9661  FF FF F8 1F 00 BC 00 1F 3D 08 1F C1 1D 4C 4D 4E 
    2069   00:9671  EE 6F 04 AC 00 1F 3D 09 1F CF AE DF B5 95 87 81 
    2070   00:9681                             db 69,70,71,157,4,14,223,174,255,91,149,129,183,14,238,127,149,255,255,255,224,26,0,187,8,0,31,8,31,4,82,83
    2070   00:9681  45 46 47 9D 04 0E DF AE FF 5B 95 81 B7 0E EE 7F 
    2070   00:9691  95 FF FF FF E0 1A 00 BB 08 00 1F 08 1F 04 52 53 
    2071   00:96A1                             db 121,84,9,160,0,79,80,81,247,7,4,3,5,4,185,4,255,222,139,30,9,9,31,95,14,9,255,107,149,15,139,82
    2071   00:96A1  79 54 09 A0 00 4F 50 51 F7 07 04 03 05 04 B9 04 
    2071   00:96B1  FF DE 8B 1E 09 09 1F 5F 0E 09 FF 6B 95 0F 8B 52 
    2072   00:96C1                             db 83,84,62,14,174,255,91,149,183,0,59,139,154,239,19,246,149,255,255,255,255,192,58,0,170,13,0,31,8,31,216,24
    2072   00:96C1  53 54 3E 0E AE FF 5B 95 B7 00 3B 8B 9A EF 13 F6 
    2072   00:96D1  95 FF FF FF FF C0 3A 00 AA 0D 00 1F 08 1F D8 18 
    2073   00:96E1                             db 85,86,123,85,155,4,254,13,0,31,9,31,216,169,253,248,149,27,82,83,84,179,171,196,169,124,50,213,252,171,127,250
    2073   00:96E1  55 56 7B 55 9B 04 FE 0D 00 1F 09 1F D8 A9 FD F8 
    2073   00:96F1  95 1B 52 53 54 B3 AB C4 A9 7C 32 D5 FC AB 7F FA 
    2074   00:9701                             db 193,255,255,255,255,192,58,0,170,13,0,31,8,31,216,14,51,48,111,49,126,4,123,19,236,0,31,122,9,31,149,199
    2074   00:9701  C1 FF FF FF FF C0 3A 00 AA 0D 00 1F 08 1F D8 0E 
    2074   00:9711  33 30 6F 31 7E 04 7B 13 EC 00 1F 7A 09 1F 95 C7 
    2075   00:9721                             db 159,190,195,149,9,251,18,253,103,171,159,151,88,164,249,161,245,199,171,255,255,255,255,59,0,235,15,0,87,88,87,237
    2075   00:9721  9F BE C3 95 09 FB 12 FD 67 AB 9F 97 58 A4 F9 A1 
    2075   00:9731  F5 C7 AB FF FF FF FF 3B 00 EB 0F 00 57 58 57 ED 
    2076   00:9741                             db 4,207,24,117,6,0,31,9,31,236,149,107,199,164,186,135,134,231,24,239,207,171,171,26,149,248,171,255,255,255,255,224
    2076   00:9741  04 CF 18 75 06 00 1F 09 1F EC 95 6B C7 A4 BA 87 
    2076   00:9751  86 E7 18 EF CF AB AB 1A 95 F8 AB FF FF FF FF E0 
    2077   00:9761                             db 27,0,235,13,0,90,89,90,219,4,65,0,91,92,91,187,127,4,223,0,255,126,154,187,126,144,221,149,4,235,119,149
    2077   00:9761  1B 00 EB 0D 00 5A 59 5A DB 04 41 00 5B 5C 5B BB 
    2077   00:9771  7F 04 DF 00 FF 7E 9A BB 7E 90 DD 95 04 EB 77 95 
    2078   00:9781                             db 4,255,255,255,254,63,87,160,0,93,94,0,245,47,0,27,255,219,29,246,185,255,255,255,255,240
    2078   00:9781  04 FF FF FF FE 3F 57 A0 00 5D 5E 00 F5 2F 00 1B 
    2078   00:9791  FF DB 1D F6 B9 FF FF FF FF F0 
    2079   00:979B  15                  numsc  db 21
    2080   00:979C  (00:979C)           chgfx:	equ $
    2081   00:979C                             db 0,0,0,0,0,0,0,0,241,241,241,241,241,241,241,241
    2081   00:979C  00 00 00 00 00 00 00 00 F1 F1 F1 F1 F1 F1 F1 F1 
    2082   00:97AC                             db 0,175,191,0,183,181,0,91,129,129,129,129,129,129,129,129
    2082   00:97AC  00 AF BF 00 B7 B5 00 5B 81 81 81 81 81 81 81 81 
    2083   00:97BC                             db 0,253,189,0,211,219,0,246,97,97,97,97,97,97,97,97
    2083   00:97BC  00 FD BD 00 D3 DB 00 F6 61 61 61 61 61 61 61 61 
    2084   00:97CC                             db 87,0,23,23,0,0,0,0,97,97,97,97,97,97,97,97
    2084   00:97CC  57 00 17 17 00 00 00 00 61 61 61 61 61 61 61 61 
    2085   00:97DC                             db 250,0,212,212,0,0,0,0,97,97,97,97,97,97,97,97
    2085   00:97DC  FA 00 D4 D4 00 00 00 00 61 61 61 61 61 61 61 61 
    2086   00:97EC                             db 247,0,239,239,0,0,0,0,97,97,97,97,97,97,97,97
    2086   00:97EC  F7 00 EF EF 00 00 00 00 61 61 61 61 61 61 61 61 
    2087   00:97FC                             db 0,0,0,0,0,0,0,0,129,129,129,129,129,129,129,129
    2087   00:97FC  00 00 00 00 00 00 00 00 81 81 81 81 81 81 81 81 
    2088   00:980C                             db 0,0,0,0,0,0,0,0,177,177,177,177,177,177,177,177
    2088   00:980C  00 00 00 00 00 00 00 00 B1 B1 B1 B1 B1 B1 B1 B1 
    2089   00:981C                             db 0,0,0,0,0,0,0,170,241,241,241,241,241,241,241,241
    2089   00:981C  00 00 00 00 00 00 00 AA F1 F1 F1 F1 F1 F1 F1 F1 
    2090   00:982C                             db 0,0,0,0,0,0,0,170,241,241,241,241,241,241,241,241
    2090   00:982C  00 00 00 00 00 00 00 AA F1 F1 F1 F1 F1 F1 F1 F1 
    2091   00:983C                             db 0,255,165,231,165,231,165,255,33,33,33,33,33,33,33,33
    2091   00:983C  00 FF A5 E7 A5 E7 A5 FF 21 21 21 21 21 21 21 21 
    2092   00:984C                             db 0,223,223,181,191,177,191,181,33,33,33,33,33,33,33,33
    2092   00:984C  00 DF DF B5 BF B1 BF B5 21 21 21 21 21 21 21 21 
    2093   00:985C                             db 0,255,251,245,245,59,223,223,193,193,193,193,193,193,193,193
    2093   00:985C  00 FF FB F5 F5 3B DF DF C1 C1 C1 C1 C1 C1 C1 C1 
    2094   00:986C                             db 0,127,49,31,0,0,0,0,193,193,193,193,193,193,193,193
    2094   00:986C  00 7F 31 1F 00 00 00 00 C1 C1 C1 C1 C1 C1 C1 C1 
    2095   00:987C                             db 0,253,195,223,0,0,0,0,193,193,193,193,193,193,193,193
    2095   00:987C  00 FD C3 DF 00 00 00 00 C1 C1 C1 C1 C1 C1 C1 C1 
    2096   00:988C                             db 0,222,140,136,0,0,0,0,193,193,193,193,193,193,193,193
    2096   00:988C  00 DE 8C 88 00 00 00 00 C1 C1 C1 C1 C1 C1 C1 C1 
    2097   00:989C                             db 0,0,0,0,0,0,0,0,18,18,18,18,18,18,18,18
    2097   00:989C  00 00 00 00 00 00 00 00 12 12 12 12 12 12 12 12 
    2098   00:98AC                             db 0,223,193,253,165,228,167,255,33,33,33,33,33,33,33,33
    2098   00:98AC  00 DF C1 FD A5 E4 A7 FF 21 21 21 21 21 21 21 21 
    2099   00:98BC                             db 0,0,0,0,0,0,0,0,97,97,97,97,97,97,97,97
    2099   00:98BC  00 00 00 00 00 00 00 00 61 61 61 61 61 61 61 61 
    2100   00:98CC                             db 0,239,235,0,253,237,0,191,97,97,97,97,97,97,97,97
    2100   00:98CC  00 EF EB 00 FD ED 00 BF 61 61 61 61 61 61 61 61 
    2101   00:98DC                             db 0,125,187,188,81,43,21,29,113,113,113,113,113,113,113,113
    2101   00:98DC  00 7D BB BC 51 2B 15 1D 71 71 71 71 71 71 71 71 
    2102   00:98EC                             db 0,246,181,111,143,70,216,181,113,113,113,113,113,113,113,113
    2102   00:98EC  00 F6 B5 6F 8F 46 D8 B5 71 71 71 71 71 71 71 71 
    2103   00:98FC                             db 0,242,85,47,15,70,240,184,113,113,113,113,113,113,113,113
    2103   00:98FC  00 F2 55 2F 0F 46 F0 B8 71 71 71 71 71 71 71 71 
    2104   00:990C                             db 8,3,2,1,0,0,0,0,113,113,113,113,113,113,113,113
    2104   00:990C  08 03 02 01 00 00 00 00 71 71 71 71 71 71 71 71 
    2105   00:991C                             db 186,48,0,0,0,0,0,0,113,113,113,113,113,113,113,113
    2105   00:991C  BA 30 00 00 00 00 00 00 71 71 71 71 71 71 71 71 
    2106   00:992C                             db 240,96,0,0,0,0,0,0,113,113,113,113,113,113,113,113
    2106   00:992C  F0 60 00 00 00 00 00 00 71 71 71 71 71 71 71 71 
    2107   00:993C                             db 0,247,111,109,143,70,216,181,113,113,113,113,113,113,113,113
    2107   00:993C  00 F7 6F 6D 8F 46 D8 B5 71 71 71 71 71 71 71 71 
    2108   00:994C                             db 0,222,218,76,49,61,24,0,209,209,209,209,209,209,209,209
    2108   00:994C  00 DE DA 4C 31 3D 18 00 D1 D1 D1 D1 D1 D1 D1 D1 
    2109   00:995C                             db 0,247,215,99,156,239,198,56,209,209,209,209,209,209,209,209
    2109   00:995C  00 F7 D7 63 9C EF C6 38 D1 D1 D1 D1 D1 D1 D1 D1 
    2110   00:996C                             db 0,223,93,142,112,118,44,0,209,209,209,209,209,209,209,209
    2110   00:996C  00 DF 5D 8E 70 76 2C 00 D1 D1 D1 D1 D1 D1 D1 D1 
    2111   00:997C                             db 60,90,90,126,44,0,52,24,225,225,225,225,225,225,225,225
    2111   00:997C  3C 5A 5A 7E 2C 00 34 18 E1 E1 E1 E1 E1 E1 E1 E1 
    2112   00:998C                             db 0,0,0,0,0,0,0,170,241,241,241,241,241,241,241,241
    2112   00:998C  00 00 00 00 00 00 00 AA F1 F1 F1 F1 F1 F1 F1 F1 
    2113   00:999C                             db 0,213,122,213,171,101,188,104,33,33,33,33,33,33,33,33
    2113   00:999C  00 D5 7A D5 AB 65 BC 68 21 21 21 21 21 21 21 21 
    2114   00:99AC                             db 0,106,191,117,174,85,170,5,33,33,33,33,33,33,33,33
    2114   00:99AC  00 6A BF 75 AE 55 AA 05 21 21 21 21 21 21 21 21 
    2115   00:99BC                             db 0,174,117,174,117,170,85,160,193,193,193,193,193,193,193,193
    2115   00:99BC  00 AE 75 AE 75 AA 55 A0 C1 C1 C1 C1 C1 C1 C1 C1 
    2116   00:99CC                             db 14,237,167,216,21,10,1,0,129,129,129,129,129,129,129,129
    2116   00:99CC  0E ED A7 D8 15 0A 01 00 81 81 81 81 81 81 81 81 
    2117   00:99DC                             db 113,119,165,90,21,170,145,0,129,129,129,129,129,129,129,129
    2117   00:99DC  71 77 A5 5A 15 AA 91 00 81 81 81 81 81 81 81 81 
    2118   00:99EC                             db 6,234,164,90,52,168,0,0,129,129,129,129,129,129,129,129
    2118   00:99EC  06 EA A4 5A 34 A8 00 00 81 81 81 81 81 81 81 81 
    2119   00:99FC                             db 0,255,255,0,118,118,6,22,81,81,81,81,81,81,81,81
    2119   00:99FC  00 FF FF 00 76 76 06 16 51 51 51 51 51 51 51 51 
    2120   00:9A0C                             db 0,255,255,0,222,222,0,123,81,81,81,81,81,81,81,81
    2120   00:9A0C  00 FF FF 00 DE DE 00 7B 51 51 51 51 51 51 51 51 
    2121   00:9A1C                             db 0,255,255,0,222,222,0,246,65,65,65,65,65,65,65,65
    2121   00:9A1C  00 FF FF 00 DE DE 00 F6 41 41 41 41 41 41 41 41 
    2122   00:9A2C                             db 6,0,0,0,0,0,0,0,65,65,65,65,65,65,65,65
    2122   00:9A2C  06 00 00 00 00 00 00 00 41 41 41 41 41 41 41 41 
    2123   00:9A3C                             db 123,120,120,0,0,0,0,0,65,65,65,65,65,65,65,65
    2123   00:9A3C  7B 78 78 00 00 00 00 00 41 41 41 41 41 41 41 41 
    2124   00:9A4C                             db 246,6,0,0,0,0,0,0,65,65,65,65,65,65,65,65
    2124   00:9A4C  F6 06 00 00 00 00 00 00 41 41 41 41 41 41 41 41 
    2125   00:9A5C                             db 0,222,222,222,0,189,189,189,97,97,97,97,97,97,97,97
    2125   00:9A5C  00 DE DE DE 00 BD BD BD 61 61 61 61 61 61 61 61 
    2126   00:9A6C                             db 0,247,247,247,0,253,253,253,129,129,129,129,129,129,129,129
    2126   00:9A6C  00 F7 F7 F7 00 FD FD FD 81 81 81 81 81 81 81 81 
    2127   00:9A7C                             db 0,247,247,247,0,221,221,221,97,97,97,97,97,97,97,97
    2127   00:9A7C  00 F7 F7 F7 00 DD DD DD 61 61 61 61 61 61 61 61 
    2128   00:9A8C                             db 0,111,165,66,24,53,25,3,33,33,33,33,33,33,33,33
    2128   00:9A8C  00 6F A5 42 18 35 19 03 21 21 21 21 21 21 21 21 
    2129   00:9A9C                             db 0,111,165,66,24,53,153,195,113,113,113,113,113,113,113,113
    2129   00:9A9C  00 6F A5 42 18 35 99 C3 71 71 71 71 71 71 71 71 
    2130   00:9AAC                             db 0,111,165,66,24,52,152,192,113,113,113,113,113,113,113,113
    2130   00:9AAC  00 6F A5 42 18 34 98 C0 71 71 71 71 71 71 71 71 
    2131   00:9ABC                             db 0,111,181,254,54,164,4,32,129,129,129,129,129,129,129,129
    2131   00:9ABC  00 6F B5 FE 36 A4 04 20 81 81 81 81 81 81 81 81 
    2132   00:9ACC                             db 0,189,189,89,32,14,23,11,225,225,225,225,225,225,225,225
    2132   00:9ACC  00 BD BD 59 20 0E 17 0B E1 E1 E1 E1 E1 E1 E1 E1 
    2133   00:9ADC                             db 0,173,239,231,200,158,54,92,241,241,241,241,241,241,241,241
    2133   00:9ADC  00 AD EF E7 C8 9E 36 5C F1 F1 F1 F1 F1 F1 F1 F1 
    2134   00:9AEC                             db 0,215,222,140,32,92,116,120,225,225,225,225,225,225,225,225
    2134   00:9AEC  00 D7 DE 8C 20 5C 74 78 E1 E1 E1 E1 E1 E1 E1 E1 
    2135   00:9AFC                             db 0,255,255,169,175,169,255,255,193,193,193,193,193,193,193,193
    2135   00:9AFC  00 FF FF A9 AF A9 FF FF C1 C1 C1 C1 C1 C1 C1 C1 
    2136   00:9B0C                             db 0,255,215,131,131,131,215,255,33,33,33,33,33,33,33,33
    2136   00:9B0C  00 FF D7 83 83 83 D7 FF 21 21 21 21 21 21 21 21 
    2137   00:9B1C                             db 0,255,165,191,161,161,191,255,193,193,193,193,193,193,193,193
    2137   00:9B1C  00 FF A5 BF A1 A1 BF FF C1 C1 C1 C1 C1 C1 C1 C1 
    2138   00:9B2C                             db 6,214,209,44,0,0,0,0,97,97,97,97,97,97,97,97
    2138   00:9B2C  06 D6 D1 2C 00 00 00 00 61 61 61 61 61 61 61 61 
    2139   00:9B3C                             db 208,214,38,1,0,0,0,0,129,129,129,129,129,129,129,129
    2139   00:9B3C  D0 D6 26 01 00 00 00 00 81 81 81 81 81 81 81 81 
    2140   00:9B4C                             db 218,218,4,64,0,0,0,0,97,97,97,97,97,97,97,97
    2140   00:9B4C  DA DA 04 40 00 00 00 00 61 61 61 61 61 61 61 61 
    2141   00:9B5C                             db 0,255,0,85,74,85,74,85,65,65,65,65,65,65,65,65
    2141   00:9B5C  00 FF 00 55 4A 55 4A 55 41 41 41 41 41 41 41 41 
    2142   00:9B6C                             db 0,255,0,61,188,65,170,85,81,81,81,81,81,81,81,81
    2142   00:9B6C  00 FF 00 3D BC 41 AA 55 51 51 51 51 51 51 51 51 
    2143   00:9B7C                             db 0,255,0,82,170,82,170,82,65,65,65,65,65,65,65,65
    2143   00:9B7C  00 FF 00 52 AA 52 AA 52 41 41 41 41 41 41 41 41 
    2144   00:9B8C                             db 0,255,0,0,0,0,0,0,81,81,81,81,81,81,81,81
    2144   00:9B8C  00 FF 00 00 00 00 00 00 51 51 51 51 51 51 51 51 
    2145   00:9B9C                             db 68,32,68,64,0,0,0,0,241,241,241,241,241,241,241,241
    2145   00:9B9C  44 20 44 40 00 00 00 00 F1 F1 F1 F1 F1 F1 F1 F1 
    2146   00:9BAC                             db 40,4,36,0,4,0,0,0,177,177,177,177,177,177,177,177
    2146   00:9BAC  28 04 24 00 04 00 00 00 B1 B1 B1 B1 B1 B1 B1 B1 
    2147   00:9BBC                             db 0,255,0,111,111,55,27,13,113,113,113,113,113,113,113,113
    2147   00:9BBC  00 FF 00 6F 6F 37 1B 0D 71 71 71 71 71 71 71 71 
    2148   00:9BCC                             db 0,255,0,232,244,232,244,232,113,113,113,113,113,113,113,113
    2148   00:9BCC  00 FF 00 E8 F4 E8 F4 E8 71 71 71 71 71 71 71 71 
    2149   00:9BDC                             db 0,255,0,94,190,92,188,88,161,161,161,161,161,161,161,161
    2149   00:9BDC  00 FF 00 5E BE 5C BC 58 A1 A1 A1 A1 A1 A1 A1 A1 
    2150   00:9BEC                             db 255,152,170,168,170,154,255,0,129,129,129,129,129,129,129,129
    2150   00:9BEC  FF 98 AA A8 AA 9A FF 00 81 81 81 81 81 81 81 81 
    2151   00:9BFC                             db 255,136,171,170,170,168,255,0,129,129,129,129,129,129,129,129
    2151   00:9BFC  FF 88 AB AA AA A8 FF 00 81 81 81 81 81 81 81 81 
    2152   00:9C0C                             db 255,147,181,147,181,149,255,0,97,97,97,97,97,97,97,97
    2152   00:9C0C  FF 93 B5 93 B5 95 FF 00 61 61 61 61 61 61 61 61 
    2153   00:9C1C                             db 0,8,0,8,42,8,42,42,241,241,241,241,241,241,241,241
    2153   00:9C1C  00 08 00 08 2A 08 2A 2A F1 F1 F1 F1 F1 F1 F1 F1 
    2154   00:9C2C                             db 0,246,246,6,174,174,32,0,161,161,161,161,161,161,161,161
    2154   00:9C2C  00 F6 F6 06 AE AE 20 00 A1 A1 A1 A1 A1 A1 A1 A1 
    2155   00:9C3C                             db 0,221,221,0,247,247,3,0,177,177,177,177,177,177,177,177
    2155   00:9C3C  00 DD DD 00 F7 F7 03 00 B1 B1 B1 B1 B1 B1 B1 B1 
    2156   00:9C4C                             db 0,111,111,99,11,120,123,3,225,225,225,225,225,225,225,225
    2156   00:9C4C  00 6F 6F 63 0B 78 7B 03 E1 E1 E1 E1 E1 E1 E1 E1 
    2157   00:9C5C                             db 96,147,148,100,3,8,20,8,33,33,33,33,33,33,33,33
    2157   00:9C5C  60 93 94 64 03 08 14 08 21 21 21 21 21 21 21 21 
    2158   00:9C6C                             db 24,36,165,153,64,164,74,4,177,177,177,177,177,177,177,177
    2158   00:9C6C  18 24 A5 99 40 A4 4A 04 B1 B1 B1 B1 B1 B1 B1 B1 
    2159   00:9C7C                             db 6,201,41,38,200,20,8,0,113,113,113,113,113,113,113,113
    2159   00:9C7C  06 C9 29 26 C8 14 08 00 71 71 71 71 71 71 71 71 
    2160   00:9C8C                             db 0,255,0,183,170,157,174,4,209,209,209,209,209,209,209,209
    2160   00:9C8C  00 FF 00 B7 AA 9D AE 04 D1 D1 D1 D1 D1 D1 D1 D1 
    2161   00:9C9C                             db 0,255,0,119,187,85,238,68,209,209,209,209,209,209,209,209
    2161   00:9C9C  00 FF 00 77 BB 55 EE 44 D1 D1 D1 D1 D1 D1 D1 D1 
    2162   00:9CAC                             db 0,255,0,117,169,93,237,68,209,209,209,209,209,209,209,209
    2162   00:9CAC  00 FF 00 75 A9 5D ED 44 D1 D1 D1 D1 D1 D1 D1 D1 
    2163   00:9CBC                             db 0,0,16,25,141,77,38,22,241,241,241,241,241,241,241,241
    2163   00:9CBC  00 00 10 19 8D 4D 26 16 F1 F1 F1 F1 F1 F1 F1 F1 
    2164   00:9CCC                             db 4,128,148,133,147,214,206,220,177,177,177,177,177,177,177,177
    2164   00:9CCC  04 80 94 85 93 D6 CE DC B1 B1 B1 B1 B1 B1 B1 B1 
    2165   00:9CDC                             db 8,0,16,50,36,101,234,212,225,225,225,225,225,225,225,225
    2165   00:9CDC  08 00 10 32 24 65 EA D4 E1 E1 E1 E1 E1 E1 E1 E1 
    2166   00:9CEC                             db 0,218,85,109,42,41,68,4,97,97,97,97,97,97,97,97
    2166   00:9CEC  00 DA 55 6D 2A 29 44 04 61 61 61 61 61 61 61 61 
    2167   00:9CFC                             db 0,154,81,77,21,84,4,16,129,129,129,129,129,129,129,129
    2167   00:9CFC  00 9A 51 4D 15 54 04 10 81 81 81 81 81 81 81 81 
    2168   00:9D0C                             db 0,255,0,102,102,102,0,255,161,161,161,161,161,161,161,161
    2168   00:9D0C  00 FF 00 66 66 66 00 FF A1 A1 A1 A1 A1 A1 A1 A1 
    2169   00:9D1C                             db 0,255,0,126,126,126,0,255,177,177,177,177,177,177,177,177
    2169   00:9D1C  00 FF 00 7E 7E 7E 00 FF B1 B1 B1 B1 B1 B1 B1 B1 
    2170   00:9D2C                             db 0,133,86,187,237,183,93,10,81,81,81,81,81,81,81,81
    2170   00:9D2C  00 85 56 BB ED B7 5D 0A 51 51 51 51 51 51 51 51 
    2171   00:9D3C                             db 0,162,213,106,221,115,88,160,65,65,65,65,65,65,65,65
    2171   00:9D3C  00 A2 D5 6A DD 73 58 A0 41 41 41 41 41 41 41 41 
    2172   00:9D4C                             db 6,213,108,8,0,0,0,0,241,241,241,241,241,241,241,241
    2172   00:9D4C  06 D5 6C 08 00 00 00 00 F1 F1 F1 F1 F1 F1 F1 F1 
    2173   00:9D5C                             db 208,106,181,40,8,0,0,0,225,225,225,225,225,225,225,225
    2173   00:9D5C  D0 6A B5 28 08 00 00 00 E1 E1 E1 E1 E1 E1 E1 E1 
    2174   00:9D6C                             db 94,157,94,77,86,89,92,94,113,113,113,113,113,113,113,113
    2174   00:9D6C  5E 9D 5E 4D 56 59 5C 5E 71 71 71 71 71 71 71 71 
    2175   00:9D7C                             db 30,14,14,38,26,45,30,46,241,241,241,241,241,241,241,241
    2175   00:9D7C  1E 0E 0E 26 1A 2D 1E 2E F1 F1 F1 F1 F1 F1 F1 F1 
    2176   00:9D8C  (00:9D8C)           bprop  equ $
    2177   00:9D8C  00                         db 0
    2178   00:9D8D  02                         db 2
    2179   00:9D8E  02                         db 2
    2180   00:9D8F  00                         db 0
    2181   00:9D90  00                         db 0
    2182   00:9D91  00                         db 0
    2183   00:9D92  00                         db 0
    2184   00:9D93  00                         db 0
    2185   00:9D94  05                         db 5
    2186   00:9D95  06                         db 6
    2187   00:9D96  02                         db 2
    2188   00:9D97  02                         db 2
    2189   00:9D98  02                         db 2
    2190   00:9D99  00                         db 0
    2191   00:9D9A  00                         db 0
    2192   00:9D9B  00                         db 0
    2193   00:9D9C  00                         db 0
    2194   00:9D9D  00                         db 0
    2195   00:9D9E  00                         db 0
    2196   00:9D9F  00                         db 0
    2197   00:9DA0  02                         db 2
    2198   00:9DA1  02                         db 2
    2199   00:9DA2  02                         db 2
    2200   00:9DA3  00                         db 0
    2201   00:9DA4  00                         db 0
    2202   00:9DA5  00                         db 0
    2203   00:9DA6  02                         db 2
    2204   00:9DA7  01                         db 1
    2205   00:9DA8  01                         db 1
    2206   00:9DA9  01                         db 1
    2207   00:9DAA  00                         db 0
    2208   00:9DAB  00                         db 0
    2209   00:9DAC  01                         db 1
    2210   00:9DAD  01                         db 1
    2211   00:9DAE  01                         db 1
    2212   00:9DAF  00                         db 0
    2213   00:9DB0  00                         db 0
    2214   00:9DB1  00                         db 0
    2215   00:9DB2  01                         db 1
    2216   00:9DB3  01                         db 1
    2217   00:9DB4  01                         db 1
    2218   00:9DB5  00                         db 0
    2219   00:9DB6  00                         db 0
    2220   00:9DB7  00                         db 0
    2221   00:9DB8  01                         db 1
    2222   00:9DB9  01                         db 1
    2223   00:9DBA  01                         db 1
    2224   00:9DBB  01                         db 1
    2225   00:9DBC  01                         db 1
    2226   00:9DBD  01                         db 1
    2227   00:9DBE  01                         db 1
    2228   00:9DBF  01                         db 1
    2229   00:9DC0  01                         db 1
    2230   00:9DC1  01                         db 1
    2231   00:9DC2  01                         db 1
    2232   00:9DC3  01                         db 1
    2233   00:9DC4  01                         db 1
    2234   00:9DC5  00                         db 0
    2235   00:9DC6  00                         db 0
    2236   00:9DC7  00                         db 0
    2237   00:9DC8  01                         db 1
    2238   00:9DC9  01                         db 1
    2239   00:9DCA  01                         db 1
    2240   00:9DCB  00                         db 0
    2241   00:9DCC  00                         db 0
    2242   00:9DCD  00                         db 0
    2243   00:9DCE  01                         db 1
    2244   00:9DCF  01                         db 1
    2245   00:9DD0  01                         db 1
    2246   00:9DD1  00                         db 0
    2247   00:9DD2  00                         db 0
    2248   00:9DD3  00                         db 0
    2249   00:9DD4  00                         db 0
    2250   00:9DD5  01                         db 1
    2251   00:9DD6  00                         db 0
    2252   00:9DD7  01                         db 1
    2253   00:9DD8  01                         db 1
    2254   00:9DD9  01                         db 1
    2255   00:9DDA  01                         db 1
    2256   00:9DDB  01                         db 1
    2257   00:9DDC  01                         db 1
    2258   00:9DDD  01                         db 1
    2259   00:9DDE  00                         db 0
    2260   00:9DDF  00                         db 0
    2261   00:9DE0  00                         db 0
    2262   00:9DE1  01                         db 1
    2263   00:9DE2  01                         db 1
    2264   00:9DE3  01                         db 1
    2265   00:9DE4  01                         db 1
    2266   00:9DE5  01                         db 1
    2267   00:9DE6  01                         db 1
    2268   00:9DE7  00                         db 0
    2269   00:9DE8  00                         db 0
    2270   00:9DE9  00                         db 0
    2271   00:9DEA  00                         db 0
    2272   00:9DEB  (00:9DEB)           sprgfx:	equ $
    2273   00:9DEB                             db 15,30,3,7,30,15,0,30,53,43,29,24,37,88,60,116,192,160,96,224,32,192,0,208,224,232,220,8,224,192,184,116
    2273   00:9DEB  0F 1E 03 07 1E 0F 00 1E 35 2B 1D 18 25 58 3C 74 
    2273   00:9DFB  C0 A0 60 E0 20 C0 00 D0 E0 E8 DC 08 E0 C0 B8 74 
    2274   00:9E0B                             db 15,30,3,7,30,15,0,62,93,235,65,0,237,232,168,192,192,160,96,224,32,194,7,218,236,224,192,48,251,119,10,28
    2274   00:9E0B  0F 1E 03 07 1E 0F 00 3E 5D EB 41 00 ED E8 A8 C0 
    2274   00:9E1B  C0 A0 60 E0 20 C2 07 DA EC E0 C0 30 FB 77 0A 1C 
    2275   00:9E2B                             db 3,5,6,7,4,3,0,11,7,23,59,16,7,3,29,46,240,120,192,224,120,240,0,120,172,212,184,24,164,26,60,46
    2275   00:9E2B  03 05 06 07 04 03 00 0B 07 17 3B 10 07 03 1D 2E 
    2275   00:9E3B  F0 78 C0 E0 78 F0 00 78 AC D4 B8 18 A4 1A 3C 2E 
    2276   00:9E4B                             db 3,5,6,7,4,67,224,91,55,7,3,12,223,238,80,56,240,120,192,224,120,240,0,124,186,215,130,0,183,23,21,3
    2276   00:9E4B  03 05 06 07 04 43 E0 5B 37 07 03 0C DF EE 50 38 
    2276   00:9E5B  F0 78 C0 E0 78 F0 00 7C BA D7 82 00 B7 17 15 03 
    2277   00:9E6B                             db 5,15,14,15,183,219,76,218,0,0,0,0,0,0,0,0,160,240,112,240,237,219,50,91,0,0,0,0,0,0,0,0
    2277   00:9E6B  05 0F 0E 0F B7 DB 4C DA 00 00 00 00 00 00 00 00 
    2277   00:9E7B  A0 F0 70 F0 ED DB 32 5B 00 00 00 00 00 00 00 00 
    2278   00:9E8B                             db 0,0,0,0,0,0,0,0,0,0,0,0,8,255,8,0,0,0,0,0,0,0,0,0,0,0,0,4,2,253,2,4
    2278   00:9E8B  00 00 00 00 00 00 00 00 00 00 00 00 08 FF 08 00 
    2278   00:9E9B  00 00 00 00 00 00 00 00 00 00 00 04 02 FD 02 04 
    2279   00:9EAB                             db 0,0,0,0,0,0,0,0,0,0,0,0,248,15,248,0,0,0,0,0,0,0,0,0,0,0,0,0,6,253,6,0
    2279   00:9EAB  00 00 00 00 00 00 00 00 00 00 00 00 F8 0F F8 00 
    2279   00:9EBB  00 00 00 00 00 00 00 00 00 00 00 00 06 FD 06 00 
    2280   00:9ECB                             db 0,0,0,0,0,0,0,0,0,0,0,240,8,15,8,240,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0
    2280   00:9ECB  00 00 00 00 00 00 00 00 00 00 00 F0 08 0F 08 F0 
    2280   00:9EDB  00 00 00 00 00 00 00 00 00 00 00 00 00 FF 00 00 
    2281   00:9EEB                             db 0,0,0,0,0,0,0,0,0,0,0,0,248,15,248,0,0,0,0,0,0,0,0,0,0,0,0,0,6,253,6,0
    2281   00:9EEB  00 00 00 00 00 00 00 00 00 00 00 00 F8 0F F8 00 
    2281   00:9EFB  00 00 00 00 00 00 00 00 00 00 00 00 06 FD 06 00 
    2282   00:9F0B                             db 0,0,0,0,0,0,127,231,195,231,255,128,191,182,63,0,0,0,0,0,0,0,254,231,195,231,255,1,253,109,252,0
    2282   00:9F0B  00 00 00 00 00 00 7F E7 C3 E7 FF 80 BF B6 3F 00 
    2282   00:9F1B  00 00 00 00 00 00 FE E7 C3 E7 FF 01 FD 6D FC 00 
    2283   00:9F2B                             db 0,0,0,0,0,0,29,43,42,43,43,42,42,42,42,0,0,0,0,0,0,0,240,88,72,88,248,8,232,168,232,0
    2283   00:9F2B  00 00 00 00 00 00 1D 2B 2A 2B 2B 2A 2A 2A 2A 00 
    2283   00:9F3B  00 00 00 00 00 00 F0 58 48 58 F8 08 E8 A8 E8 00 
    2284   00:9F4B                             db 0,0,0,0,0,0,1,3,3,3,3,0,3,3,3,0,0,0,0,0,0,0,128,64,192,192,192,0,192,192,192,0
    2284   00:9F4B  00 00 00 00 00 00 01 03 03 03 03 00 03 03 03 00 
    2284   00:9F5B  00 00 00 00 00 00 80 40 C0 C0 C0 00 C0 C0 C0 00 
    2285   00:9F6B                             db 0,0,0,0,0,0,31,53,36,53,63,32,46,42,46,0,0,0,0,0,0,0,112,168,168,168,168,168,168,168,168,0
    2285   00:9F6B  00 00 00 00 00 00 1F 35 24 35 3F 20 2E 2A 2E 00 
    2285   00:9F7B  00 00 00 00 00 00 70 A8 A8 A8 A8 A8 A8 A8 A8 00 
    2286   00:9F8B                             db 0,0,0,0,0,0,0,0,0,224,177,83,173,83,177,224,0,0,0,0,0,0,0,0,0,0,240,88,85,88,240,0
    2286   00:9F8B  00 00 00 00 00 00 00 00 00 E0 B1 53 AD 53 B1 E0 
    2286   00:9F9B  00 00 00 00 00 00 00 00 00 00 F0 58 55 58 F0 00 
    2287   00:9FAB                             db 0,0,0,0,0,0,0,0,0,1,243,86,170,86,243,1,0,0,0,0,0,0,0,0,0,224,240,184,170,184,240,224
    2287   00:9FAB  00 00 00 00 00 00 00 00 00 01 F3 56 AA 56 F3 01 
    2287   00:9FBB  00 00 00 00 00 00 00 00 00 E0 F0 B8 AA B8 F0 E0 
    2288   00:9FCB                             db 0,0,0,0,0,0,0,0,0,1,3,5,253,5,3,1,0,0,0,0,0,0,0,0,0,224,240,120,108,120,240,224
    2288   00:9FCB  00 00 00 00 00 00 00 00 00 01 03 05 FD 05 03 01 
    2288   00:9FDB  00 00 00 00 00 00 00 00 00 E0 F0 78 6C 78 F0 E0 
    2289   00:9FEB                             db 0,0,0,0,0,0,0,0,0,0,241,83,173,83,241,0,0,0,0,0,0,0,0,0,0,0,240,88,85,88,240,0
    2289   00:9FEB  00 00 00 00 00 00 00 00 00 00 F1 53 AD 53 F1 00 
    2289   00:9FFB  00 00 00 00 00 00 00 00 00 00 F0 58 55 58 F0 00 
    2290   00:A00B                             db 0,0,0,0,0,0,0,0,0,0,0,31,32,223,63,31,0,0,0,0,0,0,0,0,0,0,0,135,205,186,205,135
    2290   00:A00B  00 00 00 00 00 00 00 00 00 00 00 1F 20 DF 3F 1F 
    2290   00:A01B  00 00 00 00 00 00 00 00 00 00 00 87 CD BA CD 87 
    2291   00:A02B                             db 0,0,0,0,0,0,0,0,0,0,0,31,63,255,63,31,0,0,0,0,0,0,0,0,0,0,0,128,207,186,207,128
    2291   00:A02B  00 00 00 00 00 00 00 00 00 00 00 1F 3F FF 3F 1F 
    2291   00:A03B  00 00 00 00 00 00 00 00 00 00 00 80 CF BA CF 80 
    2292   00:A04B                             db 0,0,0,0,0,0,0,0,0,0,0,31,63,223,32,31,0,0,0,0,0,0,0,0,0,0,0,128,192,191,192,128
    2292   00:A04B  00 00 00 00 00 00 00 00 00 00 00 1F 3F DF 20 1F 
    2292   00:A05B  00 00 00 00 00 00 00 00 00 00 00 80 C0 BF C0 80 
    2293   00:A06B                             db 0,0,0,0,0,0,0,0,0,0,0,31,63,192,63,31,0,0,0,0,0,0,0,0,0,0,0,128,207,186,207,128
    2293   00:A06B  00 00 00 00 00 00 00 00 00 00 00 1F 3F C0 3F 1F 
    2293   00:A07B  00 00 00 00 00 00 00 00 00 00 00 80 CF BA CF 80 
    2294   00:A08B                             db 0,0,0,0,0,0,0,0,0,0,0,0,0,32,79,32,0,0,0,0,0,0,0,0,0,0,0,0,0,6,248,6
    2294   00:A08B  00 00 00 00 00 00 00 00 00 00 00 00 00 20 4F 20 
    2294   00:A09B  00 00 00 00 00 00 00 00 00 00 00 00 00 06 F8 06 
    2295   00:A0AB                             db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,240,12
    2295   00:A0AB  00 00 00 00 00 00 00 00 00 00 00 00 00 00 6F 00 
    2295   00:A0BB  00 00 00 00 00 00 00 00 00 00 00 00 00 0C F0 0C 
    2296   00:A0CB                             db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,224,24
    2296   00:A0CB  00 00 00 00 00 00 00 00 00 00 00 00 00 00 6F 00 
    2296   00:A0DB  00 00 00 00 00 00 00 00 00 00 00 00 00 18 E0 18 
    2297   00:A0EB                             db 0,0,0,0,0,0,0,0,0,0,0,0,0,32,79,32,0,0,0,0,0,0,0,0,0,0,0,0,0,12,240,12
    2297   00:A0EB  00 00 00 00 00 00 00 00 00 00 00 00 00 20 4F 20 
    2297   00:A0FB  00 00 00 00 00 00 00 00 00 00 00 00 00 0C F0 0C 
    2298   00:A10B                             db 3,29,114,110,64,9,29,45,125,0,15,22,46,14,0,27,128,112,156,236,4,0,0,64,0,64,128,0,0,0,0,0
    2298   00:A10B  03 1D 72 6E 40 09 1D 2D 7D 00 0F 16 2E 0E 00 1B 
    2298   00:A11B  80 70 9C EC 04 00 00 40 00 40 80 00 00 00 00 00 
    2299   00:A12B                             db 3,29,114,110,64,9,29,45,125,0,15,22,39,3,0,6,128,112,156,236,4,0,0,64,0,64,128,0,0,0,64,128
    2299   00:A12B  03 1D 72 6E 40 09 1D 2D 7D 00 0F 16 27 03 00 06 
    2299   00:A13B  80 70 9C EC 04 00 00 40 00 40 80 00 00 00 40 80 
    2300   00:A14B                             db 3,29,114,110,64,9,29,45,125,0,15,22,46,14,0,27,128,112,156,236,4,0,0,64,0,64,128,0,0,0,0,0
    2300   00:A14B  03 1D 72 6E 40 09 1D 2D 7D 00 0F 16 2E 0E 00 1B 
    2300   00:A15B  80 70 9C EC 04 00 00 40 00 40 80 00 00 00 00 00 
    2301   00:A16B                             db 3,29,114,110,64,9,29,45,125,0,15,54,12,24,64,44,128,112,156,236,4,0,0,64,0,64,128,0,0,0,0,0
    2301   00:A16B  03 1D 72 6E 40 09 1D 2D 7D 00 0F 36 0C 18 40 2C 
    2301   00:A17B  80 70 9C EC 04 00 00 40 00 40 80 00 00 00 00 00 
    2302   00:A18B                             db 0,0,0,0,0,0,0,0,0,55,109,0,222,0,122,45,0,0,0,0,0,0,0,0,0,116,174,0,219,0,238,188
    2302   00:A18B  00 00 00 00 00 00 00 00 00 37 6D 00 DE 00 7A 2D 
    2302   00:A19B  00 00 00 00 00 00 00 00 00 74 AE 00 DB 00 EE BC 
    2303   00:A1AB                             db 0,0,0,0,0,0,0,0,55,109,0,183,222,0,122,45,0,0,0,0,0,0,0,0,116,174,0,119,219,0,238,188
    2303   00:A1AB  00 00 00 00 00 00 00 00 37 6D 00 B7 DE 00 7A 2D 
    2303   00:A1BB  00 00 00 00 00 00 00 00 74 AE 00 77 DB 00 EE BC 
    2304   00:A1CB                             db 0,0,0,0,0,0,0,0,55,109,0,183,222,0,122,45,0,0,0,0,0,0,0,0,116,174,0,119,219,0,238,188
    2304   00:A1CB  00 00 00 00 00 00 00 00 37 6D 00 B7 DE 00 7A 2D 
    2304   00:A1DB  00 00 00 00 00 00 00 00 74 AE 00 77 DB 00 EE BC 
    2305   00:A1EB                             db 0,0,0,0,0,0,0,0,0,55,109,0,222,0,122,45,0,0,0,0,0,0,0,0,0,116,174,0,219,0,238,188
    2305   00:A1EB  00 00 00 00 00 00 00 00 00 37 6D 00 DE 00 7A 2D 
    2305   00:A1FB  00 00 00 00 00 00 00 00 00 74 AE 00 DB 00 EE BC 
    2306   00:A20B                             db 3,15,24,48,50,56,63,62,30,15,2,0,4,6,7,3,224,248,140,130,164,138,116,42,52,232,160,0,16,176,240,224
    2306   00:A20B  03 0F 18 30 32 38 3F 3E 1E 0F 02 00 04 06 07 03 
    2306   00:A21B  E0 F8 8C 82 A4 8A 74 2A 34 E8 A0 00 10 B0 F0 E0 
    2307   00:A22B                             db 3,15,24,49,48,56,63,62,30,15,2,4,6,7,3,0,224,248,140,194,132,138,116,42,52,232,160,16,176,240,224,0
    2307   00:A22B  03 0F 18 31 30 38 3F 3E 1E 0F 02 04 06 07 03 00 
    2307   00:A23B  E0 F8 8C C2 84 8A 74 2A 34 E8 A0 10 B0 F0 E0 00 
    2308   00:A24B                             db 3,15,24,52,48,56,63,62,30,15,6,6,7,3,0,0,224,248,140,146,132,138,116,42,52,232,176,176,240,224,0,0
    2308   00:A24B  03 0F 18 34 30 38 3F 3E 1E 0F 06 06 07 03 00 00 
    2308   00:A25B  E0 F8 8C 92 84 8A 74 2A 34 E8 B0 B0 F0 E0 00 00 
    2309   00:A26B                             db 3,15,24,48,52,56,63,62,30,15,2,4,6,7,3,0,224,248,140,130,148,138,116,42,52,232,160,16,176,240,224,0
    2309   00:A26B  03 0F 18 30 34 38 3F 3E 1E 0F 02 04 06 07 03 00 
    2309   00:A27B  E0 F8 8C 82 94 8A 74 2A 34 E8 A0 10 B0 F0 E0 00 
    2310   00:A28B                             db 0,12,82,33,81,0,0,0,15,15,15,15,15,0,7,0,0,0,24,36,78,132,128,0,232,232,232,232,232,0,208,0
    2310   00:A28B  00 0C 52 21 51 00 00 00 0F 0F 0F 0F 0F 00 07 00 
    2310   00:A29B  00 00 18 24 4E 84 80 00 E8 E8 E8 E8 E8 00 D0 00 
    2311   00:A2AB                             db 0,0,22,9,21,0,0,0,15,15,15,15,15,0,7,0,0,0,0,48,120,144,128,0,248,248,248,248,248,0,240,0
    2311   00:A2AB  00 00 16 09 15 00 00 00 0F 0F 0F 0F 0F 00 07 00 
    2311   00:A2BB  00 00 00 30 78 90 80 00 F8 F8 F8 F8 F8 00 F0 00 
    2312   00:A2CB                             db 0,0,6,3,5,0,0,0,11,11,11,11,11,0,5,0,0,0,128,160,96,192,128,0,248,248,248,248,248,0,240,0
    2312   00:A2CB  00 00 06 03 05 00 00 00 0B 0B 0B 0B 0B 00 05 00 
    2312   00:A2DB  00 00 80 A0 60 C0 80 00 F8 F8 F8 F8 F8 00 F0 00 
    2313   00:A2EB                             db 0,0,2,13,21,0,0,0,15,15,15,15,15,0,7,0,0,0,32,80,120,144,128,0,120,120,120,120,120,0,112,0
    2313   00:A2EB  00 00 02 0D 15 00 00 00 0F 0F 0F 0F 0F 00 07 00 
    2313   00:A2FB  00 00 20 50 78 90 80 00 78 78 78 78 78 00 70 00 
    2314   00:A30B                             db 120,120,120,123,123,61,30,0,31,0,15,15,15,15,7,3,30,30,30,222,222,188,120,0,232,0,208,208,208,208,160,64
    2314   00:A30B  78 78 78 7B 7B 3D 1E 00 1F 00 0F 0F 0F 0F 07 03 
    2314   00:A31B  1E 1E 1E DE DE BC 78 00 E8 00 D0 D0 D0 D0 A0 40 
    2315   00:A32B                             db 30,30,30,30,30,30,14,0,31,0,15,15,15,15,7,3,120,120,56,216,216,184,112,0,232,0,208,208,208,208,160,64
    2315   00:A32B  1E 1E 1E 1E 1E 1E 0E 00 1F 00 0F 0F 0F 0F 07 03 
    2315   00:A33B  78 78 38 D8 D8 B8 70 00 E8 00 D0 D0 D0 D0 A0 40 
    2316   00:A34B                             db 3,3,3,3,3,3,3,0,31,0,15,15,15,15,7,3,192,192,192,192,192,192,192,0,232,0,208,208,208,208,160,64
    2316   00:A34B  03 03 03 03 03 03 03 00 1F 00 0F 0F 0F 0F 07 03 
    2316   00:A35B  C0 C0 C0 C0 C0 C0 C0 00 E8 00 D0 D0 D0 D0 A0 40 
    2317   00:A36B                             db 30,30,28,27,27,29,14,0,31,0,15,15,15,15,7,3,120,120,120,120,120,120,112,0,232,0,208,208,208,208,160,64
    2317   00:A36B  1E 1E 1C 1B 1B 1D 0E 00 1F 00 0F 0F 0F 0F 07 03 
    2317   00:A37B  78 78 78 78 78 78 70 00 E8 00 D0 D0 D0 D0 A0 40 
    2318   00:A38B                             db 16,48,81,83,240,240,157,144,240,113,85,51,18,0,0,0,0,248,116,240,0,96,224,96,224,192,128,0,0,0,0,0
    2318   00:A38B  10 30 51 53 F0 F0 9D 90 F0 71 55 33 12 00 00 00 
    2318   00:A39B  00 F8 74 F0 00 60 E0 60 E0 C0 80 00 00 00 00 00 
    2319   00:A3AB                             db 16,48,81,83,240,240,157,144,240,113,85,51,18,0,0,0,0,244,120,240,0,96,224,96,224,192,128,0,0,0,0,0
    2319   00:A3AB  10 30 51 53 F0 F0 9D 90 F0 71 55 33 12 00 00 00 
    2319   00:A3BB  00 F4 78 F0 00 60 E0 60 E0 C0 80 00 00 00 00 00 
    2320   00:A3CB                             db 16,48,81,83,240,240,157,144,240,113,85,51,18,0,0,0,0,240,112,252,0,96,224,96,224,192,128,0,0,0,0,0
    2320   00:A3CB  10 30 51 53 F0 F0 9D 90 F0 71 55 33 12 00 00 00 
    2320   00:A3DB  00 F0 70 FC 00 60 E0 60 E0 C0 80 00 00 00 00 00 
    2321   00:A3EB                             db 16,48,81,83,240,240,157,144,240,113,85,51,18,0,0,0,0,240,124,240,0,96,224,96,224,192,128,0,0,0,0,0
    2321   00:A3EB  10 30 51 53 F0 F0 9D 90 F0 71 55 33 12 00 00 00 
    2321   00:A3FB  00 F0 7C F0 00 60 E0 60 E0 C0 80 00 00 00 00 00 
    2322   00:A40B                             db 7,9,11,14,8,70,225,90,55,7,3,12,223,238,80,56,224,176,144,112,16,98,135,90,236,224,192,48,251,119,10,28
    2322   00:A40B  07 09 0B 0E 08 46 E1 5A 37 07 03 0C DF EE 50 38 
    2322   00:A41B  E0 B0 90 70 10 62 87 5A EC E0 C0 30 FB 77 0A 1C 
    2323   00:A42B                             db 7,9,11,14,8,6,1,90,247,75,3,4,15,14,112,62,224,144,208,112,16,98,135,90,236,224,195,59,251,119,2,0
    2323   00:A42B  07 09 0B 0E 08 06 01 5A F7 4B 03 04 0F 0E 70 3E 
    2323   00:A43B  E0 90 D0 70 10 62 87 5A EC E0 C3 3B FB 77 02 00 
    2324   00:A44B                             db 7,9,13,15,8,71,225,90,55,7,3,12,223,238,80,56,224,176,144,240,16,226,135,90,236,224,192,48,251,119,10,28
    2324   00:A44B  07 09 0D 0F 08 47 E1 5A 37 07 03 0C DF EE 50 38 
    2324   00:A45B  E0 B0 90 F0 10 E2 87 5A EC E0 C0 30 FB 77 0A 1C 
    2325   00:A46B                             db 7,9,13,15,8,70,225,90,55,7,131,204,223,238,0,0,224,144,176,240,16,96,128,90,239,242,192,32,240,118,14,62
    2325   00:A46B  07 09 0D 0F 08 46 E1 5A 37 07 83 CC DF EE 00 00 
    2325   00:A47B  E0 90 B0 F0 10 60 80 5A EF F2 C0 20 F0 76 0E 3E 
    2326   00:A48B                             db 0,0,0,1,0,1,2,7,0,3,4,11,0,0,0,0,0,0,16,239,16,208,208,216,24,216,24,224,0,216,48,96
    2326   00:A48B  00 00 00 01 00 01 02 07 00 03 04 0B 00 00 00 00 
    2326   00:A49B  00 00 10 EF 10 D0 D0 D8 18 D8 18 E0 00 D8 30 60 
    2327   00:A4AB                             db 0,0,0,0,0,1,2,7,0,3,4,11,0,0,0,0,0,0,16,108,16,208,208,216,24,216,24,224,0,216,24,48
    2327   00:A4AB  00 00 00 00 00 01 02 07 00 03 04 0B 00 00 00 00 
    2327   00:A4BB  00 00 10 6C 10 D0 D0 D8 18 D8 18 E0 00 D8 18 30 
    2328   00:A4CB                             db 0,0,0,0,0,1,2,7,0,3,4,11,0,0,0,0,0,0,16,16,16,208,208,216,24,216,24,224,0,216,28,8
    2328   00:A4CB  00 00 00 00 00 01 02 07 00 03 04 0B 00 00 00 00 
    2328   00:A4DB  00 00 10 10 10 D0 D0 D8 18 D8 18 E0 00 D8 1C 08 
    2329   00:A4EB                             db 0,0,0,0,0,1,2,7,0,3,4,11,0,0,0,0,0,0,16,108,16,208,208,216,24,216,24,224,0,216,24,48
    2329   00:A4EB  00 00 00 00 00 01 02 07 00 03 04 0B 00 00 00 00 
    2329   00:A4FB  00 00 10 6C 10 D0 D0 D8 18 D8 18 E0 00 D8 18 30 
    2330   00:A50B  (00:A50B)           frmlst equ $
    2331   00:A50B  00 01                      db 0,1
    2332   00:A50D  01 01                      db 1,1
    2333   00:A50F  02 01                      db 2,1
    2334   00:A511  03 01                      db 3,1
    2335   00:A513  04 01                      db 4,1
    2336   00:A515  05 04                      db 5,4
    2337   00:A517  09 04                      db 9,4
    2338   00:A519  0D 04                      db 13,4
    2339   00:A51B  11 04                      db 17,4
    2340   00:A51D  15 04                      db 21,4
    2341   00:A51F  19 04                      db 25,4
    2342   00:A521  1D 04                      db 29,4
    2343   00:A523  21 04                      db 33,4
    2344   00:A525  25 04                      db 37,4
    2345   00:A527  29 04                      db 41,4
    2346   00:A529  2D 04                      db 45,4
    2347   00:A52B  31 04                      db 49,4
    2348   00:A52D  35 04 39 00                db 53,4,57,0
    2349   00:A531                      nmedat db 0,0,15,16,16,1,5,15,80,16,8,6,15,136,16,255
    2349   00:A531  00 00 0F 10 10 01 05 0F 50 10 08 06 0F 88 10 FF 
    2350   00:A541                             db 0,0,15,16,16,2,5,15,40,120,1,5,15,120,24,8,6,15,96,136,255
    2350   00:A541  00 00 0F 10 10 02 05 0F 28 78 01 05 0F 78 18 08 
    2350   00:A551  06 0F 60 88 FF 
    2351   00:A556                             db 0,0,15,16,16,2,7,15,48,64,1,5,15,80,192,8,6,15,136,216,255
    2351   00:A556  00 00 0F 10 10 02 07 0F 30 40 01 05 0F 50 C0 08 
    2351   00:A566  06 0F 88 D8 FF 
    2352   00:A56B                             db 0,0,15,16,16,8,6,15,136,216,2,7,15,40,40,1,5,15,80,112,3,8,15,120,184,255
    2352   00:A56B  00 00 0F 10 10 08 06 0F 88 D8 02 07 0F 28 28 01 
    2352   00:A57B  05 0F 50 70 03 08 0F 78 B8 FF 
    2353   00:A585                             db 0,0,15,16,16,8,6,15,16,216,3,8,15,8,192,1,7,15,120,48,4,9,15,80,120,255
    2353   00:A585  00 00 0F 10 10 08 06 0F 10 D8 03 08 0F 08 C0 01 
    2353   00:A595  07 0F 78 30 04 09 0F 50 78 FF 
    2354   00:A59F                             db 0,0,15,16,16,8,6,15,16,96,5,10,15,24,120,1,11,15,128,104,255
    2354   00:A59F  00 00 0F 10 10 08 06 0F 10 60 05 0A 0F 18 78 01 
    2354   00:A5AF  0B 0F 80 68 FF 
    2355   00:A5B4                             db 0,0,15,16,16,8,6,15,136,216,3,8,15,8,208,1,11,15,120,80,5,12,15,48,120,255
    2355   00:A5B4  00 00 0F 10 10 08 06 0F 88 D8 03 08 0F 08 D0 01 
    2355   00:A5C4  0B 0F 78 50 05 0C 0F 30 78 FF 
    2356   00:A5CE                             db 0,0,15,16,16,8,6,15,136,216,5,13,15,8,120,5,13,15,56,80,255
    2356   00:A5CE  00 00 0F 10 10 08 06 0F 88 D8 05 0D 0F 08 78 05 
    2356   00:A5DE  0D 0F 38 50 FF 
    2357   00:A5E3                             db 0,0,15,16,16,4,8,15,8,232,3,8,15,128,112,1,5,15,40,96,8,6,15,16,176,255
    2357   00:A5E3  00 00 0F 10 10 04 08 0F 08 E8 03 08 0F 80 70 01 
    2357   00:A5F3  05 0F 28 60 08 06 0F 10 B0 FF 
    2358   00:A5FD                             db 0,0,15,16,16,7,6,15,136,216,5,13,15,48,80,6,7,15,120,16,5,10,15,72,160,255
    2358   00:A5FD  00 00 0F 10 10 07 06 0F 88 D8 05 0D 0F 30 50 06 
    2358   00:A60D  07 0F 78 10 05 0A 0F 48 A0 FF 
    2359   00:A617                             db 0,0,15,16,16,5,14,15,48,120,5,14,15,64,160,3,17,15,120,120,1,5,15,40,24,7,6,15,136,216,255
    2359   00:A617  00 00 0F 10 10 05 0E 0F 30 78 05 0E 0F 40 A0 03 
    2359   00:A627  11 0F 78 78 01 05 0F 28 18 07 06 0F 88 D8 FF 
    2360   00:A636                             db 0,0,15,16,16,5,10,15,16,160,7,6,15,136,216,4,15,15,88,144,255
    2360   00:A636  00 00 0F 10 10 05 0A 0F 10 A0 07 06 0F 88 D8 04 
    2360   00:A646  0F 0F 58 90 FF 
    2361   00:A64B                             db 0,0,15,16,16,5,13,15,16,120,1,5,15,80,104,3,8,15,88,184,7,6,15,136,176,255
    2361   00:A64B  00 00 0F 10 10 05 0D 0F 10 78 01 05 0F 50 68 03 
    2361   00:A65B  08 0F 58 B8 07 06 0F 88 B0 FF 
    2362   00:A665                             db 0,0,15,16,16,7,6,15,136,16,5,12,15,64,80,1,11,15,40,16,3,11,15,80,184,255
    2362   00:A665  00 00 0F 10 10 07 06 0F 88 10 05 0C 0F 40 50 01 
    2362   00:A675  0B 0F 28 10 03 0B 0F 50 B8 FF 
    2363   00:A67F                             db 0,0,15,16,16,7,6,15,136,224,5,10,15,48,80,3,17,15,128,160,4,8,15,40,120,255
    2363   00:A67F  00 00 0F 10 10 07 06 0F 88 E0 05 0A 0F 30 50 03 
    2363   00:A68F  11 0F 80 A0 04 08 0F 28 78 FF 
    2364   00:A699                             db 0,0,15,16,16,7,6,15,136,16,6,11,15,48,32,2,5,15,40,152,3,8,15,88,152,255
    2364   00:A699  00 00 0F 10 10 07 06 0F 88 10 06 0B 0F 30 20 02 
    2364   00:A6A9  05 0F 28 98 03 08 0F 58 98 FF 
    2365   00:A6B3                             db 0,0,15,16,16,7,6,15,136,216,6,11,15,48,72,5,14,15,16,120,6,7,15,128,152,3,17,15,80,144,255
    2365   00:A6B3  00 00 0F 10 10 07 06 0F 88 D8 06 0B 0F 30 48 05 
    2365   00:A6C3  0E 0F 10 78 06 07 0F 80 98 03 11 0F 50 90 FF 
    2366   00:A6D2                             db 0,0,15,16,16,7,6,15,136,144,3,17,15,40,160,1,7,15,88,40,3,17,15,120,64,255
    2366   00:A6D2  00 00 0F 10 10 07 06 0F 88 90 03 11 0F 28 A0 01 
    2366   00:A6E2  07 0F 58 28 03 11 0F 78 40 FF 
    2367   00:A6EC                             db 0,0,15,16,16,7,6,15,136,64,3,8,15,120,144,3,8,15,128,40,1,11,15,88,56,255
    2367   00:A6EC  00 00 0F 10 10 07 06 0F 88 40 03 08 0F 78 90 03 
    2367   00:A6FC  08 0F 80 28 01 0B 0F 58 38 FF 
    2368   00:A706                             db 0,0,15,16,16,3,8,15,48,200,2,5,15,40,40,3,9,15,80,120,7,6,15,136,24,3,17,15,128,152,3,11,15,128,72,255
    2368   00:A706  00 00 0F 10 10 03 08 0F 30 C8 02 05 0F 28 28 03 
    2368   00:A716  09 0F 50 78 07 06 0F 88 18 03 11 0F 80 98 03 0B 
    2368   00:A726  0F 80 48 FF 
    2369   00:A72A                             db 4,6,15,48,32,4,6,15,48,208,4,13,15,136,32,4,13,15,136,208,255,255
    2369   00:A72A  04 06 0F 30 20 04 06 0F 30 D0 04 0D 0F 88 20 04 
    2369   00:A73A  0D 0F 88 D0 FF FF 
    2370   00:A740  (00:0028)           NUMOBJ equ 40
    2371   00:A740  (00:A740)           objdta:	equ $
    2372   00:A740                             db 0,16,176,0,0,0,0,0,4,4,2,0,0,0,0,0,4,68,68,2,3,1,1,0,4,3,1,100,108,173,194,246,236,21,187,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2372   00:A740  00 10 B0 00 00 00 00 00 04 04 02 00 00 00 00 00 
    2372   00:A750  04 44 44 02 03 01 01 00 04 03 01 64 6C AD C2 F6 
    2372   00:A760  EC 15 BB F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2372   00:A770  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2372   00:A780  F1 F1 F1 
    2373   00:A783                             db 0,56,96,0,0,0,0,0,4,4,2,0,0,0,0,0,4,68,68,2,3,1,1,0,4,3,1,100,108,173,194,246,236,21,187,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2373   00:A783  00 38 60 00 00 00 00 00 04 04 02 00 00 00 00 00 
    2373   00:A793  04 44 44 02 03 01 01 00 04 03 01 64 6C AD C2 F6 
    2373   00:A7A3  EC 15 BB F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2373   00:A7B3  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2373   00:A7C3  F1 F1 F1 
    2374   00:A7C6                             db 0,96,136,0,0,0,0,0,4,4,2,0,0,0,0,0,4,68,68,2,3,1,1,0,4,3,1,100,108,173,194,246,236,21,187,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2374   00:A7C6  00 60 88 00 00 00 00 00 04 04 02 00 00 00 00 00 
    2374   00:A7D6  04 44 44 02 03 01 01 00 04 03 01 64 6C AD C2 F6 
    2374   00:A7E6  EC 15 BB F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2374   00:A7F6  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2374   00:A806  F1 F1 F1 
    2375   00:A809                             db 1,56,136,0,0,0,0,0,0,0,0,0,0,0,0,66,231,231,66,0,0,0,0,0,0,0,0,0,189,60,189,60,189,60,189,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2375   00:A809  01 38 88 00 00 00 00 00 00 00 00 00 00 00 00 42 
    2375   00:A819  E7 E7 42 00 00 00 00 00 00 00 00 00 BD 3C BD 3C 
    2375   00:A829  BD 3C BD F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2375   00:A839  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2375   00:A849  F1 F1 F1 
    2376   00:A84C                             db 1,96,96,0,0,0,0,0,0,0,0,0,0,0,0,66,231,231,66,0,0,0,0,0,0,0,0,0,189,60,189,60,189,60,189,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2376   00:A84C  01 60 60 00 00 00 00 00 00 00 00 00 00 00 00 42 
    2376   00:A85C  E7 E7 42 00 00 00 00 00 00 00 00 00 BD 3C BD 3C 
    2376   00:A86C  BD 3C BD F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2376   00:A87C  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2376   00:A88C  F1 F1 F1 
    2377   00:A88F                             db 1,136,136,0,0,0,0,0,0,0,0,0,0,0,0,66,231,231,66,0,0,0,0,0,0,0,0,0,189,60,189,60,189,60,189,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2377   00:A88F  01 88 88 00 00 00 00 00 00 00 00 00 00 00 00 42 
    2377   00:A89F  E7 E7 42 00 00 00 00 00 00 00 00 00 BD 3C BD 3C 
    2377   00:A8AF  BD 3C BD F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2377   00:A8BF  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2377   00:A8CF  F1 F1 F1 
    2378   00:A8D2                             db 2,16,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,16,16,84,84,68,40,41,170,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2378   00:A8D2  02 10 88 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2378   00:A8E2  00 00 00 00 00 00 00 00 00 01 00 10 10 54 54 44 
    2378   00:A8F2  28 29 AA F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2378   00:A902  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2378   00:A912  F1 F1 F1 
    2379   00:A915                             db 2,56,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,16,16,84,84,68,40,41,170,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2379   00:A915  02 38 38 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2379   00:A925  00 00 00 00 00 00 00 00 00 01 00 10 10 54 54 44 
    2379   00:A935  28 29 AA F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2379   00:A945  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2379   00:A955  F1 F1 F1 
    2380   00:A958                             db 2,136,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,16,16,84,84,68,40,41,170,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2380   00:A958  02 88 60 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2380   00:A968  00 00 00 00 00 00 00 00 00 01 00 10 10 54 54 44 
    2380   00:A978  28 29 AA F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2380   00:A988  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2380   00:A998  F1 F1 F1 
    2381   00:A99B                             db 3,16,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,130,68,40,146,85,186,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2381   00:A99B  03 10 60 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2381   00:A9AB  00 00 00 00 00 00 00 00 00 01 00 00 00 82 44 28 
    2381   00:A9BB  92 55 BA F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2381   00:A9CB  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2381   00:A9DB  F1 F1 F1 
    2382   00:A9DE                             db 3,96,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,130,68,40,146,85,186,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2382   00:A9DE  03 60 60 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2382   00:A9EE  00 00 00 00 00 00 00 00 00 01 00 00 00 82 44 28 
    2382   00:A9FE  92 55 BA F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2382   00:AA0E  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2382   00:AA1E  F1 F1 F1 
    2383   00:AA21                             db 3,136,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,130,68,40,146,85,186,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2383   00:AA21  03 88 60 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2383   00:AA31  00 00 00 00 00 00 00 00 00 01 00 00 00 82 44 28 
    2383   00:AA41  92 55 BA F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2383   00:AA51  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2383   00:AA61  F1 F1 F1 
    2384   00:AA64                             db 4,16,136,0,0,0,0,0,4,4,2,0,0,0,0,0,4,68,68,2,3,1,1,0,4,3,1,100,108,173,194,246,236,21,187,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2384   00:AA64  04 10 88 00 00 00 00 00 04 04 02 00 00 00 00 00 
    2384   00:AA74  04 44 44 02 03 01 01 00 04 03 01 64 6C AD C2 F6 
    2384   00:AA84  EC 15 BB F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2384   00:AA94  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2384   00:AAA4  F1 F1 F1 
    2385   00:AAA7                             db 4,56,96,0,0,0,0,0,4,4,2,0,0,0,0,0,4,68,68,2,3,1,1,0,4,3,1,100,108,173,194,246,236,21,187,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2385   00:AAA7  04 38 60 00 00 00 00 00 04 04 02 00 00 00 00 00 
    2385   00:AAB7  04 44 44 02 03 01 01 00 04 03 01 64 6C AD C2 F6 
    2385   00:AAC7  EC 15 BB F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2385   00:AAD7  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2385   00:AAE7  F1 F1 F1 
    2386   00:AAEA                             db 4,96,176,0,0,0,0,0,4,4,2,0,0,0,0,0,4,68,68,2,3,1,1,0,4,3,1,100,108,173,194,246,236,21,187,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2386   00:AAEA  04 60 B0 00 00 00 00 00 04 04 02 00 00 00 00 00 
    2386   00:AAFA  04 44 44 02 03 01 01 00 04 03 01 64 6C AD C2 F6 
    2386   00:AB0A  EC 15 BB F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2386   00:AB1A  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2386   00:AB2A  F1 F1 F1 
    2387   00:AB2D                             db 5,16,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,130,68,40,146,85,186,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2387   00:AB2D  05 10 38 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2387   00:AB3D  00 00 00 00 00 00 00 00 00 01 00 00 00 82 44 28 
    2387   00:AB4D  92 55 BA F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2387   00:AB5D  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2387   00:AB6D  F1 F1 F1 
    2388   00:AB70                             db 5,56,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,130,68,40,146,85,186,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2388   00:AB70  05 38 88 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2388   00:AB80  00 00 00 00 00 00 00 00 00 01 00 00 00 82 44 28 
    2388   00:AB90  92 55 BA F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2388   00:ABA0  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2388   00:ABB0  F1 F1 F1 
    2389   00:ABB3                             db 5,96,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,130,68,40,146,85,186,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2389   00:ABB3  05 60 88 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2389   00:ABC3  00 00 00 00 00 00 00 00 00 01 00 00 00 82 44 28 
    2389   00:ABD3  92 55 BA F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2389   00:ABE3  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2389   00:ABF3  F1 F1 F1 
    2390   00:ABF6                             db 6,56,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,56,56,56,56,186,215,238,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2390   00:ABF6  06 38 60 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2390   00:AC06  00 00 00 00 00 00 00 00 00 01 00 00 38 38 38 38 
    2390   00:AC16  BA D7 EE F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2390   00:AC26  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2390   00:AC36  F1 F1 F1 
    2391   00:AC39                             db 6,96,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,56,56,56,56,186,215,238,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2391   00:AC39  06 60 88 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2391   00:AC49  00 00 00 00 00 00 00 00 00 01 00 00 38 38 38 38 
    2391   00:AC59  BA D7 EE F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2391   00:AC69  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2391   00:AC79  F1 F1 F1 
    2392   00:AC7C                             db 6,136,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,56,56,56,56,186,215,238,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2392   00:AC7C  06 88 60 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2392   00:AC8C  00 00 00 00 00 00 00 00 00 01 00 00 38 38 38 38 
    2392   00:AC9C  BA D7 EE F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2392   00:ACAC  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2392   00:ACBC  F1 F1 F1 
    2393   00:ACBF                             db 7,16,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,73,73,127,54,62,20,42,28,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2393   00:ACBF  07 10 60 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2393   00:ACCF  00 00 3E 00 00 00 00 00 00 00 00 49 49 7F 36 3E 
    2393   00:ACDF  14 2A 1C F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2393   00:ACEF  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2393   00:ACFF  F1 F1 F1 
    2394   00:AD02                             db 7,96,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,73,73,127,54,62,20,42,28,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2394   00:AD02  07 60 60 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2394   00:AD12  00 00 3E 00 00 00 00 00 00 00 00 49 49 7F 36 3E 
    2394   00:AD22  14 2A 1C F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2394   00:AD32  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2394   00:AD42  F1 F1 F1 
    2395   00:AD45                             db 7,136,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,73,73,127,54,62,20,42,28,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2395   00:AD45  07 88 88 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2395   00:AD55  00 00 3E 00 00 00 00 00 00 00 00 49 49 7F 36 3E 
    2395   00:AD65  14 2A 1C F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2395   00:AD75  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2395   00:AD85  F1 F1 F1 
    2396   00:AD88                             db 8,16,136,0,0,0,0,0,4,4,2,0,0,0,0,0,4,68,68,2,3,1,1,0,4,3,1,100,108,173,194,246,236,21,187,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2396   00:AD88  08 10 88 00 00 00 00 00 04 04 02 00 00 00 00 00 
    2396   00:AD98  04 44 44 02 03 01 01 00 04 03 01 64 6C AD C2 F6 
    2396   00:ADA8  EC 15 BB F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2396   00:ADB8  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2396   00:ADC8  F1 F1 F1 
    2397   00:ADCB                             db 8,56,136,0,0,0,0,0,4,4,2,0,0,0,0,0,4,68,68,2,3,1,1,0,4,3,1,100,108,173,194,246,236,21,187,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2397   00:ADCB  08 38 88 00 00 00 00 00 04 04 02 00 00 00 00 00 
    2397   00:ADDB  04 44 44 02 03 01 01 00 04 03 01 64 6C AD C2 F6 
    2397   00:ADEB  EC 15 BB F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2397   00:ADFB  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2397   00:AE0B  F1 F1 F1 
    2398   00:AE0E                             db 8,96,96,0,0,0,0,0,4,4,2,0,0,0,0,0,4,68,68,2,3,1,1,0,4,3,1,100,108,173,194,246,236,21,187,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2398   00:AE0E  08 60 60 00 00 00 00 00 04 04 02 00 00 00 00 00 
    2398   00:AE1E  04 44 44 02 03 01 01 00 04 03 01 64 6C AD C2 F6 
    2398   00:AE2E  EC 15 BB F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2398   00:AE3E  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2398   00:AE4E  F1 F1 F1 
    2399   00:AE51                             db 9,16,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,16,16,84,84,68,40,41,170,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2399   00:AE51  09 10 88 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2399   00:AE61  00 00 00 00 00 00 00 00 00 01 00 10 10 54 54 44 
    2399   00:AE71  28 29 AA F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2399   00:AE81  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2399   00:AE91  F1 F1 F1 
    2400   00:AE94                             db 9,96,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,16,16,84,84,68,40,41,170,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2400   00:AE94  09 60 60 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2400   00:AEA4  00 00 00 00 00 00 00 00 00 01 00 10 10 54 54 44 
    2400   00:AEB4  28 29 AA F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2400   00:AEC4  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2400   00:AED4  F1 F1 F1 
    2401   00:AED7                             db 10,136,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,130,68,40,146,85,186,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2401   00:AED7  0A 88 60 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2401   00:AEE7  00 00 00 00 00 00 00 00 00 01 00 00 00 82 44 28 
    2401   00:AEF7  92 55 BA F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2401   00:AF07  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2401   00:AF17  F1 F1 F1 
    2402   00:AF1A                             db 10,136,96,0,0,0,0,0,4,4,2,0,0,0,0,0,4,68,68,2,3,1,1,0,4,3,1,100,108,173,194,246,236,21,187,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2402   00:AF1A  0A 88 60 00 00 00 00 00 04 04 02 00 00 00 00 00 
    2402   00:AF2A  04 44 44 02 03 01 01 00 04 03 01 64 6C AD C2 F6 
    2402   00:AF3A  EC 15 BB F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2402   00:AF4A  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2402   00:AF5A  F1 F1 F1 
    2403   00:AF5D                             db 12,56,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2403   00:AF5D  0C 38 38 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2403   00:AF6D  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2403   00:AF7D  00 00 22 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2403   00:AF8D  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2403   00:AF9D  F1 F1 F1 
    2404   00:AFA0                             db 12,136,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2404   00:AFA0  0C 88 88 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2404   00:AFB0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2404   00:AFC0  00 00 22 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2404   00:AFD0  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2404   00:AFE0  F1 F1 F1 
    2405   00:AFE3                             db 13,136,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2405   00:AFE3  0D 88 88 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2405   00:AFF3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2405   00:B003  00 00 22 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2405   00:B013  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2405   00:B023  F1 F1 F1 
    2406   00:B026                             db 14,96,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2406   00:B026  0E 60 60 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2406   00:B036  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2406   00:B046  00 00 22 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2406   00:B056  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2406   00:B066  F1 F1 F1 
    2407   00:B069                             db 14,96,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2407   00:B069  0E 60 88 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2407   00:B079  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2407   00:B089  00 00 22 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2407   00:B099  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2407   00:B0A9  F1 F1 F1 
    2408   00:B0AC                             db 15,16,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2408   00:B0AC  0F 10 88 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2408   00:B0BC  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2408   00:B0CC  00 00 22 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2408   00:B0DC  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2408   00:B0EC  F1 F1 F1 
    2409   00:B0EF                             db 15,96,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2409   00:B0EF  0F 60 60 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2409   00:B0FF  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2409   00:B10F  00 00 22 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2409   00:B11F  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2409   00:B12F  F1 F1 F1 
    2410   00:B132                             db 15,136,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2410   00:B132  0F 88 88 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2410   00:B142  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2410   00:B152  00 00 22 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2410   00:B162  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2410   00:B172  F1 F1 F1 
    2411   00:B175                             db 16,96,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241
    2411   00:B175  10 60 10 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2411   00:B185  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
    2411   00:B195  00 00 22 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2411   00:B1A5  F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 F1 
    2411   00:B1B5  F1 F1 F1 
    2412   00:B1B8  (00:B1B8)           palett:	equ $
    2413   00:B1B8                             defw $0,$0,$611,$733,$117,$327,$151,$627,$171,$373,$661,$664,$411,$265,$555,$777
    2413   00:B1B8  00 00 00 00 11 06 33 07 17 01 27 03 51 01 27 06 
    2413   00:B1C8  71 01 73 03 61 06 64 06 11 04 65 02 55 05 77 07 
    2414   00:B1D8  (00:B1D8)           font:	equ $
    2415   00:B1D8                             db 0,0,0,0,0,0,0,0
    2415   00:B1D8  00 00 00 00 00 00 00 00 
    2416   00:B1E0                             db 0,48,48,48,48,0,48,0
    2416   00:B1E0  00 30 30 30 30 00 30 00 
    2417   00:B1E8                             db 0,108,108,0,0,0,0,0
    2417   00:B1E8  00 6C 6C 00 00 00 00 00 
    2418   00:B1F0                             db 0,108,254,108,108,254,108,0
    2418   00:B1F0  00 6C FE 6C 6C FE 6C 00 
    2419   00:B1F8                             db 0,24,126,120,126,30,126,24
    2419   00:B1F8  00 18 7E 78 7E 1E 7E 18 
    2420   00:B200                             db 0,230,236,24,48,110,206,0
    2420   00:B200  00 E6 EC 18 30 6E CE 00 
    2421   00:B208                             db 0,48,120,48,126,204,126,0
    2421   00:B208  00 30 78 30 7E CC 7E 00 
    2422   00:B210                             db 0,24,48,0,0,0,0,0
    2422   00:B210  00 18 30 00 00 00 00 00 
    2423   00:B218                             db 0,12,24,24,24,24,12,0
    2423   00:B218  00 0C 18 18 18 18 0C 00 
    2424   00:B220                             db 0,96,48,48,48,48,96,0
    2424   00:B220  00 60 30 30 30 30 60 00 
    2425   00:B228                             db 0,0,60,24,126,24,60,0
    2425   00:B228  00 00 3C 18 7E 18 3C 00 
    2426   00:B230                             db 0,0,24,24,126,24,24,0
    2426   00:B230  00 00 18 18 7E 18 18 00 
    2427   00:B238                             db 0,0,0,0,0,24,24,48
    2427   00:B238  00 00 00 00 00 18 18 30 
    2428   00:B240                             db 0,0,0,24,36,24,0,0
    2428   00:B240  00 00 00 18 24 18 00 00 
    2429   00:B248                             db 0,0,0,0,0,56,56,0
    2429   00:B248  00 00 00 00 00 38 38 00 
    2430   00:B250                             db 0,0,6,12,24,48,96,0
    2430   00:B250  00 00 06 0C 18 30 60 00 
    2431   00:B258                             db 0,124,238,238,238,238,124,0
    2431   00:B258  00 7C EE EE EE EE 7C 00 
    2432   00:B260                             db 0,56,60,28,28,126,126,0
    2432   00:B260  00 38 3C 1C 1C 7E 7E 00 
    2433   00:B268                             db 0,124,254,30,248,246,254,0
    2433   00:B268  00 7C FE 1E F8 F6 FE 00 
    2434   00:B270                             db 0,124,222,60,30,254,124,0
    2434   00:B270  00 7C DE 3C 1E FE 7C 00 
    2435   00:B278                             db 0,28,60,124,220,254,60,0
    2435   00:B278  00 1C 3C 7C DC FE 3C 00 
    2436   00:B280                             db 0,254,246,248,62,222,124,0
    2436   00:B280  00 FE F6 F8 3E DE 7C 00 
    2437   00:B288                             db 0,124,236,242,254,238,124,0
    2437   00:B288  00 7C EC F2 FE EE 7C 00 
    2438   00:B290                             db 0,254,254,14,60,120,120,0
    2438   00:B290  00 FE FE 0E 3C 78 78 00 
    2439   00:B298                             db 0,124,238,124,238,238,124,0
    2439   00:B298  00 7C EE 7C EE EE 7C 00 
    2440   00:B2A0                             db 0,124,254,246,222,62,124,0
    2440   00:B2A0  00 7C FE F6 DE 3E 7C 00 
    2441   00:B2A8                             db 0,0,48,48,0,48,48,0
    2441   00:B2A8  00 00 30 30 00 30 30 00 
    2442   00:B2B0                             db 0,124,130,186,162,186,130,124
    2442   00:B2B0  00 7C 82 BA A2 BA 82 7C 
    2443   00:B2B8                             db 0,0,12,24,48,24,12,0
    2443   00:B2B8  00 00 0C 18 30 18 0C 00 
    2444   00:B2C0                             db 0,0,0,126,0,126,0,0
    2444   00:B2C0  00 00 00 7E 00 7E 00 00 
    2445   00:B2C8                             db 0,0,48,24,12,24,48,0
    2445   00:B2C8  00 00 30 18 0C 18 30 00 
    2446   00:B2D0                             db 0,124,198,12,24,0,24,0
    2446   00:B2D0  00 7C C6 0C 18 00 18 00 
    2447   00:B2D8                             db 0,124,222,254,254,192,124,0
    2447   00:B2D8  00 7C DE FE FE C0 7C 00 
    2448   00:B2E0                             db 0,124,238,254,238,238,108,0
    2448   00:B2E0  00 7C EE FE EE EE 6C 00 
    2449   00:B2E8                             db 0,124,238,252,238,254,124,0
    2449   00:B2E8  00 7C EE FC EE FE 7C 00 
    2450   00:B2F0                             db 0,124,254,224,254,254,124,0
    2450   00:B2F0  00 7C FE E0 FE FE 7C 00 
    2451   00:B2F8                             db 0,252,238,238,254,254,252,0
    2451   00:B2F8  00 FC EE EE FE FE FC 00 
    2452   00:B300                             db 0,126,240,252,240,254,126,0
    2452   00:B300  00 7E F0 FC F0 FE 7E 00 
    2453   00:B308                             db 0,126,240,252,240,240,240,0
    2453   00:B308  00 7E F0 FC F0 F0 F0 00 
    2454   00:B310                             db 0,124,254,240,238,246,124,0
    2454   00:B310  00 7C FE F0 EE F6 7C 00 
    2455   00:B318                             db 0,238,238,254,254,238,238,0
    2455   00:B318  00 EE EE FE FE EE EE 00 
    2456   00:B320                             db 0,126,126,60,60,126,126,0
    2456   00:B320  00 7E 7E 3C 3C 7E 7E 00 
    2457   00:B328                             db 0,30,30,30,222,254,124,0
    2457   00:B328  00 1E 1E 1E DE FE 7C 00 
    2458   00:B330                             db 0,238,252,248,248,252,238,0
    2458   00:B330  00 EE FC F8 F8 FC EE 00 
    2459   00:B338                             db 0,112,240,240,252,254,126,0
    2459   00:B338  00 70 F0 F0 FC FE 7E 00 
    2460   00:B340                             db 0,214,254,254,238,238,238,0
    2460   00:B340  00 D6 FE FE EE EE EE 00 
    2461   00:B348                             db 0,206,238,254,254,238,230,0
    2461   00:B348  00 CE EE FE FE EE E6 00 
    2462   00:B350                             db 0,124,254,238,238,254,124,0
    2462   00:B350  00 7C FE EE EE FE 7C 00 
    2463   00:B358                             db 0,252,238,238,252,240,240,0
    2463   00:B358  00 FC EE EE FC F0 F0 00 
    2464   00:B360                             db 0,124,254,254,238,242,124,0
    2464   00:B360  00 7C FE FE EE F2 7C 00 
    2465   00:B368                             db 0,252,254,238,252,238,238,0
    2465   00:B368  00 FC FE EE FC EE EE 00 
    2466   00:B370                             db 0,124,240,252,30,254,124,0
    2466   00:B370  00 7C F0 FC 1E FE 7C 00 
    2467   00:B378                             db 0,254,254,56,124,124,124,0
    2467   00:B378  00 FE FE 38 7C 7C 7C 00 
    2468   00:B380                             db 0,238,238,238,238,254,124,0
    2468   00:B380  00 EE EE EE EE FE 7C 00 
    2469   00:B388                             db 0,238,238,238,238,124,56,0
    2469   00:B388  00 EE EE EE EE 7C 38 00 
    2470   00:B390                             db 0,238,238,238,254,254,108,0
    2470   00:B390  00 EE EE EE FE FE 6C 00 
    2471   00:B398                             db 0,238,254,124,254,254,238,0
    2471   00:B398  00 EE FE 7C FE FE EE 00 
    2472   00:B3A0                             db 0,238,238,254,62,254,252,0
    2472   00:B3A0  00 EE EE FE 3E FE FC 00 
    2473   00:B3A8                             db 0,254,254,184,118,254,254,0
    2473   00:B3A8  00 FE FE B8 76 FE FE 00 
    2474   00:B3B0                             db 0,30,24,24,24,24,30,0
    2474   00:B3B0  00 1E 18 18 18 18 1E 00 
    2475   00:B3B8                             db 0,0,192,96,48,24,12,0
    2475   00:B3B8  00 00 C0 60 30 18 0C 00 
    2476   00:B3C0                             db 0,240,48,48,48,48,240,0
    2476   00:B3C0  00 F0 30 30 30 30 F0 00 
    2477   00:B3C8                             db 0,48,120,252,48,48,48,0
    2477   00:B3C8  00 30 78 FC 30 30 30 00 
    2478   00:B3D0                             db 0,0,0,0,0,0,0,255
    2478   00:B3D0  00 00 00 00 00 00 00 FF 
    2479   00:B3D8                             db 0,60,102,248,96,96,254,0
    2479   00:B3D8  00 3C 66 F8 60 60 FE 00 
    2480   00:B3E0                             db 0,0,120,12,124,204,124,0
    2480   00:B3E0  00 00 78 0C 7C CC 7C 00 
    2481   00:B3E8                             db 0,96,96,124,102,102,124,0
    2481   00:B3E8  00 60 60 7C 66 66 7C 00 
    2482   00:B3F0                             db 0,0,60,96,96,96,60,0
    2482   00:B3F0  00 00 3C 60 60 60 3C 00 
    2483   00:B3F8                             db 0,12,12,124,204,204,124,0
    2483   00:B3F8  00 0C 0C 7C CC CC 7C 00 
    2484   00:B400                             db 0,0,120,204,248,192,124,0
    2484   00:B400  00 00 78 CC F8 C0 7C 00 
    2485   00:B408                             db 0,28,48,56,48,48,48,0
    2485   00:B408  00 1C 30 38 30 30 30 00 
    2486   00:B410                             db 0,0,124,204,204,124,12,120
    2486   00:B410  00 00 7C CC CC 7C 0C 78 
    2487   00:B418                             db 0,192,192,248,204,204,204,0
    2487   00:B418  00 C0 C0 F8 CC CC CC 00 
    2488   00:B420                             db 0,48,0,112,48,48,120,0
    2488   00:B420  00 30 00 70 30 30 78 00 
    2489   00:B428                             db 0,12,0,12,12,12,108,56
    2489   00:B428  00 0C 00 0C 0C 0C 6C 38 
    2490   00:B430                             db 0,96,120,112,112,120,108,0
    2490   00:B430  00 60 78 70 70 78 6C 00 
    2491   00:B438                             db 0,48,48,48,48,48,28,0
    2491   00:B438  00 30 30 30 30 30 1C 00 
    2492   00:B440                             db 0,0,248,252,252,252,252,0
    2492   00:B440  00 00 F8 FC FC FC FC 00 
    2493   00:B448                             db 0,0,248,204,204,204,204,0
    2493   00:B448  00 00 F8 CC CC CC CC 00 
    2494   00:B450                             db 0,0,120,204,204,204,120,0
    2494   00:B450  00 00 78 CC CC CC 78 00 
    2495   00:B458                             db 0,0,248,204,204,248,192,192
    2495   00:B458  00 00 F8 CC CC F8 C0 C0 
    2496   00:B460                             db 0,0,124,204,204,124,12,14
    2496   00:B460  00 00 7C CC CC 7C 0C 0E 
    2497   00:B468                             db 0,0,60,96,96,96,96,0
    2497   00:B468  00 00 3C 60 60 60 60 00 
    2498   00:B470                             db 0,0,120,192,120,12,248,0
    2498   00:B470  00 00 78 C0 78 0C F8 00 
    2499   00:B478                             db 0,48,120,48,48,48,28,0
    2499   00:B478  00 30 78 30 30 30 1C 00 
    2500   00:B480                             db 0,0,204,204,204,204,120,0
    2500   00:B480  00 00 CC CC CC CC 78 00 
    2501   00:B488                             db 0,0,204,204,120,120,48,0
    2501   00:B488  00 00 CC CC 78 78 30 00 
    2502   00:B490                             db 0,0,204,252,252,252,120,0
    2502   00:B490  00 00 CC FC FC FC 78 00 
    2503   00:B498                             db 0,0,204,120,48,120,204,0
    2503   00:B498  00 00 CC 78 30 78 CC 00 
    2504   00:B4A0                             db 0,0,204,204,204,124,12,120
    2504   00:B4A0  00 00 CC CC CC 7C 0C 78 
    2505   00:B4A8                             db 0,0,252,24,48,96,252,0
    2505   00:B4A8  00 00 FC 18 30 60 FC 00 
    2506   00:B4B0                             db 0,30,24,112,24,24,30,0
    2506   00:B4B0  00 1E 18 70 18 18 1E 00 
    2507   00:B4B8                             db 0,24,24,24,24,24,24,0
    2507   00:B4B8  00 18 18 18 18 18 18 00 
    2508   00:B4C0                             db 0,240,48,28,48,48,240,0
    2508   00:B4C0  00 F0 30 1C 30 30 F0 00 
    2509   00:B4C8                             db 0,60,120,0,0,0,0,0
    2509   00:B4C8  00 3C 78 00 00 00 00 00 
    2510   00:B4D0                             db 124,198,187,227,227,187,198,124
    2510   00:B4D0  7C C6 BB E3 E3 BB C6 7C 
    2511   00:B4D8                      jtab:	
    2512   00:B4D8  63                         db 99
    2513   00:B4D9                      keytab:	defw $609,$607,$600,$605,$240,$540,$60B,$601,$602,$603,$60A; Game engine code --------------------------------------------------------------
    2513   00:B4D9  09 06 07 06 00 06 05 06 40 02 40 05 0B 06 01 06 
    2513   00:B4E9  02 06 03 06 0A 06 
    2514   00:B4EF                      
    2515   00:B4EF                      ; DEFINE DEBUG
    2516   00:B4EF                      ; DEFINE FASTVRAMDUMP
    2517   00:B4EF                      
    2518   00:B4EF                      ; Arcade Game Designer.
    2519   00:B4EF                      ; (C) 2008 - 2018 Jonathan Cauldwell.
    2520   00:B4EF                      ; MSX version (C) jltursan
    2521   00:B4EF                      ; Based on ZX Spectrum Engine v0.7.4
    2522   00:B4EF                      ;
    2523   00:B4EF                      ; Notes about Music & SFX engine
    2524   00:B4EF                      ; From the EngineMSX itself, 5 routines are being called right now:
    2525   00:B4EF                      ;
    2526   00:B4EF                      ; * music_init => initializes the music engine. If your engine doesn't needs this, use ret to do nothing
    2527   00:B4EF                      ; * music_play => plays a music frame from the ISR. The idea is to set a buffer with all the PSG register ready to dump
    2528   00:B4EF                      ; but also must implement:
    2529   00:B4EF                      ; * music_loopoff
    2530   00:B4EF                      ; * music_loopon
    2531   00:B4EF                      ; * music_set
    2532   00:B4EF                      ; * music_mute
    2533   00:B4EF                      ; * sfx_init => initializes the sfx engine. Idem
    2534   00:B4EF                      ; * sfx_play => plays a sfx frame from the ISR. Idem
    2535   00:B4EF                      ; * psgrout => generic routine to dump all PSG registers
    2536   00:B4EF                      ;
    2537   00:B4EF                      ; Fixed: Now evnt18 (game completed) doesn't disables sprites at all; so you can use the sprites in an ending scene (if you need to hide them, use now SPRITESOFF)
    2538   00:B4EF                      ; Added: Due the change in evnt18, a new command SPRITESOFF has been added to the compiler, it hides all sprites by setting 208 Y-coord to sprite 0
    2539   00:B4EF                      ; Fixed: CLS & CLW routines now erase scrmap buffer and also disable sprites (Thanks to FX).
    2540   00:B4EF                      ; Fixed: ROM stack initialization bug in MSX machines with drives (specially TR)
    2541   00:B4EF                      ;
    2542   00:B4EF                      ; Fixed: Sprite flicker bug (MSX freezes) due a byte boundary overrun. Table colltab must not cross a byte boundary to avoid this.
    2543   00:B4EF                      ; Added: Some cycles saved in plot pixel routine
    2544   00:B4EF                      ; Added: New command CRUMBLE
    2545   00:B4EF                      ; Fixed: Keyboard scanning back to 50fps to fix some positioning problems when controlling characters
    2546   00:B4EF                      ; Fixed: PSG initialization bug filling registers with illegal values
    2547   00:B4EF                      ; Fixed: Some optimization to the ayFX replayer routine
    2548   00:B4EF                      ; Fixed: PSG wrong reset sound when multichannel mode active (FX_MODE=1)  
    2549   00:B4EF                      ; Fixed: Serious bug in the PSG dumping routine (PT3 specially affected)
    2550   00:B4EF                      ; Added: Support for Metablocks (2x2 characters map blocks)
    2551   00:B4EF                      ; Fixed: UNDOSPRITEMOVE support
    2552   00:B4EF                      ; Fixed: Sometimes player sprite was not initialized correctly when changing screen 
    2553   00:B4EF                      ; Added: New command SPRITESOFF
    2554   00:B4EF                      ; Fixed: RAM/ROM slot routines changed to a more compatible ones (Thanks JAM!)
    2555   00:B4EF                      ; Added: Support of forced PAL/NTSC TV modes
    2556   00:B4EF                      ; Added: PAL/NTSC modes swappable with hotkey (SELECT)
    2557   00:B4EF                      ; Added: New command THRUST
    2558   00:B4EF                      ; Added: LZ compression (Pletter) instead RLE for map screens
    2559   00:B4EF                      ; Added: New command SCREENON
    2560   00:B4EF                      ; Added: New command SCREENOFF
    2561   00:B4EF                      
    2562   00:B4EF                      ;
    2563   00:B4EF                      ; Core rotuines
    2564   00:B4EF                      ; ----------------------------------
    2565   00:B4EF                      ; ptxt => core routine that prints a font character (no color)
    2566   00:B4EF                      ; pchr => core routine that prints a BLOCK (pattern+color)
    2567   00:B4EF                      
    2568   00:B4EF                      /*
    2569   00:B4EF                    ~ MEANING OF FLAGS
    2570   00:B4EF                    ~ =========================================
    2571   00:B4EF                    ~ 
    2572   00:B4EF                    ~ AFLAG	: Adventure mode
    2573   00:B4EF                    ~ CFLAG	: Collectables
    2574   00:B4EF                    ~ CRFLAG	: Crumbling blocks
    2575   00:B4EF                    ~ DFLAG	: Digging
    2576   00:B4EF                    ~ EFLAG	: Beeper
    2577   00:B4EF                    ~ HCFLAG	: Hardware collisions disabled
    2578   00:B4EF                    ~ LFLAG	: Ladders
    2579   00:B4EF                    ~ MFLAG	: Menu/Inventory
    2580   00:B4EF                    ~ MBFLAG	: MetaBlocks
    2581   00:B4EF                    ~ RTFLAG	: Thrust for rotational control
    2582   00:B4EF                    ~ OFLAG	: Objects
    2583   00:B4EF                    ~ PFLAG	: Particles
    2584   00:B4EF                    ~ QFLAG	: Marquee
    2585   00:B4EF                    ~ SFLAG	: Scrolling
    2586   00:B4EF                    ~ TVFREQ	: Force 50Hz(50)/60Hz(60). Only for MSX2 or higher models
    2587   00:B4EF                    ~ UFLAG	: User routines 
    2588   00:B4EF                    ~ XFLAG	: PSG SFX
    2589   00:B4EF                    ~ YFLAG	: PSG Music
    2590   00:B4EF                    ~ FX_RELATIVE : Relative SFX volume
    2591   00:B4EF                    ~ FX_MODE 	: SFX replayer mode
    2592   00:B4EF                    ~ FX_CHANNEL	: Fixed SFX channel (if FX_MODE=0, 1 = C, 2 = B, 3 = A)
    2593   00:B4EF                    ~ */
    2594   00:B4EF                      
    2595   00:B4EF                      ; Distribution types
    2596   00:B4EF                      
    2597   00:B4EF  (00:0000)           ROM=0
    2598   00:B4EF  (00:0001)           DISK=1
    2599   00:B4EF  (00:0002)           TAPE=2
    2600   00:B4EF                      
    2601   00:B4EF                      ; TV modes
    2602   00:B4EF                      
    2603   00:B4EF  (00:0001)           PAL=1
    2604   00:B4EF  (00:0002)           NTSC=2
    2605   00:B4EF                      
    2606   00:B4EF                      ; MSX machines characteristics
    2607   00:B4EF  (00:0018)           MSX_MAXROWS	equ 24
    2608   00:B4EF  (00:0020)           MSX_MAXCOLS	equ 32
    2609   00:B4EF  (00:00FF)           MSX_MAXCX	equ 255
    2610   00:B4EF  (00:00BF)           MSX_MAXCY	equ 191
    2611   00:B4EF  (00:0010)           MSX_SPRHS	equ 16
    2612   00:B4EF  (00:0010)           MSX_SPRVS	equ 16
    2613   00:B4EF                      
    2614   00:B4EF                      
    2615   00:B4EF                      ; =============================================================================================
    2616   00:B4EF                       
    2617   00:B4EF                      ; Block characteristics.
    2618   00:B4EF                      
    2619   00:B4EF  (00:0001)           PLATFM	equ 1               ; platform.
    2620   00:B4EF  (00:0002)           WALL	equ PLATFM + 1      ; solid wall.
    2621   00:B4EF  (00:0003)           LADDER	equ WALL + 1        ; ladder.
    2622   00:B4EF  (00:0004)           FODDER	equ LADDER + 1      ; fodder block.
    2623   00:B4EF  (00:0005)           DEADLY	equ FODDER + 1      ; deadly block.
    2624   00:B4EF  (00:0006)           CUSTOM	equ DEADLY + 1      ; custom block.
    2625   00:B4EF  (00:0007)           WATER	equ CUSTOM + 1      ; water block.
    2626   00:B4EF  (00:0008)           COLECT	equ WATER + 1       ; collectable block.
    2627   00:B4EF  (00:0009)           NUMTYP	equ COLECT + 1      ; number of types.
    2628   00:B4EF                      
    2629   00:B4EF  (00:0007)           CRUMBLING_SPEED	equ	7		; crumble every 8 frames. Valid values are 7 (every 8),3 (every 4) or 1 (every 2)
    2630   00:B4EF                      
    2631   00:B4EF                      ; Objects
    2632   00:B4EF                      
    2633   00:B4EF                      	if DISTYPE=ROM
    2634   00:B4EF                      
    2635   00:B4EF  (00:0043)           OBJSIZ 	equ 64+3			; size of each object entry, variable bytes are moved to 
    2636   00:B4EF  (00:0003)           ODTSIZ 	equ 3			   	; object data size
    2637   00:B4EF                      		
    2638   00:B4EF                      	else
    2639   00:B4EF                    ~ 	
    2640   00:B4EF                    ~ OBJSIZ 	equ 64+6			; size of each object entry
    2641   00:B4EF                    ~ ODTSIZ 	equ 6			   	; object data size
    2642   00:B4EF                    ~ 
    2643   00:B4EF                    ~ 	endif
    2644   00:B4EF                      
    2645   00:B4EF                      ; Sprites.
    2646   00:B4EF                      
    2647   00:B4EF  (00:0020)           NUMSPR 	equ 32              ; number of sprites.
    2648   00:B4EF  (00:0011)           TABSIZ 	equ 17              ; size of each entry.
    2649   00:B4EF  (00:0220)           SPRBUF 	equ NUMSPR * TABSIZ ; size of entire table.
    2650   00:B4EF  (00:0005)           NMESIZ 	equ 5               ; bytes stored in nmetab for each sprite (SPRITEPOSITIONs).
    2651   00:B4EF  (00:0003)           X      	equ 3               ; new x coordinate of sprite.
    2652   00:B4EF  (00:0004)           Y      	equ X + 1           ; new y coordinate of sprite.
    2653   00:B4EF  (00:0005)           PAM1ST	equ 5               ; first sprite parameter, old x (ix+5).
    2654   00:B4EF  (00:0258)           MAPSIZE	equ	WINDOWHGT * WINDOWWID	
    2655   00:B4EF                      	
    2656   00:B4EF                      ; Particle engine.
    2657   00:B4EF                      
    2658   00:B4EF                      	if PFLAG
    2659   00:B4EF                      
    2660   00:B4EF  (00:0036)           NUMSHR	equ 54              ; pieces of shrapnel.
    2661   00:B4EF  (00:0009)           SHRSIZ	equ 9               ; bytes per particle.
    2662   00:B4EF  (00:000A)           VAPTIM	equ 10				; vapour particle life time
    2663   00:B4EF                      		
    2664   00:B4EF                      	endif
    2665   00:B4EF                      
    2666   00:B4EF                      ;	include "MSX_Defs.asm"
    2667   00:B4EF                      ;	include "MSX_Macros.asm"
    2668   00:B4EF                      
    2669   00:B4EF                      ; Game starts here.  No reason why screen data couldn't go between start and contrl to put them in
    2670   00:B4EF                      ; contended RAM, leaving the code and rest of the game in uncontended memory at 32768 and beyond.
    2671   00:B4EF                      
    2672   00:B4EF                      start:
    2673   00:B4EF                      ;	if DISTYPE=ROM
    2674   00:B4EF  F3                  		di
    2675   00:B4F0  31 00 30            		ld sp,CV_STACK
    2676   00:B4F3                      ;	else
    2677   00:B4F3                      ; 		ld hl,(MSX_HIMEM)
    2678   00:B4F3                      ;		ld sp,hl
    2679   00:B4F3                      ;	endif
    2680   00:B4F3                      ;		ld a,$C9
    2681   00:B4F3                      ;		ld (MSX_HKEYI),a
    2682   00:B4F3                      ;		ld (MSX_HTIMI),a
    2683   00:B4F3                      ;		xor	a
    2684   00:B4F3                      ;		ld (MSX_SCNCNT),a
    2685   00:B4F3                      ;		ld (MSX_INTCNT),a		
    2686   00:B4F3                      ;
    2687   00:B4F3                      		; initialize vars
    2688   00:B4F3  21 00 40            		ld hl,varbegin
    2689   00:B4F6  11 01 40            		ld de,varbegin+1
    2690   00:B4F9  01 5C 00            		ld bc,(varend-varbegin)-1
    2691   00:B4FC  36 00               		ld (hl),0
    2692   00:B4FE  ED B0               		ldir
    2693   00:B500                      
    2694   00:B500                      ;		;init mapper
    2695   00:B500                      ;		ld	a,1
    2696   00:B500                      ;		out	(MSX_MMAP2),a
    2697   00:B500                      ;		inc	a
    2698   00:B500                      ;		out	(MSX_MMAP1),a
    2699   00:B500                      ;		inc	a
    2700   00:B500                      ;		out	(MSX_MMAP0),a
    2701   00:B500                      ;		
    2702   00:B500                      ;	ifdef NOBIOS
    2703   00:B500                      ;		ld a,(biosvars+MSX_MSXVER)      	; version del MSX
    2704   00:B500                      ;	else
    2705   00:B500                      ;		ld a,(MSX_MSXVER)      	; version del MSX
    2706   00:B500                      ;	endif
    2707   00:B500                      ;		inc a
    2708   00:B500                      ;		dec a
    2709   00:B500                      ;		jr z,.common
    2710   00:B500                      ;		dec a
    2711   00:B500                      ;		jr z,.MSX2
    2712   00:B500                      ;		dec a
    2713   00:B500                      ;		jr z,.MSX2P
    2714   00:B500                      ;		; it's a TR		
    2715   00:B500                      ;	if EFLAG
    2716   00:B500                      ;		ld a,255
    2717   00:B500                      ;		ld (snddelay),a
    2718   00:B500                      ;	endif
    2719   00:B500                      ;		jr .MSX2
    2720   00:B500                      ;.MSX2P:
    2721   00:B500                      ;		in a,(MSX_DEVID)
    2722   00:B500                      ;		cpl
    2723   00:B500                      ;		push af
    2724   00:B500                      ;		ld a,8
    2725   00:B500                      ;		out (MSX_DEVID),a  		;out the manufacturer code 8 (Panasonic) to I/O port 40h
    2726   00:B500                      ;		in a,(MSX_DEVID)   		;read the value you have just written
    2727   00:B500                      ;		cpl          			;complement all bits of the value
    2728   00:B500                      ;		cp 8         			;if it does not match the value you originally wrote,
    2729   00:B500                      ;		jr nz,.notWX  			;it is not a WX/WSX/FX.
    2730   00:B500                      ;		xor a        			;write 0 to I/O port 41h
    2731   00:B500                      ;		out (MSX_SWTIO),a  		;and the mode changes to high-speed clock
    2732   00:B500                      ;	if EFLAG
    2733   00:B500                      ;		ld a,32
    2734   00:B500                      ;		ld (snddelay),a
    2735   00:B500                      ;	endif
    2736   00:B500                      ;.notWX:
    2737   00:B500                      ;		pop af
    2738   00:B500                      ;		out (MSX_DEVID),a		
    2739   00:B500                      ;.MSX2:		
    2740   00:B500                      ;		ld hl,palett
    2741   00:B500                      ;		call setpal
    2742   00:B500                      ;				
    2743   00:B500                      ;		if (TVFREQ>0)
    2744   00:B500                      ;			ld hl,MSX_RG9SAV
    2745   00:B500                      ;			if (TVFREQ=PAL)
    2746   00:B500                      ;				res 1,(hl)
    2747   00:B500                      ;			else
    2748   00:B500                      ;				set 1,(hl)
    2749   00:B500                      ;			endif
    2750   00:B500                      ;			call swaphz
    2751   00:B500                      ;		else
    2752   00:B500                      ;			ld a,(MSX_RG9SAV)
    2753   00:B500                      ;		endif
    2754   00:B500                      ;		call setticks
    2755   00:B500                      ;
    2756   00:B500                      ;.common:		
    2757   00:B500                      ;		; Set up the display if needed
    2758   00:B500                      ;	if QFLAG=0
    2759   00:B500                      ;	
    2760   00:B500  21 01 01            		ld hl,$0101
    2761   00:B503  22 EA 53            		ld (MSX_FORCLR+1),hl    ; sets background & border colour to black
    2762   00:B506                      
    2763   00:B506                       
    2764   00:B506  CD 2D CB            		call CV_INIGRP		; set display to screen 2
    2765   00:B509                      
    2766   00:B509                      ;Enable both joysticks, buttons, keypads
    2767   00:B509                      
    2768   00:B509  21 9B 9B            		ld hl,$9b9b
    2769   00:B50C  22 97 40            		ld (CONTROLLER_BUFFER),hl
    2770   00:B50F  AF                  		xor a
    2771   00:B510  CD 05 11            		call CONTROLLER_INIT    
    2772   00:B513                      		
    2773   00:B513                      ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    2774   00:B513                      ;		ld a,(MSX_RG1SAV)
    2775   00:B513                      ;		or 2
    2776   00:B513                      ;		ld b,a
    2777   00:B513                      ;		ld c,1
    2778   00:B513                      ;		call MSX_WRTVDP			; enable 16x16 sprites
    2779   00:B513                      ;
    2780   00:B513                      ;		xor a
    2781   00:B513                      ;		ld (MSX_CLIKSW),a       ; disables keyboard click
    2782   00:B513                      
    2783   00:B513                      ;	endif
    2784   00:B513                      		
    2785   00:B513  3E F1               		ld a,$F1
    2786   00:B515  32 39 40            		ld (clratt),a
    2787   00:B518                      	
    2788   00:B518                      	if YFLAG
    2789   00:B518                    ~ 		call music_init
    2790   00:B518                    ~ 	endif
    2791   00:B518                      	if XFLAG
    2792   00:B518  CD 02 C9            		call sfx_init
    2793   00:B51B                      	endif
    2794   00:B51B                      	
    2795   00:B51B                      ;		; installs ISR
    2796   00:B51B                      ;		di
    2797   00:B51B                      ;		ld hl,isr
    2798   00:B51B                      ;		ld (MSX_HTIMI+1),hl
    2799   00:B51B                      ;		ld a,$C3
    2800   00:B51B                      ;		ld (MSX_HTIMI),a
    2801   00:B51B  FB                  		ei
    2802   00:B51C                      
    2803   00:B51C                      	; When ROM, setup of variables with starting value
    2804   00:B51C                      	if DISTYPE=ROM
    2805   00:B51C                      		
    2806   00:B51C  AF                  		xor a
    2807   00:B51D                      	if EFLAG
    2808   00:B51D  21 16 40            		ld hl,sndtyp
    2809   00:B520  77                  		ld (hl),a
    2810   00:B521                      	endif
    2811   00:B521                      		; ROM mode needs to initialize some vars
    2812   00:B521  21 00 40            		ld hl,score         ; scores.		
    2813   00:B524  11 01 40            		ld de,score+1       ; next byte.
    2814   00:B527  01 11 00            		ld bc,17			; size of score vars.
    2815   00:B52A  36 30               		ld (hl),'0'        	; write '0'
    2816   00:B52C  ED B0               		ldir
    2817   00:B52E  21 15 40            		ld hl,displ0+3
    2818   00:B531  36 8D               		ld (hl),13+128
    2819   00:B533                      	if SFLAG
    2820   00:B533                    ~ 		inc a				; A=1
    2821   00:B533                    ~ 		ld (scrlyoff),a		; by default, no scrolltext
    2822   00:B533                    ~ 	endif
    2823   00:B533                      	if PFLAG
    2824   00:B533  21 7A B7            		ld hl,prosh1
    2825   00:B536  22 17 40            		ld (shrplot),hl
    2826   00:B539                      	endif
    2827   00:B539                      	if MFLAG
    2828   00:B539                    ~ 		ld a,$C3
    2829   00:B539                    ~ 		ld (mod0),a
    2830   00:B539                    ~ 		ld (mod1),a
    2831   00:B539                    ~ 		ld (mod2),a
    2832   00:B539                    ~ 	endif
    2833   00:B539  21 D9 B4            		ld hl,keytab
    2834   00:B53C  11 7D 40            		ld de,keys
    2835   00:B53F  01 16 00            		ld bc,22
    2836   00:B542  ED B0               		ldir
    2837   00:B544                      		
    2838   00:B544  EB                  		ex de,hl
    2839   00:B545                      		
    2840   00:B545  36 01               		ld (hl),WINDOWTOP
    2841   00:B547  23                  		inc hl
    2842   00:B548  36 01               		ld (hl),WINDOWLFT
    2843   00:B54A  23                  		inc hl
    2844   00:B54B  36 14               		ld (hl),WINDOWHGT
    2845   00:B54D  23                  		inc hl
    2846   00:B54E  36 1E               		ld (hl),WINDOWWID
    2847   00:B550                      		
    2848   00:B550                      	; DATA command initialization
    2849   00:B550                      	ifdef DATA00
    2850   00:B550                    ~ 		ld hl,rdat00
    2851   00:B550                    ~ 		ld (rptr00),hl
    2852   00:B550                    ~ 	endif
    2853   00:B550                      	ifdef DATA01
    2854   00:B550                    ~ 		ld hl,rdat01
    2855   00:B550                    ~ 		ld (rptr01),hl
    2856   00:B550                    ~ 	endif
    2857   00:B550                      	ifdef DATA02
    2858   00:B550                    ~ 		ld hl,rdat02
    2859   00:B550                    ~ 		ld (rptr02),hl
    2860   00:B550                    ~ 	endif
    2861   00:B550                      	ifdef DATA03
    2862   00:B550                    ~ 		ld hl,rdat03
    2863   00:B550                    ~ 		ld (rptr03),hl
    2864   00:B550                    ~ 	endif
    2865   00:B550                      	ifdef DATA04
    2866   00:B550                    ~ 		ld hl,rdat04
    2867   00:B550                    ~ 		ld (rptr04),hl
    2868   00:B550                    ~ 	endif
    2869   00:B550                      	ifdef DATA05
    2870   00:B550                    ~ 		ld hl,rdat05
    2871   00:B550                    ~ 		ld (rptr05),hl
    2872   00:B550                    ~ 	endif
    2873   00:B550                      	ifdef DATA06
    2874   00:B550                    ~ 		ld hl,rdat06
    2875   00:B550                    ~ 		ld (rptr06),hl
    2876   00:B550                    ~ 	endif
    2877   00:B550                      	ifdef DATA07
    2878   00:B550                    ~ 		ld hl,rdat07
    2879   00:B550                    ~ 		ld (rptr07),hl
    2880   00:B550                    ~ 	endif
    2881   00:B550                      	ifdef DATA08
    2882   00:B550                    ~ 		ld hl,rdat08
    2883   00:B550                    ~ 		ld (rptr08),hl
    2884   00:B550                    ~ 	endif
    2885   00:B550                      	ifdef DATA09
    2886   00:B550                    ~ 		ld hl,rdat09
    2887   00:B550                    ~ 		ld (rptr09),hl
    2888   00:B550                    ~ 	endif
    2889   00:B550                      	ifdef DATA10
    2890   00:B550                    ~ 		ld hl,rdat10
    2891   00:B550                    ~ 		ld (rptr10),hl
    2892   00:B550                    ~ 	endif
    2893   00:B550                      	ifdef DATA11
    2894   00:B550                    ~ 		ld hl,rdat11
    2895   00:B550                    ~ 		ld (rptr11),hl
    2896   00:B550                    ~ 	endif
    2897   00:B550                      	ifdef DATA12
    2898   00:B550                    ~ 		ld hl,rdat12
    2899   00:B550                    ~ 		ld (rptr12),hl
    2900   00:B550                    ~ 	endif
    2901   00:B550                      	ifdef DATA13
    2902   00:B550                    ~ 		ld hl,rdat13
    2903   00:B550                    ~ 		ld (rptr13),hl
    2904   00:B550                    ~ 	endif
    2905   00:B550                      	ifdef DATA14
    2906   00:B550                    ~ 		ld hl,rdat14
    2907   00:B550                    ~ 		ld (rptr14),hl
    2908   00:B550                    ~ 	endif
    2909   00:B550                      	ifdef DATA15
    2910   00:B550                    ~ 		ld hl,rdat15
    2911   00:B550                    ~ 		ld (rptr15),hl
    2912   00:B550                    ~ 	endif
    2913   00:B550                      	ifdef DATA16
    2914   00:B550                    ~ 		ld hl,rdat16
    2915   00:B550                    ~ 		ld (rptr16),hl
    2916   00:B550                    ~ 	endif
    2917   00:B550                      	ifdef DATA17
    2918   00:B550                    ~ 		ld hl,rdat17
    2919   00:B550                    ~ 		ld (rptr17),hl
    2920   00:B550                    ~ 	endif
    2921   00:B550                      	ifdef DATA18
    2922   00:B550                    ~ 		ld hl,rdat18
    2923   00:B550                    ~ 		ld (rptr18),hl
    2924   00:B550                    ~ 	endif
    2925   00:B550                      	ifdef DATA19
    2926   00:B550                    ~ 		ld hl,rdat19
    2927   00:B550                    ~ 		ld (rptr19),hl
    2928   00:B550                    ~ 	endif
    2929   00:B550                      	ifdef DATA20
    2930   00:B550                    ~ 		ld hl,rdat20
    2931   00:B550                    ~ 		ld (rptr20),hl
    2932   00:B550                    ~ 	endif
    2933   00:B550                      		
    2934   00:B550                      	endif
    2935   00:B550  C3 21 BA            		jp game             ; start the game.
    2936   00:B553                      
    2937   00:B553                      
    2938   00:B553  28                  numob  db NUMOBJ         ; number of objects in game.
    2939   00:B554                      
    2940   00:B554                      ; Variables start here.
    2941   00:B554                      ; Pixel versions of wintop, winlft, winhgt, winwid.
    2942   00:B554                      
    2943   00:B554  09                  wntopx db (8 * WINDOWTOP) + 1
    2944   00:B555  08                  wnlftx db (8 * WINDOWLFT)
    2945   00:B556  98                  wnbotx db ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
    2946   00:B557  E8                  wnrgtx db ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)
    2947   00:B558                      
    2948   00:B558                      
    2949   00:B558                      ; Make sure pointers are arranged in the same order as the data itself.
    2950   00:B558                      
    2951   00:B558  0B A5               frmptr dw frmlst         ; sprite frames.
    2952   00:B55A  9C 97               blkptr dw chgfx          ; block graphics.
    2953   00:B55C  8C 9D               proptr dw bprop          ; address of char properties.
    2954   00:B55E  B7 92               scrptr dw scdat          ; address of screens.
    2955   00:B560  31 A5               nmeptr dw nmedat         ; enemy start positions.
    2956   00:B562                      
    2957   00:B562                      
    2958   00:B562                      	if MFLAG
    2959   00:B562                    ~ 	
    2960   00:B562                    ~ ; Modify for inventory.
    2961   00:B562                    ~ 
    2962   00:B562                    ~ minve:
    2963   00:B562                    ~ 	if MBFLAG
    2964   00:B562                    ~ 		ld l,a
    2965   00:B562                    ~ 		ld a,WINDOWHGT	
    2966   00:B562                    ~ 		add a,a			
    2967   00:B562                    ~ 		ld (winhgt),a	
    2968   00:B562                    ~ 		ld a,WINDOWWID	
    2969   00:B562                    ~ 		add a,a			
    2970   00:B562                    ~ 		ld (winwid),a	
    2971   00:B562                    ~ 		ld a,l
    2972   00:B562                    ~ 	endif
    2973   00:B562                    ~ 		
    2974   00:B562                    ~ 		ld hl,invdis        ; routine address.
    2975   00:B562                    ~ 		ld (mod0+1),hl      ; set up menu routine.
    2976   00:B562                    ~ 		ld (mod2+1),hl      ; set up count routine.
    2977   00:B562                    ~ 		ld hl,fopt          ; find option from available objects.
    2978   00:B562                    ~ 		ld (mod1+1),hl      ; set up routine.
    2979   00:B562                    ~ 		jr dbox             ; do menu routine.
    2980   00:B562                    ~ 
    2981   00:B562                    ~ ; Modify for menu.
    2982   00:B562                    ~ 
    2983   00:B562                    ~ mmenu:
    2984   00:B562                    ~ 		ld hl,always        ; routine address.
    2985   00:B562                    ~ 		ld (mod0+1),hl      ; set up routine.
    2986   00:B562                    ~ 		ld (mod2+1),hl      ; set up count routine.
    2987   00:B562                    ~ 		ld hl,fstd          ; standard option selection.
    2988   00:B562                    ~ 		ld (mod1+1),hl      ; set up routine.
    2989   00:B562                    ~ 
    2990   00:B562                    ~ ; Drop through into box routine.
    2991   00:B562                    ~ 
    2992   00:B562                    ~ ; Work out size of box for message or menu.
    2993   00:B562                    ~ 
    2994   00:B562                    ~ dbox:   		
    2995   00:B562                    ~ 		ld hl,msgdat        ; pointer to messages.
    2996   00:B562                    ~ 		call getwrd         ; get message number.
    2997   00:B562                    ~ 		push hl             ; store pointer to message.
    2998   00:B562                    ~ 		ld d,1              ; height.
    2999   00:B562                    ~ 		xor a               ; start at object zero.
    3000   00:B562                    ~ 		ld (combyt),a       ; store number of object in combyt.
    3001   00:B562                    ~ 		ld e,a              ; maximum width.
    3002   00:B562                    ~ dbox5:
    3003   00:B562                    ~ 		ld b,0              ; this line's width.
    3004   00:B562                    ~ ;mod2:						 ; auto-modifying code
    3005   00:B562                    ~ ;		call always
    3006   00:B562                    ~ 		
    3007   00:B562                    ~ 		call mod2		
    3008   00:B562                    ~ 		jr nz,dbox6         ; not in inventory, skip this line. (dbox3?)
    3009   00:B562                    ~ 		inc d               ; add to tally.
    3010   00:B562                    ~ dbox6:
    3011   00:B562                    ~ 		ld a,(hl)           ; get character.
    3012   00:B562                    ~ 		inc hl              ; next character.
    3013   00:B562                    ~ 		cp ','              ; reached end of line?
    3014   00:B562                    ~ 		jr z,dbox3          ; yes.
    3015   00:B562                    ~ 		cp 13               ; reached end of line?
    3016   00:B562                    ~ 		jr z,dbox3          ; yes.
    3017   00:B562                    ~ 		inc b               ; add to this line's width.
    3018   00:B562                    ~ 		and a               ; end of message?
    3019   00:B562                    ~ 		jp m,dbox4          ; yes, end count.
    3020   00:B562                    ~ 		jr dbox6            ; repeat until we find the end.
    3021   00:B562                    ~ dbox3:
    3022   00:B562                    ~ 		ld a,e              ; maximum line width.
    3023   00:B562                    ~ 		cp b                ; have we exceeded longest so far?
    3024   00:B562                    ~ 		jr nc,dbox5         ; no, carry on looking.
    3025   00:B562                    ~ 		ld e,b              ; make this the widest so far.
    3026   00:B562                    ~ 		jr dbox5            ; keep looking.
    3027   00:B562                    ~ dbox4:
    3028   00:B562                    ~ 		ld a,e              ; maximum line width.
    3029   00:B562                    ~ 		cp b                ; have we exceeded longest so far?
    3030   00:B562                    ~ 		jr nc,dbox8         ; no, carry on looking.
    3031   00:B562                    ~ 		ld e,b              ; final line is the longest so far.
    3032   00:B562                    ~ dbox8:
    3033   00:B562                    ~ 		dec d               ; decrement items found.
    3034   00:B562                    ~ 		jp z,dbox15         ; total was zero.
    3035   00:B562                    ~ 		ld a,e              ; longest line.
    3036   00:B562                    ~ 		and a               ; was it zero?
    3037   00:B562                    ~ 		jp z,dbox15         ; total was zero.
    3038   00:B562                    ~ 		ld (bwid),de        ; set up size.
    3039   00:B562                    ~ 
    3040   00:B562                    ~ ; That's set up our box size.
    3041   00:B562                    ~ 
    3042   00:B562                    ~ 		call dissprs
    3043   00:B562                    ~ 
    3044   00:B562                    ~ 		ld a,(winhgt)       ; window height in characters.
    3045   00:B562                    ~ 		sub d               ; subtract height of box.
    3046   00:B562                    ~ 		rra                 ; divide by 2.
    3047   00:B562                    ~ 		ld hl,wintop        ; top edge of window.
    3048   00:B562                    ~ 		add a,(hl)          ; add displacement.
    3049   00:B562                    ~ 		ld (btop),a         ; set up box top.
    3050   00:B562                    ~ 		ld a,(winwid)       ; window width in characters.
    3051   00:B562                    ~ 		sub e               ; subtract box width.
    3052   00:B562                    ~ 		rra                 ; divide by 2.
    3053   00:B562                    ~ 		inc hl              ; left edge of window.
    3054   00:B562                    ~ 		add a,(hl)          ; add displacement.
    3055   00:B562                    ~ 		ld (blft),a         ; box left.
    3056   00:B562                    ~ 
    3057   00:B562                    ~ 		ld hl,font-256       ; font.
    3058   00:B562                    ~ 		ld (grbase),hl      ; set up for text display.
    3059   00:B562                    ~ 		pop hl              ; restore message pointer.
    3060   00:B562                    ~ 		ld a,(btop)         ; box top.
    3061   00:B562                    ~ 		ld (dispx),a        ; set display coordinate.
    3062   00:B562                    ~ 		xor a               ; start at object zero.
    3063   00:B562                    ~ 		ld (combyt),a       ; store number of object in combyt.
    3064   00:B562                    ~ dbox2:
    3065   00:B562                    ~ 		ld a,(combyt)       ; get object number.
    3066   00:B562                    ~ ;mod0:						 ; auto-modifying code
    3067   00:B562                    ~ ;		call always         ; check inventory for display.
    3068   00:B562                    ~ 
    3069   00:B562                    ~ 
    3070   00:B562                    ~ 		call mod0		
    3071   00:B562                    ~ 		jp nz,dbox13        ; not in inventory, skip this line.
    3072   00:B562                    ~ 		ld a,(blft)         ; box left.
    3073   00:B562                    ~ 		ld (dispy),a        ; set left display position.
    3074   00:B562                    ~ 		ld a,(bwid)         ; box width.
    3075   00:B562                    ~ 		ld b,a              ; store width.
    3076   00:B562                    ~ 	   
    3077   00:B562                    ~ dbox0:  
    3078   00:B562                    ~ 		ld a,(hl)           ; get character.
    3079   00:B562                    ~ 		cp ','              ; end of line?
    3080   00:B562                    ~ 		jr z,dbox1          ; yes, next one.
    3081   00:B562                    ~ 		cp 13               ; end of option?
    3082   00:B562                    ~ 		jr z,dbox1          ; yes, on to next.
    3083   00:B562                    ~ 		dec b               ; one less to display.
    3084   00:B562                    ~ 		and 127             ; remove terminator.
    3085   00:B562                    ~ 
    3086   00:B562                    ~ 		push bc             ; store characters remaining.
    3087   00:B562                    ~ 		push hl             ; store address on stack.
    3088   00:B562                    ~ 
    3089   00:B562                    ~ 
    3090   00:B562                    ~ 		call ptxt           ; display character.		
    3091   00:B562                    ~ 		
    3092   00:B562                    ~ 		ld hl,dispy         ; y coordinate.
    3093   00:B562                    ~ 		inc (hl)            ; move along one.
    3094   00:B562                    ~ 		
    3095   00:B562                    ~ 		pop hl              ; retrieve address of next character.
    3096   00:B562                    ~ 		pop bc              ; chars left for this line.
    3097   00:B562                    ~ 
    3098   00:B562                    ~ 		ld a,(hl)           ; get character.
    3099   00:B562                    ~ 		inc hl              ; next character.
    3100   00:B562                    ~ 		cp 128              ; end of message?
    3101   00:B562                    ~ 		jp nc,dbox7         ; yes, job done.
    3102   00:B562                    ~ 		ld a,b              ; chars remaining.
    3103   00:B562                    ~ 		and a               ; are any left?
    3104   00:B562                    ~ 		jr nz,dbox0         ; yes, continue.
    3105   00:B562                    ~ 
    3106   00:B562                    ~ ; Reached limit of characters per line.
    3107   00:B562                    ~ 
    3108   00:B562                    ~ dbox9:
    3109   00:B562                    ~ 		ld a,(hl)           ; get character.
    3110   00:B562                    ~ 		inc hl              ; next one.
    3111   00:B562                    ~ 		cp ','              ; another line?
    3112   00:B562                    ~ 		jr z,dbox10         ; yes, do next line.
    3113   00:B562                    ~ 		cp 13               ; another line?
    3114   00:B562                    ~ 		jr z,dbox10         ; yes, on to next.
    3115   00:B562                    ~ 		cp 128              ; end of message?
    3116   00:B562                    ~ 		jr nc,dbox11        ; yes, finish message.
    3117   00:B562                    ~ 		jr dbox9
    3118   00:B562                    ~ 
    3119   00:B562                    ~ ; Fill box to end of line.
    3120   00:B562                    ~ 
    3121   00:B562                    ~ dboxf:
    3122   00:B562                    ~ 		push hl             ; store address on stack.
    3123   00:B562                    ~ 		push bc             ; store characters remaining.	   
    3124   00:B562                    ~ 		ld a,' '
    3125   00:B562                    ~ 		call ptxt           ; display character.		
    3126   00:B562                    ~ 		
    3127   00:B562                    ~ 		ld hl,dispy         ; y coordinate.
    3128   00:B562                    ~ 		inc (hl)            ; move along one.		
    3129   00:B562                    ~ 		pop bc              ; retrieve character count.
    3130   00:B562                    ~ 		pop hl              ; retrieve address of next character.
    3131   00:B562                    ~ 		djnz dboxf          ; repeat for remaining chars on line.
    3132   00:B562                    ~ 		ret
    3133   00:B562                    ~ 
    3134   00:B562                    ~ dbox1:
    3135   00:B562                    ~ 		inc hl              ; skip character.
    3136   00:B562                    ~ 		call dboxf          ; fill box out to right side.
    3137   00:B562                    ~ dbox10:
    3138   00:B562                    ~ 		ld a,(dispx)        ; x coordinate.
    3139   00:B562                    ~ 		inc a               ; down a line.
    3140   00:B562                    ~ 		ld (dispx),a        ; next position.
    3141   00:B562                    ~ 		jp dbox2            ; next line.
    3142   00:B562                    ~ dbox7:
    3143   00:B562                    ~ 		ld a,b              ; chars remaining.
    3144   00:B562                    ~ 		and a               ; are any left?
    3145   00:B562                    ~ 		jr z,dbox11         ; no, nothing to draw.
    3146   00:B562                    ~ 		call dboxf          ; fill message to line.
    3147   00:B562                    ~ 
    3148   00:B562                    ~ ; Drawn the box menu, now select option.
    3149   00:B562                    ~ 
    3150   00:B562                    ~ dbox11:
    3151   00:B562                    ~ 		ld a,(btop)         ; box top.
    3152   00:B562                    ~ 		ld (dispx),a        ; set bar position.
    3153   00:B562                    ~ dbox14:
    3154   00:B562                    ~ 		call joykey         ; get controls.
    3155   00:B562                    ~ 		and 31              ; anything pressed?
    3156   00:B562                    ~ 		jr nz,dbox14        ; yes, debounce it.
    3157   00:B562                    ~ 		call dbar           ; draw bar.
    3158   00:B562                    ~ dbox12:
    3159   00:B562                    ~ 		call joykey         ; get controls.
    3160   00:B562                    ~ 		and 28              ; anything pressed?
    3161   00:B562                    ~ 		jr z,dbox12         ; no, nothing.
    3162   00:B562                    ~ 		and 16              ; fire button pressed?
    3163   00:B562                    ~ ;mod1:						 ; auto-modifying code
    3164   00:B562                    ~ ;		jp nz,fstd          ; yes, job done.
    3165   00:B562                    ~ 
    3166   00:B562                    ~ 		
    3167   00:B562                    ~ 		jp nz,mod1
    3168   00:B562                    ~ 		call dbar           ; delete bar.
    3169   00:B562                    ~ 		ld a,(joyval)       ; joystick reading.
    3170   00:B562                    ~ 		and 8               ; going up?
    3171   00:B562                    ~ 		jr nz,dboxu         ; yes, go up.
    3172   00:B562                    ~ 		ld a,(dispx)        ; vertical position of bar.
    3173   00:B562                    ~ 		inc a               ; look down.
    3174   00:B562                    ~ 		ld hl,btop          ; top of box.
    3175   00:B562                    ~ 		sub (hl)            ; find distance from top.
    3176   00:B562                    ~ 		dec hl              ; point to height.
    3177   00:B562                    ~ 		cp (hl)             ; are we at end?
    3178   00:B562                    ~ 		jp z,dbox14         ; yes, go no further.
    3179   00:B562                    ~ 		ld hl,dispx         ; coordinate.
    3180   00:B562                    ~ 		inc (hl)            ; move bar.
    3181   00:B562                    ~ 		jr dbox14           ; continue.
    3182   00:B562                    ~ dboxu:
    3183   00:B562                    ~ 		ld a,(dispx)        ; vertical position of bar.
    3184   00:B562                    ~ 		ld hl,btop          ; top of box.
    3185   00:B562                    ~ 		cp (hl)             ; are we at the top?
    3186   00:B562                    ~ 		jp z,dbox14         ; yes, go no further.
    3187   00:B562                    ~ 		ld hl,dispx         ; coordinate.
    3188   00:B562                    ~ 		dec (hl)            ; move bar.
    3189   00:B562                    ~ 		jr dbox14           ; continue.
    3190   00:B562                    ~ fstd:
    3191   00:B562                    ~ 		ld a,(dispx)        ; bar position.
    3192   00:B562                    ~ 		ld hl,btop          ; top of menu.
    3193   00:B562                    ~ 		sub (hl)            ; find selected option.
    3194   00:B562                    ~ 		ld (varopt),a       ; store the option.
    3195   00:B562                    ~ 		jp redraw           ; redraw the screen.
    3196   00:B562                    ~ 
    3197   00:B562                    ~ ; Option not available.  Skip this line.
    3198   00:B562                    ~ 
    3199   00:B562                    ~ dbox13:
    3200   00:B562                    ~ 		ld a,(hl)           ; get character.
    3201   00:B562                    ~ 		inc hl              ; next one.
    3202   00:B562                    ~ 		cp ','              ; another line?
    3203   00:B562                    ~ 		jp z,dbox2          ; yes, do next line.
    3204   00:B562                    ~ 		cp 13               ; another line?
    3205   00:B562                    ~ 		jp z,dbox2          ; yes, on to next line.
    3206   00:B562                    ~ 		and a               ; end of message?
    3207   00:B562                    ~ 		jp m,dbox11         ; yes, finish message.
    3208   00:B562                    ~ 		jr dbox13
    3209   00:B562                    ~ dbox15:
    3210   00:B562                    ~ 
    3211   00:B562                    ~ 	if MBFLAG
    3212   00:B562                    ~ 		ld a,WINDOWWID
    3213   00:B562                    ~ 		ld (winwid),a
    3214   00:B562                    ~ 		ld a,WINDOWHGT
    3215   00:B562                    ~ 		ld (winhgt),a
    3216   00:B562                    ~ 	endif
    3217   00:B562                    ~ 	
    3218   00:B562                    ~ 		pop hl              ; pop message pointer from the stack.
    3219   00:B562                    ~ 		ret
    3220   00:B562                    ~ 
    3221   00:B562                    ~ dbar:
    3222   00:B562                    ~ 		ld a,(blft)         ; box left.
    3223   00:B562                    ~ 		ld (dispy),a        ; set display coordinate.
    3224   00:B562                    ~ 		call gprad          ; get printing address.
    3225   00:B562                    ~ 		ex de,hl            ; flip into hl register pair.
    3226   00:B562                    ~ 	   
    3227   00:B562                    ~ 		set 5,h
    3228   00:B562                    ~ 		ld a,(bwid)         ; box width.
    3229   00:B562                    ~ 		add a,a
    3230   00:B562                    ~ 		add a,a
    3231   00:B562                    ~ 		add a,a
    3232   00:B562                    ~ 		ld c,a
    3233   00:B562                    ~ 		ld b,0
    3234   00:B562                    ~ 		call MSX_RDVRM
    3235   00:B562                    ~ 		rlca
    3236   00:B562                    ~ 		rlca
    3237   00:B562                    ~ 		rlca
    3238   00:B562                    ~ 		rlca
    3239   00:B562                    ~ 		jp MSX_FILVRM
    3240   00:B562                    ~ 
    3241   00:B562                    ~ invdis:
    3242   00:B562                    ~ 		push hl             ; store message text pointer.
    3243   00:B562                    ~ 		push de             ; store de pair for line count.
    3244   00:B562                    ~ 		ld hl,combyt        ; object number.
    3245   00:B562                    ~ 		ld a,(hl)           ; get object number.
    3246   00:B562                    ~ 		inc (hl)            ; ready for next one.
    3247   00:B562                    ~ 		call gotob          ; check if we have object.
    3248   00:B562                    ~ 		pop de              ; retrieve de pair from stack.
    3249   00:B562                    ~ 		pop hl              ; retrieve text pointer.
    3250   00:B562                    ~ 		ret
    3251   00:B562                    ~ 		
    3252   00:B562                    ~ ; Find option selected.
    3253   00:B562                    ~ 
    3254   00:B562                    ~ fopt:
    3255   00:B562                    ~ 		ld a,(dispx)
    3256   00:B562                    ~ 		ld hl,btop          ; top of menu.
    3257   00:B562                    ~ 		sub (hl)            ; find selected option.
    3258   00:B562                    ~ 		inc a               ; object 0 needs one iteration, 1 needs 2 and so on.
    3259   00:B562                    ~ 		ld b,a              ; option selected in b register.
    3260   00:B562                    ~ 		ld hl,combyt        ; object number.
    3261   00:B562                    ~ 		ld (hl),0           ; set to first item.
    3262   00:B562                    ~ fopt0:
    3263   00:B562                    ~ 		push bc             ; store option counter in b register.
    3264   00:B562                    ~ 		call fobj           ; find next object in inventory.
    3265   00:B562                    ~ 		pop bc              ; restore option counter.
    3266   00:B562                    ~ 		djnz fopt0          ; repeat for relevant steps down the list.
    3267   00:B562                    ~ 		ld a,(combyt)       ; get option.
    3268   00:B562                    ~ 		dec a               ; one less, due to where we increment combyt.
    3269   00:B562                    ~ 		ld (varopt),a       ; store the option.
    3270   00:B562                    ~ 		xor a
    3271   00:B562                    ~ 		ld (joyval),a
    3272   00:B562                    ~ 		jp redraw           ; redraw the screen.
    3273   00:B562                    ~ 
    3274   00:B562                    ~ fobj:
    3275   00:B562                    ~ 		ld hl,combyt        ; object number.
    3276   00:B562                    ~ 		ld a,(hl)           ; get object number.
    3277   00:B562                    ~ 		inc (hl)            ; ready for next item.
    3278   00:B562                    ~ 		ret z               ; in case we loop back to zero.
    3279   00:B562                    ~ 		call gotob          ; do we have this item?
    3280   00:B562                    ~ 		ret z               ; yes, it's on the list.
    3281   00:B562                    ~ 		jr fobj             ; repeat until we find next item in pockets.
    3282   00:B562                    ~ 
    3283   00:B562                    ~ 	endif
    3284   00:B562                      
    3285   00:B562                      ;
    3286   00:B562                      ; ISR
    3287   00:B562                      ;
    3288   00:B562                      isr:
    3289   00:B562                      	ifdef NOBIOS
    3290   00:B562                    ~ 		push hl
    3291   00:B562                    ~ 		push de
    3292   00:B562                    ~ 		push bc
    3293   00:B562                    ~ 		push af
    3294   00:B562                    ~ 		exx
    3295   00:B562                    ~ 		ex af,af
    3296   00:B562                    ~ 		push hl
    3297   00:B562                    ~ 		push de
    3298   00:B562                    ~ 		push bc
    3299   00:B562                    ~ 		push af
    3300   00:B562                    ~ 		push iy
    3301   00:B562                    ~ 		push ix
    3302   00:B562                    ~         in a,($99)      ;Clear possible interrupt request
    3303   00:B562                    ~         or a               ;Interrupt requested by VDP?		
    3304   00:B562                    ~ 		jp p,.intret       ;No, skip the rest
    3305   00:B562                    ~ 		ei
    3306   00:B562                    ~ 	endif			
    3307   00:B562  32 E7 53                    ld (MSX_STATFL),a	;Store this new status
    3308   00:B565  2A 9E 5C                    ld hl,(MSX_JIFFY)
    3309   00:B568  23                          inc hl
    3310   00:B569  22 9E 5C                    ld (MSX_JIFFY),hl		
    3311   00:B56C                      	if (YFLAG or XFLAG)	
    3312   00:B56C  CD F9 C9            		call psgrout
    3313   00:B56F                      		if YFLAG
    3314   00:B56F                    ~ 			call music_play
    3315   00:B56F                    ~ 		endif
    3316   00:B56F                      		if XFLAG
    3317   00:B56F  CD 55 C9            			call sfx_play
    3318   00:B572                      		endif
    3319   00:B572                      	endif
    3320   00:B572                      	ifdef NOBIOS
    3321   00:B572                    ~ .intret:
    3322   00:B572                    ~ 	else
    3323   00:B572  F1                  		pop af
    3324   00:B573                      	endif
    3325   00:B573  DD E1                       pop ix              ;Restore all registers
    3326   00:B575  FD E1                       pop iy
    3327   00:B577  F1                          pop af
    3328   00:B578  C1                          pop bc
    3329   00:B579  D1                          pop de
    3330   00:B57A  E1                          pop hl
    3331   00:B57B  08                          ex  af,af
    3332   00:B57C  D9                          exx
    3333   00:B57D  F1                          pop af
    3334   00:B57E  C1                          pop bc
    3335   00:B57F  D1                          pop de
    3336   00:B580  E1                          pop hl
    3337   00:B581  FB                          ei
    3338   00:B582  C9                          ret					; returns from interrupt		
    3339   00:B583                      ;
    3340   00:B583                      ; Wait for keypress.
    3341   00:B583                      ;
    3342   00:B583                      chkkey:
    3343   00:B583                      ;		call vsync
    3344   00:B583                      ;		ld b,11
    3345   00:B583                      ;.nokey:
    3346   00:B583                      ;		ld a,b
    3347   00:B583                      ;		dec a
    3348   00:B583                      ;		call MSX_SNSMAT
    3349   00:B583                      ;		cp 255
    3350   00:B583                      ;		ret nz
    3351   00:B583                      ;		djnz .nokey
    3352   00:B583                      ;		jr chkkey
    3353   00:B583                      		
    3354   00:B583                      prskey:
    3355   00:B583  CD 01 B6            	call vsync
    3356   00:B586                      
    3357   00:B586  3A 99 40            	ld a,(CONTROLLER_BUFFER+2)	; Test button left
    3358   00:B589  A7                  	and a
    3359   00:B58A  20 16               	jr nz,debkey
    3360   00:B58C                      
    3361   00:B58C  3A 9A 40            	ld a,(CONTROLLER_BUFFER+3)	; Test joystick
    3362   00:B58F  A7                  	and a
    3363   00:B590  20 10               	jr nz,debkey
    3364   00:B592                      
    3365   00:B592  3A 9D 40            	ld a,(CONTROLLER_BUFFER+6)	; Test keypad
    3366   00:B595  FE 0F               	cp $0f
    3367   00:B597  20 09               	jr nz,debkey
    3368   00:B599                      
    3369   00:B599  3A 9C 40            	ld a,(CONTROLLER_BUFFER+5)	; Test button right
    3370   00:B59C  A7                  	and a
    3371   00:B59D  20 03               	jr nz,debkey
    3372   00:B59F                      
    3373   00:B59F  C3 83 B5            	jp prskey
    3374   00:B5A2                      
    3375   00:B5A2                      ; Debounce keypress.
    3376   00:B5A2                      		
    3377   00:B5A2                      debkey:
    3378   00:B5A2  CD 01 B6            	call vsync
    3379   00:B5A5                      
    3380   00:B5A5  3A 99 40            	ld a,(CONTROLLER_BUFFER+2)	; Test button left
    3381   00:B5A8  A7                  	and a
    3382   00:B5A9  20 F7               	jr nz,debkey
    3383   00:B5AB                      
    3384   00:B5AB  3A 9A 40            	ld a,(CONTROLLER_BUFFER+3)	; Test joystick
    3385   00:B5AE  A7                  	and a
    3386   00:B5AF  20 F1               	jr nz,debkey
    3387   00:B5B1                      
    3388   00:B5B1  3A 9D 40            	ld a,(CONTROLLER_BUFFER+6)	; Test keypad
    3389   00:B5B4  FE 0F               	cp $0f
    3390   00:B5B6  20 EA               	jr nz,debkey
    3391   00:B5B8                      
    3392   00:B5B8  3A 9C 40            	ld a,(CONTROLLER_BUFFER+5)	; Test button right
    3393   00:B5BB  A7                  	and a
    3394   00:B5BC  20 E4               	jr nz,debkey
    3395   00:B5BE                      
    3396   00:B5BE  C9                  	ret
    3397   00:B5BF                      
    3398   00:B5BF                      ; Delay routine.
    3399   00:B5BF                      
    3400   00:B5BF                      delay:
    3401   00:B5BF  C5                  		push bc             ; store loop counter.
    3402   00:B5C0  CD 01 B6            		call vsync          ; wait for interrupt.
    3403   00:B5C3  C1                  		pop bc              ; restore counter.
    3404   00:B5C4  10 F9               		djnz delay          ; repeat.
    3405   00:B5C6  C9                  		ret
    3406   00:B5C7                      
    3407   00:B5C7                      ; Clear sprite table.
    3408   00:B5C7                      
    3409   00:B5C7                      xspr:
    3410   00:B5C7  21 B4 40            		ld hl,sprtab       ; sprite table.
    3411   00:B5CA  11 B5 40            		ld de,sprtab+1
    3412   00:B5CD  36 FF               		ld (hl),255
    3413   00:B5CF  01 1F 02            		ld bc,SPRBUF-1     ; length of table.
    3414   00:B5D2  ED B0               		ldir
    3415   00:B5D4  AF                  		xor a
    3416   00:B5D5  32 4B 40            		ld (highslot),a		; resets also highest sprite slot number
    3417   00:B5D8                      ;
    3418   00:B5D8                      xspr0:
    3419   00:B5D8  21 00 4D            		ld hl,mapspr       ; sprite images map.
    3420   00:B5DB  11 01 4D            		ld de,mapspr+1
    3421   00:B5DE  36 FF               		ld (hl),255
    3422   00:B5E0  01 7F 00            		ld bc,127          ; length of table.
    3423   00:B5E3  ED B0               		ldir
    3424   00:B5E5  C9                  		ret
    3425   00:B5E6                      		
    3426   00:B5E6                      	if OFLAG
    3427   00:B5E6                      	
    3428   00:B5E6                      ; Initialise all objects.
    3429   00:B5E6                      
    3430   00:B5E6                      	if DISTYPE=ROM
    3431   00:B5E6                      
    3432   00:B5E6                      iniob:
    3433   00:B5E6                      		; ROM model
    3434   00:B5E6  3A 53 B5            		ld a,(numob)        ; number of objects in the game.
    3435   00:B5E9  47                  		ld b,a
    3436   00:B5EA  21 40 A7            		ld hl,objdta        ; objects table.
    3437   00:B5ED  11 A8 4F            		ld de,objatr
    3438   00:B5F0                      .loop:
    3439   00:B5F0  3E 40               		ld a,OBJSIZ-ODTSIZ  ; distance between objects.
    3440   00:B5F2  4F                  		ld c,a
    3441   00:B5F3  ED A0               		ldi
    3442   00:B5F5  ED A0               		ldi
    3443   00:B5F7  ED A0               		ldi
    3444   00:B5F9                      		ADD_HL_A
    3444   00:B5F9  85                >   add a,l
    3444   00:B5FA  6F                >   ld l,a
    3444   00:B5FB  8C                >   adc a,h
    3444   00:B5FC  95                >   sub l
    3444   00:B5FD  67                >   ld h,a
    3445   00:B5FE  10 F0               		djnz .loop         ; repeat.
    3446   00:B600  C9                  		ret
    3447   00:B601                      
    3448   00:B601                      	else
    3449   00:B601                    ~ 		; RAM model
    3450   00:B601                    ~ iniob:
    3451   00:B601                    ~ 		/*
    3452   00:B601                    ~ 		ld ix,objdta        ; objects table.
    3453   00:B601                    ~ 		ld a,(numob)        ; number of objects in the game.
    3454   00:B601                    ~ 		ld b,a              ; loop counter.
    3455   00:B601                    ~ 		ld de,OBJSIZ        ; distance between objects.
    3456   00:B601                    ~ .loop:
    3457   00:B601                    ~ 		ld a,(ix+67)        ; start screen.
    3458   00:B601                    ~ 		ld (ix+64),a        ; set start screen.
    3459   00:B601                    ~ 		ld a,(ix+68)        ; find start x.
    3460   00:B601                    ~ 		ld (ix+65),a        ; set start x.
    3461   00:B601                    ~ 		ld a,(ix+69)        ; get initial y.
    3462   00:B601                    ~ 		ld (ix+66),a        ; set y coord.
    3463   00:B601                    ~ 		add ix,de           ; point to next object.
    3464   00:B601                    ~ 		djnz .loop         ; repeat.
    3465   00:B601                    ~ 		ret
    3466   00:B601                    ~ 		*/
    3467   00:B601                    ~ 		ld a,(numob)        ; number of objects in the game.
    3468   00:B601                    ~ 		ld b,a				; objects counter
    3469   00:B601                    ~ 		ld hl,objdta+OBJSIZ-1	
    3470   00:B601                    ~ .loop:
    3471   00:B601                    ~ 		ld c,h				; h must be > 3
    3472   00:B601                    ~ 		ld d,h
    3473   00:B601                    ~ 		ld e,l
    3474   00:B601                    ~ 		dec de
    3475   00:B601                    ~ 		dec de
    3476   00:B601                    ~ 		dec de
    3477   00:B601                    ~ 		ldd
    3478   00:B601                    ~ 		ldd
    3479   00:B601                    ~ 		ldd
    3480   00:B601                    ~ 		ld de,OBJSIZ+3
    3481   00:B601                    ~ 		add hl,de
    3482   00:B601                    ~ 		djnz .loop         ; repeat.
    3483   00:B601                    ~ 		ret
    3484   00:B601                    ~ 		
    3485   00:B601                    ~ 	endif
    3486   00:B601                      	
    3487   00:B601                      	endif
    3488   00:B601                      	
    3489   00:B601                      	
    3490   00:B601                      ; Screen synchronisation.
    3491   00:B601                      
    3492   00:B601                      vsync:
    3493   00:B601  CD 3E C3            	call buildspr
    3494   00:B604                      ;	call POLLER
    3495   00:B604  CD BF C0            	call joykey
    3496   00:B607                      
    3497   00:B607                      ; Sync framerate to 25 Hz
    3498   00:B607                      
    3499   00:B607  E5                  	push hl
    3500   00:B608                      
    3501   00:B608                      check_if_enough_frames_passed:
    3502   00:B608  21 7C 40            	ld hl,time
    3503   00:B60B  7E                  	ld a,(hl)
    3504   00:B60C  FE 01               	cp 1
    3505   00:B60E  00                  	nop
    3506   00:B60F  00                  	nop
    3507   00:B610  00                  	nop
    3508   00:B611  00                  	nop
    3509   00:B612  00                  	nop
    3510   00:B613  00                  	nop
    3511   00:B614  38 F2               	jr c,check_if_enough_frames_passed
    3512   00:B616                      
    3513   00:B616  AF                  	xor a			; sync framerate 25 Hz
    3514   00:B617  77                  	ld (hl),a
    3515   00:B618  E1                  	pop hl
    3516   00:B619                      
    3517   00:B619  C9                  	ret
    3518   00:B61A                      ;		ld hl,MSX_JIFFY
    3519   00:B61A                      ;		ld a,(hl)
    3520   00:B61A                      
    3521   00:B61A                      	if SFLAG
    3522   00:B61A                    ~ 		push af
    3523   00:B61A                    ~ 		push hl
    3524   00:B61A                    ~ 		call scrltxt
    3525   00:B61A                    ~ 		pop hl
    3526   00:B61A                    ~ 		pop af
    3527   00:B61A                    ~ 		cp (hl)
    3528   00:B61A                    ~ 		jr z,.novbl0
    3529   00:B61A                    ~ 		call scrly
    3530   00:B61A                    ~ 	if PFLAG
    3531   00:B61A                    ~ ;		call proshr
    3532   00:B61A                    ~ 	endif
    3533   00:B61A                    ~ 		call buildspr
    3534   00:B61A                    ~ 	ret
    3535   00:B61A                    ~ 	if EFLAG
    3536   00:B61A                    ~ 		call beeper
    3537   00:B61A                    ~ 	endif
    3538   00:B61A                    ~ 		call joykey
    3539   00:B61A                    ~ 		jr .nowait
    3540   00:B61A                    ~ 		
    3541   00:B61A                    ~ .novbl0:		
    3542   00:B61A                    ~ 	endif
    3543   00:B61A                      
    3544   00:B61A                      	if PFLAG
    3545   00:B61A                      		
    3546   00:B61A  F5                  		push af
    3547   00:B61B  E5                  		push hl
    3548   00:B61C  CD 35 B7            		call proshr
    3549   00:B61F  E1                  		pop hl
    3550   00:B620  F1                  		pop af
    3551   00:B621  BE                  		cp (hl)
    3552   00:B622  28 0B               		jr z,.novbl1
    3553   00:B624                      	if SFLAG
    3554   00:B624                    ~ 		call scrly
    3555   00:B624                    ~ 	endif
    3556   00:B624  CD 3E C3            		call buildspr
    3557   00:B627                      	if EFLAG
    3558   00:B627  CD 5C B6            		call beeper
    3559   00:B62A                      	endif
    3560   00:B62A  CD BF C0            		call joykey
    3561   00:B62D  18 2C               		jr .nowait
    3562   00:B62F                      		
    3563   00:B62F                      .novbl1:		
    3564   00:B62F                      	endif
    3565   00:B62F                      		
    3566   00:B62F  F5                  		push af
    3567   00:B630  E5                  		push hl
    3568   00:B631  CD 3E C3            		call buildspr
    3569   00:B634  E1                  		pop hl
    3570   00:B635  F1                  		pop af
    3571   00:B636  BE                  		cp (hl)
    3572   00:B637  28 08               		jr z,.novbl2
    3573   00:B639                      	if SFLAG
    3574   00:B639                    ~ 		call scrly
    3575   00:B639                    ~ 	endif
    3576   00:B639                      	if EFLAG
    3577   00:B639  CD 5C B6            		call beeper
    3578   00:B63C                      	endif
    3579   00:B63C  CD BF C0            		call joykey
    3580   00:B63F  18 1A               		jr .nowait
    3581   00:B641                      
    3582   00:B641                      .novbl2:
    3583   00:B641                      	if EFLAG
    3584   00:B641  CD 5C B6            		call beeper
    3585   00:B644                      	endif
    3586   00:B644  BE                  		cp (hl)
    3587   00:B645  28 05               		jr z,.novbl3
    3588   00:B647                      	if SFLAG
    3589   00:B647                    ~ 		call scrly
    3590   00:B647                    ~ 	endif
    3591   00:B647  CD BF C0            		call joykey
    3592   00:B64A  18 0F               		jr .nowait
    3593   00:B64C                      		
    3594   00:B64C                      .novbl3:
    3595   00:B64C  F5                  		push af
    3596   00:B64D  E5                  		push hl
    3597   00:B64E  CD BF C0            		call joykey
    3598   00:B651  E1                  		pop hl
    3599   00:B652  F1                  		pop af
    3600   00:B653  BE                  		cp (hl)
    3601   00:B654                      		; jr z,.novbl5
    3602   00:B654  28 02               		jr z,.wait
    3603   00:B656                      	if SFLAG
    3604   00:B656                    ~ 		call scrly
    3605   00:B656                    ~ 	endif
    3606   00:B656  18 03               		jr .nowait
    3607   00:B658                      		
    3608   00:B658                      .wait:		
    3609   00:B658                      	ifdef DEBUG
    3610   00:B658                    ~ 		BORDER 13
    3611   00:B658                    ~ 	endif
    3612   00:B658  BE                  		cp (hl)
    3613   00:B659  28 FD               		jr z,.wait
    3614   00:B65B                      	if SFLAG
    3615   00:B65B                    ~ 		call scrly
    3616   00:B65B                    ~ 	endif
    3617   00:B65B                      	
    3618   00:B65B                      .nowait:
    3619   00:B65B                      	ifdef DEBUG
    3620   00:B65B                    ~ 		BORDER 14
    3621   00:B65B                    ~ 	endif
    3622   00:B65B  C9                  		ret
    3623   00:B65C                      
    3624   00:B65C                      	if EFLAG
    3625   00:B65C                      	
    3626   00:B65C                      beeper:
    3627   00:B65C                      	ifdef DEBUG
    3628   00:B65C                    ~ 		BORDER 15
    3629   00:B65C                    ~ 	endif
    3630   00:B65C  5F                  		ld e,a				; keeps JIFFY
    3631   00:B65D  3A 16 40            		ld a,(sndtyp)       ; sound to play.
    3632   00:B660  A7                  		and a               ; any sound?
    3633   00:B661  28 25               		jr z,beep1			; no.
    3634   00:B663  47                  		ld b,a              ; outer loop.
    3635   00:B664  A7                  		and a               ; test it.
    3636   00:B665  0E 0E               		ld c,14				; first value to write (0)
    3637   00:B667  FA 8A B6            		jp m,noise          ; play white noise.
    3638   00:B66A                      .beep2:
    3639   00:B66A  79                  		ld a,c              ; (5) get speaker value.
    3640   00:B66B  D3 AB               		out (MSX_PPICM),a   ; (12) write to speaker.
    3641   00:B66D  EE 01               		xor 1               ; (7) toggle bit 0.
    3642   00:B66F  4F                  		ld c,a              ; (5) store value for next time.
    3643   00:B670  50                  		ld d,b              ; (5) store loop counter.
    3644   00:B671                      		
    3645   00:B671  3A 3A 40            		ld a,(snddelay)
    3646   00:B674  B7                  		or a
    3647   00:B675  28 04               		jr z,.nodelay
    3648   00:B677  47                  		ld b,a
    3649   00:B678  10 FE               		djnz $
    3650   00:B67A  42                  		ld b,d
    3651   00:B67B                      .nodelay:		
    3652   00:B67B  7B                  		ld a,e				; (5) restore old JiFFY
    3653   00:B67C                      .beep3:
    3654   00:B67C  BE                  		cp (hl)				; (8) next frame?
    3655   00:B67D  20 05               		jr nz,.beep4		; (8/13) yes, no more processing please.
    3656   00:B67F  10 FB               		djnz .beep3         ; (14/9) loop while frame doesn't changes.
    3657   00:B681                      		
    3658   00:B681  42                  		ld b,d              ; (5) restore loop counter.
    3659   00:B682  10 E6               		djnz .beep2         ; (14/9) continue noise.
    3660   00:B684                      							; (87)
    3661   00:B684                      .beep4:
    3662   00:B684  7A                  		ld a,d              ; where we got to.
    3663   00:B685                      vsynca:
    3664   00:B685  32 16 40            		ld (sndtyp),a       ; remember for next time.
    3665   00:B688                      beep1:		
    3666   00:B688  7B                  		ld a,e
    3667   00:B689                      
    3668   00:B689                      	ifdef DEBUG
    3669   00:B689                    ~ 		BORDER 14
    3670   00:B689                    ~ 	endif
    3671   00:B689                      
    3672   00:B689  C9                  		ret
    3673   00:B68A                      
    3674   00:B68A                      ; Play white noise
    3675   00:B68A                      
    3676   00:B68A                      noise: 
    3677   00:B68A  D6 7F               		sub 127
    3678   00:B68C  47                  		ld b,a				; outer loop
    3679   00:B68D                      vsync7:
    3680   00:B68D  ED 5F               		ld a,r              ; get random speaker value.
    3681   00:B68F  E6 02               		and 2               ; only retain the speaker/earphone bits.
    3682   00:B691  0F                  		rrca
    3683   00:B692  B1                  		or c                ; merge with command PPI bit 7.
    3684   00:B693  D3 AB               		out (MSX_PPICM),a   ; write to speaker.
    3685   00:B695  7B                  		ld a,e				; restore old JiFFY
    3686   00:B696  BE                  		cp (hl)             ; subtract last reading.
    3687   00:B697  C2 A1 B6            		jp nz,vsync8        ; yes, no more processing please.
    3688   00:B69A  78                  		ld a,b
    3689   00:B69B                      		;and 127
    3690   00:B69B  3C                  		inc a
    3691   00:B69C                      vsync9:
    3692   00:B69C  3D                  		dec a
    3693   00:B69D  20 FD               		jr nz,vsync9        ; loop.
    3694   00:B69F  10 EC               		djnz vsync7         ; continue noise.
    3695   00:B6A1                      vsync8:
    3696   00:B6A1  AF                  		xor a
    3697   00:B6A2  18 E1               		jr vsynca
    3698   00:B6A4                      
    3699   00:B6A4                      	endif
    3700   00:B6A4                      	
    3701   00:B6A4                      ; Redraw the screen.
    3702   00:B6A4                      
    3703   00:B6A4                      redraw:
    3704   00:B6A4                      	if MBFLAG
    3705   00:B6A4                    ~ 		ld a,WINDOWWID
    3706   00:B6A4                    ~ 		ld (winwid),a
    3707   00:B6A4                    ~ 		ld a,WINDOWHGT
    3708   00:B6A4                    ~ 		ld (winhgt),a
    3709   00:B6A4                    ~ 	endif
    3710   00:B6A4                      
    3711   00:B6A4  CD 55 C7            		call clrscrmap
    3712   00:B6A7  DD E5               		push ix             ; place sprite pointer on stack.
    3713   00:B6A9                      		; ld (nohide),a		; disable screen hiding
    3714   00:B6A9                      		
    3715   00:B6A9  CD 46 BF            		call droom          ; show screen layout.
    3716   00:B6AC                      	if OFLAG
    3717   00:B6AC  CD 8F BB            		call shwob          ; draw objects.
    3718   00:B6AF                      	endif
    3719   00:B6AF                      
    3720   00:B6AF                      		WAITFRAME
    3720   00:B6AF                    >   ifdef DEBUG
    3720   00:B6AF                    ~   BORDER 13
    3720   00:B6AF                    ~   endif
    3720   00:B6AF  FB                >   ei
    3720   00:B6B0  21 9E 5C          >   ld hl,MSX_JIFFY
    3720   00:B6B3  7E                >   ld a,(hl)
    3720   00:B6B4                    > .wait:
    3720   00:B6B4  BE                >   cp (hl)
    3720   00:B6B5  28 FD             >   jr z,.wait
    3720   00:B6B7                    >   ifdef DEBUG
    3720   00:B6B7                    ~   BORDER 14
    3720   00:B6B7                    ~   endif
    3721   00:B6B7                      		
    3722   00:B6B7  21 80 45            		ld hl,spratr
    3723   00:B6BA  11 00 1B            		ld de,MSX_SPRATR
    3724   00:B6BD  06 80               		ld b,128
    3725   00:B6BF  CD 0E C3            		call ram2vram			   
    3726   00:B6C2                      	   
    3727   00:B6C2                      rpblc1:
    3728   00:B6C2                      	if PFLAG
    3729   00:B6C2  CD B3 B9            		call dshrp          ; redraw shrapnel.
    3730   00:B6C5                      	endif
    3731   00:B6C5                      	if AFLAG
    3732   00:B6C5                    ~ 		call rbloc          ; draw blocks for this screen
    3733   00:B6C5                    ~ 	endif
    3734   00:B6C5  DD E1               		pop ix              ; retrieve sprite pointer.
    3735   00:B6C7  C9                  		ret
    3736   00:B6C8                      
    3737   00:B6C8                      ; swap PAL/NTSC
    3738   00:B6C8                      
    3739   00:B6C8                      swaphz:		
    3740   00:B6C8  3A E8 5F            		ld a,(MSX_RG9SAV)
    3741   00:B6CB  EE 02               		xor 2
    3742   00:B6CD  47                  		ld b,a
    3743   00:B6CE  0E 09               		ld c,9
    3744   00:B6D0  F5                  		push af
    3745   00:B6D1  CD 47 00            		call MSX_WRTVDP			
    3746   00:B6D4  F1                  		pop af
    3747   00:B6D5  C9                  		ret
    3748   00:B6D6                      
    3749   00:B6D6                      ; Clear screen routine.
    3750   00:B6D6                      
    3751   00:B6D6                      cls:
    3752   00:B6D6  3A 39 40            		ld a,(clratt)
    3753   00:B6D9  5F                  		ld e,a
    3754   00:B6DA  E6 F0               		and $F0
    3755   00:B6DC  0F                  		rrca
    3756   00:B6DD  0F                  		rrca
    3757   00:B6DE  0F                  		rrca
    3758   00:B6DF  0F                  		rrca
    3759   00:B6E0  32 E9 53            		ld (MSX_FORCLR),a
    3760   00:B6E3  7B                  		ld a,e
    3761   00:B6E4  E6 0F               		and $0F
    3762   00:B6E6  32 EA 53            		ld (MSX_BAKCLR),a
    3763   00:B6E9  AF                  		xor a
    3764   00:B6EA  CD 71 CB            		call MSX_CLS
    3765   00:B6ED  21 00 00            		ld hl,0             ; set hl to origin (0, 0).
    3766   00:B6F0  22 35 40            		ld (charx),hl       ; reset coordinates.
    3767   00:B6F3  CD 55 C7            		call clrscrmap
    3768   00:B6F6  C3 06 C3            		jp dissprs
    3769   00:B6F9                      
    3770   00:B6F9                      ; Set palette routine and data.
    3771   00:B6F9                      ; Palette.
    3772   00:B6F9                      
    3773   00:B6F9                      setpal:
    3774   00:B6F9  3A 07 00            		ld a,(MSX_VDPPRT)	; get first VDP write port
    3775   00:B6FC  4F                  		ld c,a
    3776   00:B6FD  0C                  		inc c      		; prepare to write register data
    3777   00:B6FE  AF                  		xor a      		; from color 0
    3778   00:B6FF  ED 79               		out (c),a
    3779   00:B701  3E 90               		ld a,16+128		; write R#16
    3780   00:B703  ED 79               		out (c),a
    3781   00:B705  0C                  		inc c      		; prepare to write palette data
    3782   00:B706  06 20               		ld b,32      	; 16 color * 2 bytes for palette data
    3783   00:B708  ED B3               		otir
    3784   00:B70A  C9                  		ret
    3785   00:B70B                      		
    3786   00:B70B                      	if (PFLAG or DFLAG)
    3787   00:B70B                      	
    3788   00:B70B                      fdchk:
    3789   00:B70B  7E                  		ld a,(hl)           ; fetch cell.
    3790   00:B70C  FE 04               		cp FODDER           ; is it fodder?
    3791   00:B70E  C0                  		ret nz              ; no.
    3792   00:B70F  36 00               		ld (hl),0           ; rewrite block type.
    3793   00:B711  E5                  		push hl             ; store pointer to block.
    3794   00:B712  11 00 46            		ld de,MAP           ; address of map.
    3795   00:B715  A7                  		and a               ; clear carry flag for subtraction.
    3796   00:B716  ED 52               		sbc hl,de           ; find simple displacement for block.
    3797   00:B718  7D                  		ld a,l              ; low byte is y coordinate.
    3798   00:B719  E6 1F               		and 31              ; column position 0 - 31.
    3799   00:B71B  32 55 40            		ld (dispy),a        ; set up y position.
    3800   00:B71E  29                  		add hl,hl           ; multiply displacement by 8.
    3801   00:B71F  29                  		add hl,hl
    3802   00:B720  29                  		add hl,hl
    3803   00:B721  7C                  		ld a,h              ; x coordinate now in h.
    3804   00:B722  32 54 40            		ld (dispx),a        ; set the display coordinate.
    3805   00:B725  2A 5A B5            		ld hl,(blkptr)      ; blocks.
    3806   00:B728  22 3E 40            		ld (grbase),hl      ; set graphics base.		
    3807   00:B72B  AF                  		xor a               ; block to write.
    3808   00:B72C  CD C0 BE            		call pattr          ; write block.
    3809   00:B72F  E1                  		pop hl              ; restore block pointer.
    3810   00:B730  C9                  		ret
    3811   00:B731                      		
    3812   00:B731                      	endif
    3813   00:B731                      	
    3814   00:B731                      ; Colour a sprite.
    3815   00:B731                      
    3816   00:B731                      cspr:
    3817   00:B731  DD 71 05            		ld (ix+5),c
    3818   00:B734  C9                  		ret
    3819   00:B735                      				
    3820   00:B735                      	if PFLAG
    3821   00:B735                      
    3822   00:B735                      ; Specialist routines.
    3823   00:B735                      ; Process shrapnel.
    3824   00:B735                      		
    3825   00:B735                      proshr:
    3826   00:B735  CD 69 B7            		call setshr
    3827   00:B738                      		
    3828   00:B738                      proshrnoset:
    3829   00:B738                      		
    3830   00:B738                      	ifdef DEBUG
    3831   00:B738                    ~ 		BORDER 5
    3832   00:B738                    ~ 	endif
    3833   00:B738                      
    3834   00:B738  CD 50 B7            		call proshr0
    3835   00:B73B  CD 50 B7            		call proshr0
    3836   00:B73E  CD 50 B7            		call proshr0
    3837   00:B741  CD 50 B7            		call proshr0
    3838   00:B744  CD 50 B7            		call proshr0
    3839   00:B747  CD 50 B7            		call proshr0
    3840   00:B74A  CD 50 B7            		call proshr0
    3841   00:B74D  CD 50 B7            		call proshr0
    3842   00:B750                      		
    3843   00:B750                      	ifdef DEBUG
    3844   00:B750                    ~ 
    3845   00:B750                    ~ 		call proshr0 	
    3846   00:B750                    ~ 		BORDER 14
    3847   00:B750                    ~ 		ret
    3848   00:B750                    ~ 
    3849   00:B750                    ~ 	else
    3850   00:B750                      
    3851   00:B750                      proshr0:
    3852   00:B750  DD 2A C0 4D         		ld ix,(shraddr)
    3853   00:B754  06 03               		ld b,NUMSHR/(9*2)
    3854   00:B756                      proshloop:
    3855   00:B756  DD 7E 00            		ld a,(ix+0)         ; on/off marker.
    3856   00:B759  17                  		rla                 ; check its status.
    3857   00:B75A  D4 76 B7            		call nc,proshx      ; on, so process it.
    3858   00:B75D  11 12 00            		ld de,SHRSIZ*2      ; distance to next.
    3859   00:B760  DD 19               		add ix,de           ; point there.
    3860   00:B762  10 F2               		djnz proshloop      ; round again.
    3861   00:B764  DD 22 C0 4D         		ld (shraddr),ix
    3862   00:B768  C9                  		ret
    3863   00:B769                      	
    3864   00:B769                      	endif
    3865   00:B769                      	
    3866   00:B769                      setshr:
    3867   00:B769                      ;		ld a,(MSX_JIFFY)
    3868   00:B769                      setshr0:
    3869   00:B769  21 CB 4D            		ld hl,SHRAPN+SHRSIZ        ; table.
    3870   00:B76C  0F                  		rrca
    3871   00:B76D  38 03               		jr c,.shrodd
    3872   00:B76F  21 C2 4D            		ld hl,SHRAPN			 ; table.
    3873   00:B772                      .shrodd:
    3874   00:B772  22 C0 4D            		ld (shraddr),hl
    3875   00:B775  C9                  		ret
    3876   00:B776                      
    3877   00:B776                      	ifdef DEBUG
    3878   00:B776                    ~ 		
    3879   00:B776                    ~ proshr0:
    3880   00:B776                    ~ 		ld ix,(shraddr)
    3881   00:B776                    ~ 		ld b,NUMSHR/(9*2)
    3882   00:B776                    ~ proshloop:
    3883   00:B776                    ~ 		ld a,(ix+0)         ; on/off marker.
    3884   00:B776                    ~ 		rla                 ; check its status.
    3885   00:B776                    ~ 		call nc,proshx      ; on, so process it.
    3886   00:B776                    ~ 		ld de,SHRSIZ*2      ; distance to next.
    3887   00:B776                    ~ 		add ix,de           ; point there.
    3888   00:B776                    ~ 		djnz proshloop      ; round again.
    3889   00:B776                    ~ 		ld (shraddr),ix
    3890   00:B776                    ~ 		ret
    3891   00:B776                    ~ 
    3892   00:B776                    ~ 	endif
    3893   00:B776                      
    3894   00:B776                      proshx:
    3895   00:B776  2A 17 40            		ld hl,(shrplot)
    3896   00:B779  E9                  		jp (hl)
    3897   00:B77A                      
    3898   00:B77A                      prosh1:
    3899   00:B77A  C5                  		push bc             ; store counter.
    3900   00:B77B  CD E9 B7            		call plot           ; delete the pixel.
    3901   00:B77E  DD 7E 00            		ld a,(ix+0)         ; restore shrapnel type.
    3902   00:B781  CD 89 B7            		call prosh2         ; run the routine.
    3903   00:B784  CD C2 B7            		call chkxy          ; check x and y are good before we redisplay.
    3904   00:B787  C1                  		pop bc              ; restore counter.
    3905   00:B788  C9                  		ret
    3906   00:B789                      prosh2:
    3907   00:B789  87                  		add a,a		
    3908   00:B78A  C6 08               		add a,shrptr&$FF
    3909   00:B78C  6F                  		ld l,a
    3910   00:B78D  26 C8               		ld h,shrptr>>8
    3911   00:B78F                      		;ld (addr+1),a			; auto-modifying code
    3912   00:B78F                      ;addr:
    3913   00:B78F                      		;ld hl,(shrptr)
    3914   00:B78F                      
    3915   00:B78F  C3 C1 C2            		jp jumphl
    3916   00:B792                       
    3917   00:B792                      
    3918   00:B792                      ; Explosion shrapnel.
    3919   00:B792                      ; 220
    3920   00:B792                      /*
    3921   00:B792                    ~ shrap: 
    3922   00:B792                    ~ 		ld h,(shrsin >> 8) & $FF    ; Get MSB of table
    3923   00:B792                    ~ 		ld l,(ix+1)
    3924   00:B792                    ~ 		
    3925   00:B792                    ~ 		ld e,(hl)           ; fetch value from table.
    3926   00:B792                    ~ 		inc hl              ; next byte of table.
    3927   00:B792                    ~ 		ld d,(hl)           ; fetch value from table.
    3928   00:B792                    ~ 		
    3929   00:B792                    ~ 		inc hl              ; next byte of table.
    3930   00:B792                    ~ 		ld c,(hl)           ; fetch value from table.
    3931   00:B792                    ~ 		inc hl              ; next byte of table.
    3932   00:B792                    ~ 		ld b,(hl)           ; fetch value from table.
    3933   00:B792                    ~ 		
    3934   00:B792                    ~ 		ld l,(ix+2)         ; x coordinate in hl.
    3935   00:B792                    ~ 		ld h,(ix+3)
    3936   00:B792                    ~ 		add hl,de           ; add sine.
    3937   00:B792                    ~ 		ld (ix+2),l         ; store new coordinate.
    3938   00:B792                    ~ 		ld (ix+3),h
    3939   00:B792                    ~ 		
    3940   00:B792                    ~ 		ld l,(ix+4)         ; y coordinate in hl.
    3941   00:B792                    ~ 		ld h,(ix+5)
    3942   00:B792                    ~ 		add hl,bc           ; add cosine.
    3943   00:B792                    ~ 		ld (ix+4),l         ; store new coordinate.
    3944   00:B792                    ~ 		ld (ix+5),h
    3945   00:B792                    ~ 		ret
    3946   00:B792                    ~  */
    3947   00:B792                       ; 182 -> 156
    3948   00:B792                      shrap: 
    3949   00:B792  26 C8               		ld h,shrsin>>8    ; Get MSB of table
    3950   00:B794  DD 7E 01            		ld a,(ix+1)
    3951   00:B797  C6 18               		add a,shrsin&$FF	; table offset (saving some bytes)
    3952   00:B799  6F                  		ld l,a
    3953   00:B79A  ED 73 7A 40         		ld (stack),sp
    3954   00:B79E  F3                  		di
    3955   00:B79F  F9                  		ld sp,hl
    3956   00:B7A0  D1                  		pop de						; fetch sine
    3957   00:B7A1  C1                  		pop bc						; fetch cosine
    3958   00:B7A2  DD F9               		ld sp,ix
    3959   00:B7A4  E1                  		pop hl
    3960   00:B7A5  E1                  		pop hl
    3961   00:B7A6  19                  		add hl,de
    3962   00:B7A7  E5                  		push hl		
    3963   00:B7A8  E1                  		pop hl
    3964   00:B7A9  E1                  		pop hl
    3965   00:B7AA  09                  		add hl,bc
    3966   00:B7AB  E5                  		push hl				
    3967   00:B7AC  FB                  		ei
    3968   00:B7AD  ED 7B 7A 40         		ld sp,(stack)            ;parameter will overwritten
    3969   00:B7B1  C9                  		ret
    3970   00:B7B2                      		
    3971   00:B7B2  DD 35 05            dotl:   dec (ix+5)          ; move left.
    3972   00:B7B5  C9                          ret
    3973   00:B7B6  DD 34 05            dotr:   inc (ix+5)          ; move left.
    3974   00:B7B9  C9                          ret
    3975   00:B7BA  DD 35 03            dotu:   dec (ix+3)          ; move up.
    3976   00:B7BD  C9                          ret
    3977   00:B7BE  DD 34 03            dotd:   inc (ix+3)          ; move down.
    3978   00:B7C1  C9                          ret
    3979   00:B7C2                      
    3980   00:B7C2                      ; Check coordinates are good before redrawing at new position.
    3981   00:B7C2                      
    3982   00:B7C2                      chkxy:
    3983   00:B7C2                      ;		ld (ix+7),255
    3984   00:B7C2                      
    3985   00:B7C2  21 54 B5            		ld hl,wntopx        ; window top.
    3986   00:B7C5  DD 7E 03            		ld a,(ix+3)         ; fetch shrapnel Y coordinate.
    3987   00:B7C8  BE                  		cp (hl)             ; compare with top window limit.
    3988   00:B7C9  38 19               		jr c,kilshr         ; out of window, kill shrapnel.
    3989   00:B7CB  23                  		inc hl              ; left edge.
    3990   00:B7CC  DD 7E 05            		ld a,(ix+5)         ; fetch shrapnel X coordinate.
    3991   00:B7CF  BE                  		cp (hl)             ; compare with left window limit.
    3992   00:B7D0  38 12               		jr c,kilshr         ; out of window, kill shrapnel.
    3993   00:B7D2                      
    3994   00:B7D2  23                  		inc hl              ; point to bottom.
    3995   00:B7D3  7E                  		ld a,(hl)           ; fetch window limit.
    3996   00:B7D4  C6 0F               		add a,MSX_SPRVS-1   ; add height of sprite.
    3997   00:B7D6  DD BE 03            		cp (ix+3)           ; compare with shrapnel Y coordinate.
    3998   00:B7D9  38 09               		jr c,kilshr         ; off screen, kill shrapnel.
    3999   00:B7DB  23                  		inc hl              ; point to right edge.
    4000   00:B7DC  7E                  		ld a,(hl)           ; fetch shrapnel X coordinate.
    4001   00:B7DD  C6 0F               		add a,MSX_SPRVS-1   ; add width of sprite.
    4002   00:B7DF  DD BE 05            		cp (ix+5)           ; compare with window limit.
    4003   00:B7E2  30 05               		jr nc,plot          ; off screen, kill shrapnel.
    4004   00:B7E4                      
    4005   00:B7E4                      kilshr:
    4006   00:B7E4  DD 36 00 80         		ld (ix+0),128       ; switch off shrapnel.
    4007   00:B7E8                      		; ld (ix+7),255       ; switch off shrapnel.
    4008   00:B7E8                      		
    4009   00:B7E8  C9                  		ret
    4010   00:B7E9                      
    4011   00:B7E9                      
    4012   00:B7E9                      ; Drop through.
    4013   00:B7E9                      ; Display shrapnel.
    4014   00:B7E9                      
    4015   00:B7E9                      plot:   ; ret
    4016   00:B7E9                      
    4017   00:B7E9  DD 6E 03            		ld l,(ix+3)         ; y integer.
    4018   00:B7EC  DD 66 05            		ld h,(ix+5)         ; x integer.
    4019   00:B7EF  22 54 40            		ld (dispx),hl       ; workspace coordinates.
    4020   00:B7F2  DD 7E 00            		ld a,(ix+0)         ; type.
    4021   00:B7F5  A7                  		and a               ; is it a laser?
    4022   00:B7F6  28 1F               		jr z,plot1          ; yes, draw laser instead.
    4023   00:B7F8                      
    4024   00:B7F8                      ; INPUT:
    4025   00:B7F8                      ; 	H = X
    4026   00:B7F8                      ;	L = Y
    4027   00:B7F8                      plot0:
    4028   00:B7F8                      /*
    4029   00:B7F8                    ~ 		ld a,h              ; 5 which pixel within byte do we
    4030   00:B7F8                    ~ 		and 7               ; 7 want to set first?		
    4031   00:B7F8                    ~ 		ld e,a				; 5
    4032   00:B7F8                    ~ 		call scadd          	; screen address.		
    4033   00:B7F8                    ~ 		ld a,l				; 5 (22)
    4034   00:B7F8                    ~ 		di					; 5
    4035   00:B7F8                    ~ 		out (MSX_VDPCW),a	; 12
    4036   00:B7F8                    ~ 		ld a,h				; 5
    4037   00:B7F8                    ~ 		out (MSX_VDPCW),a	; 12
    4038   00:B7F8                    ~ 		ld d,dots>>8		; 7 Get MSB of table
    4039   00:B7F8                    ~ 		ld a,(de)			; 8 get value
    4040   00:B7F8                    ~ 		ld e,a				; 5
    4041   00:B7F8                    ~ 		in a,(MSX_VDPDRW)   ; 12 (66)
    4042   00:B7F8                    ~ 		xor e				; 5
    4043   00:B7F8                    ~ 		ld e,a				; 5
    4044   00:B7F8                    ~ 		ld a,l				; 5
    4045   00:B7F8                    ~ 		out (MSX_VDPCW),a	; 12
    4046   00:B7F8                    ~ 		ld a,h				; 5
    4047   00:B7F8                    ~ 		or 64				; 7
    4048   00:B7F8                    ~ 		out (MSX_VDPCW),a	; 12
    4049   00:B7F8                    ~ 		ei					; 5
    4050   00:B7F8                    ~ 		ld a,e				; 5
    4051   00:B7F8                    ~ 		out (MSX_VDPDRW),a	; 12 (73) 161		 = 139
    4052   00:B7F8                    ~ 		ret	   
    4053   00:B7F8                    ~ */
    4054   00:B7F8                      
    4055   00:B7F8                      
    4056   00:B7F8  7C                  		ld a,h              ; 5 which pixel within byte do we
    4057   00:B7F9  E6 07               		and 7               ; 7 want to set first?		
    4058   00:B7FB  5F                  		ld e,a				; 5	(24)
    4059   00:B7FC  CD 26 C4            		call scadd          	; screen address.					
    4060   00:B7FF  0E BF               		ld c,MSX_VDPCW		; 7
    4061   00:B801  F3                  		di					; 5
    4062   00:B802  ED 69               		out (c),l			; 14	
    4063   00:B804  ED 61               		out (c),h			; 14
    4064   00:B806  16 C8               		ld d,dots>>8		; 7 Get MSB of table
    4065   00:B808  1A                  		ld a,(de)			; 8 get value
    4066   00:B809  5F                  		ld e,a				; 5
    4067   00:B80A                      pltwrt:
    4068   00:B80A  DB BE               		in a,(MSX_VDPDRW)   ; 12
    4069   00:B80C  AB                  		xor e				; 5 (70)
    4070   00:B80D  ED 69               		out (c),l			; 14
    4071   00:B80F  CB F4               		set 6,h				; 10
    4072   00:B811  ED 61               		out (c),h			; 14
    4073   00:B813  FB                  		ei					; 5
    4074   00:B814  D3 BE               		out (MSX_VDPDRW),a	; 12 (65)		 = 159
    4075   00:B816  C9                  		ret	   
    4076   00:B817                      		
    4077   00:B817                      plot1:
    4078   00:B817  CD 26 C4            		call scadd          ; screen address.
    4079   00:B81A  0E BF               		ld c,MSX_VDPCW		; 7
    4080   00:B81C  F3                  		di					; 5
    4081   00:B81D  ED 69               		out (c),l			; 14	
    4082   00:B81F  ED 61               		out (c),h			; 14
    4083   00:B821  1E FF               		ld e,255
    4084   00:B823  C3 0A B8            		jp pltwrt
    4085   00:B826                      		
    4086   00:B826                      		/*
    4087   00:B826                    ~ 		and $FF					; dummy, wait 7 cycles
    4088   00:B826                    ~ 		and $FF					; dummy, wait 7 cycles
    4089   00:B826                    ~ 		in a,(MSX_VDPDRW)   ; 12
    4090   00:B826                    ~ 		cpl					; 5 (70)
    4091   00:B826                    ~ 		out (c),l			; 14
    4092   00:B826                    ~ 		set 6,h				; 10
    4093   00:B826                    ~ 		out (c),h			; 14
    4094   00:B826                    ~ 		ei					; 5
    4095   00:B826                    ~ 		out (MSX_VDPDRW),a	; 12 (65)		 = 159
    4096   00:B826                    ~ 		ret	   
    4097   00:B826                    ~ 		*/
    4098   00:B826                      /*
    4099   00:B826                    ~ 		call scadd          ; screen address.
    4100   00:B826                    ~ 		ld a,l
    4101   00:B826                    ~ 		di
    4102   00:B826                    ~ 		out (MSX_VDPCW),a
    4103   00:B826                    ~ 		ld a,h
    4104   00:B826                    ~ 		out (MSX_VDPCW),a
    4105   00:B826                    ~ 		and $FF					; dummy, wait 7 cycles
    4106   00:B826                    ~ 		and $FF					; dummy, wait 7 cycles
    4107   00:B826                    ~ 		in a,(MSX_VDPDRW)
    4108   00:B826                    ~ 		cpl
    4109   00:B826                    ~ 		ld e,a
    4110   00:B826                    ~ 		ld a,l
    4111   00:B826                    ~ 		out (MSX_VDPCW),a
    4112   00:B826                    ~ 		ld a,h
    4113   00:B826                    ~ 		or 64
    4114   00:B826                    ~ 		out (MSX_VDPCW),a
    4115   00:B826                    ~ 		ei	
    4116   00:B826                    ~ 		ld a,e
    4117   00:B826                    ~ 		out (MSX_VDPDRW),a		
    4118   00:B826                    ~ 		ret
    4119   00:B826                    ~ */
    4120   00:B826                      
    4121   00:B826                      
    4122   00:B826                      
    4123   00:B826                      trail:
    4124   00:B826  DD 35 01            		dec (ix+1)          ; time remaining.
    4125   00:B829  CA 48 B8            		jp z,trailk        ; time to switch it off.
    4126   00:B82C  CD A6 B9            		call qrand          ; get a random number.
    4127   00:B82F  1F                  		rra                 ; x or y axis?
    4128   00:B830  38 0B               		jr c,.trailv        ; use x.
    4129   00:B832  1F                  		rra                 ; which direction?
    4130   00:B833  38 04               		jr c,.traill        ; go left.
    4131   00:B835  DD 34 05            		inc (ix+5)          ; go right.
    4132   00:B838  C9                  		ret
    4133   00:B839                      .traill:
    4134   00:B839  DD 35 05            		dec (ix+5)          ; go left.
    4135   00:B83C  C9                  		ret
    4136   00:B83D                      .trailv:
    4137   00:B83D  1F                  		rra                 ; which direction?
    4138   00:B83E  38 04               		jr c,.trailu        ; go up.
    4139   00:B840  DD 34 03            		inc (ix+3)          ; go down.
    4140   00:B843  C9                  		ret
    4141   00:B844                      .trailu:
    4142   00:B844  DD 35 03            		dec (ix+3)          ; go up.
    4143   00:B847  C9                  		ret
    4144   00:B848                      trailk:
    4145   00:B848  DD 36 03 C8         		ld (ix+3),200       ; set off-screen to kill vapour trail.
    4146   00:B84C  C9                  		ret
    4147   00:B84D                      
    4148   00:B84D                      laser:
    4149   00:B84D  DD 7E 01            		ld a,(ix+1)         ; direction.
    4150   00:B850  1F                  		rra                 ; left or right?
    4151   00:B851  30 04               		jr nc,laserl        ; move left.
    4152   00:B853  06 08               		ld b,8              ; distance to travel.
    4153   00:B855  18 02               		jr laserm           ; move laser.
    4154   00:B857                      laserl:
    4155   00:B857  06 F8               		ld b,248            ; distance to travel.
    4156   00:B859                      laserm:
    4157   00:B859  DD 7E 05            		ld a,(ix+5)         ; y position.
    4158   00:B85C  80                  		add a,b             ; add distance.
    4159   00:B85D  DD 77 05            		ld (ix+5),a         ; set new y coordinate.
    4160   00:B860                      
    4161   00:B860                      ; Test new block.
    4162   00:B860                      
    4163   00:B860  32 55 40            		ld (dispy),a        ; set y for block collision detection purposes.
    4164   00:B863  DD 7E 03            		ld a,(ix+3)         ; get x.
    4165   00:B866  32 54 40            		ld (dispx),a        ; set coordinate for collision test.
    4166   00:B869  CD 60 C0            		call tstbl          ; get block type there.
    4167   00:B86C  FE 02               		cp WALL             ; is it solid?
    4168   00:B86E  28 D8               		jr z,trailk         ; yes, it cannot pass.
    4169   00:B870                      
    4170   00:B870                      	if (PFLAG or DFLAG)
    4171   00:B870  FE 04               		cp FODDER           ; is it fodder?
    4172   00:B872  20 05               		jr nz,.exit         ; no, ignore it.
    4173   00:B874  CD 0B B7            		call fdchk          ; remove fodder block.
    4174   00:B877  18 CF               		jr trailk           ; destroy laser.
    4175   00:B879                      .exit
    4176   00:B879                      	endif
    4177   00:B879  C9                  		ret
    4178   00:B87A                      
    4179   00:B87A                      ; Plot, preserving de.
    4180   00:B87A                      
    4181   00:B87A                      plotde:
    4182   00:B87A  D5                  		push de             ; put de on stack.
    4183   00:B87B  CD E9 B7            		call plot           ; plot pixel.
    4184   00:B87E  D1                  		pop de              ; restore de from stack.
    4185   00:B87F  C9                  		ret
    4186   00:B880                      
    4187   00:B880                      ; Shoot a laser.
    4188   00:B880                      
    4189   00:B880                      shoot:
    4190   00:B880  4F                  		ld c,a              ; store direction in c register.
    4191   00:B881  DD 7E 03            		ld a,(ix+3)         ; sprite x coordinate.
    4192   00:B884                      shoot1:
    4193   00:B884  C6 07               		add a,7             ; down 7 pixels.
    4194   00:B886  6F                  		ld l,a              ; puty x coordinate in l.
    4195   00:B887  DD 66 04            		ld h,(ix+4)         ; sprite y coordinate in h.
    4196   00:B88A  DD E5               		push ix             ; store pointer to sprite.
    4197   00:B88C  CD 4E B9            		call fpslot         ; find particle slot.
    4198   00:B88F  30 2C               		jr nc,vapou2        ; failed, restore ix.
    4199   00:B891  DD 36 00 00         		ld (ix+0),0         ; set up a laser.
    4200   00:B895  DD 71 01            		ld (ix+1),c         ; set the direction.
    4201   00:B898  DD 75 03            		ld (ix+3),l         ; set x coordinate.
    4202   00:B89B  CB 19               		rr c                ; check direction we want.
    4203   00:B89D  38 08               		jr c,shootr         ; shoot right.
    4204   00:B89F  7C                  		ld a,h              ; y position.
    4205   00:B8A0                      
    4206   00:B8A0                      shoot0:
    4207   00:B8A0  E6 F8               		and 248             ; align on character boundary.
    4208   00:B8A2  DD 77 05            		ld (ix+5),a         ; set y coordinate.
    4209   00:B8A5  18 2D               		jr vapou0           ; draw first image.
    4210   00:B8A7                      shootr:
    4211   00:B8A7  7C                  		ld a,h              ; y position.
    4212   00:B8A8  C6 0F               		add a,15            ; look right.
    4213   00:B8AA  18 F4               		jr shoot0           ; align and continue.
    4214   00:B8AC                      
    4215   00:B8AC                      ; Create a bit of vapour trail.
    4216   00:B8AC                      
    4217   00:B8AC                      vapour:
    4218   00:B8AC  DD E5               		push ix             ; store pointer to sprite.
    4219   00:B8AE  DD 6E 03            		ld l,(ix+3)         ; x coordinate.
    4220   00:B8B1  DD 66 04            		ld h,(ix+4)         ; y coordinate.
    4221   00:B8B4                      vapou3:
    4222   00:B8B4  11 07 07            		ld de,7*256+7       ; mid-point of sprite.
    4223   00:B8B7  19                  		add hl,de           ; point to centre of sprite.
    4224   00:B8B8  CD 4E B9            		call fpslot         ; find particle slot.
    4225   00:B8BB  38 03               		jr c,vapou1         ; no, we can use it.
    4226   00:B8BD                      vapou2:
    4227   00:B8BD  DD E1               		pop ix              ; restore sprite pointer.
    4228   00:B8BF  C9                  		ret                 ; out of slots, can't generate anything.
    4229   00:B8C0                      vapou1:
    4230   00:B8C0  DD 75 03            		ld (ix+3),l         ; set up x.
    4231   00:B8C3  DD 74 05            		ld (ix+5),h         ; set up y coordinate.
    4232   00:B8C6  CD A6 B9            		call qrand          ; get quick random number.
    4233   00:B8C9  E6 0F               		and 15              ; random time.
    4234   00:B8CB  C6 0A               		add a,VAPTIM      ; minimum time on screen.
    4235   00:B8CD  DD 77 01            		ld (ix+1),a         ; set time on screen.
    4236   00:B8D0  DD 36 00 01         		ld (ix+0),1         ; define particle as vapour trail.
    4237   00:B8D4                      vapou0:
    4238   00:B8D4  CD C2 B7            		call chkxy          ; plot first position.
    4239   00:B8D7  18 E4               		jr vapou2
    4240   00:B8D9                      
    4241   00:B8D9                      ; Create a user particle.
    4242   00:B8D9                      
    4243   00:B8D9                      ptusr:
    4244   00:B8D9  08                  		ex af,af            ; store timer.
    4245   00:B8DA  DD 6E 03            		ld l,(ix+3)         ; x coordinate.
    4246   00:B8DD  DD 66 04            		ld h,(ix+4)         ; y coordinate.
    4247   00:B8E0  11 07 07            		ld de,7*256+7       ; mid-point of sprite.
    4248   00:B8E3  19                  		add hl,de           ; point to centre of sprite.
    4249   00:B8E4  CD 4E B9            		call fpslot         ; find particle slot.
    4250   00:B8E7  38 01               		jr c,.ptusr1        ; no, we can use it.
    4251   00:B8E9  C9                  		ret                 ; out of slots, can't generate anything.
    4252   00:B8EA                      .ptusr1:
    4253   00:B8EA  DD 75 03            		ld (ix+3),l         ; set up x.
    4254   00:B8ED  DD 74 05            		ld (ix+5),h         ; set up y coordinate.
    4255   00:B8F0  08                  		ex af,af            ; restore timer.
    4256   00:B8F1  DD 77 01            		ld (ix+1),a         ; set time on screen.
    4257   00:B8F4  DD 36 00 07         		ld (ix+0),7         ; define particle as user particle.
    4258   00:B8F8  C3 C2 B7            		jp chkxy            ; plot first position.
    4259   00:B8FB                      
    4260   00:B8FB                      
    4261   00:B8FB                      ; Create a vertical or horizontal star.
    4262   00:B8FB                      
    4263   00:B8FB  DD E5               star   push ix             ; store pointer to sprite.
    4264   00:B8FD  CD 4E B9                   call fpslot         ; find particle slot.
    4265   00:B900  DA 06 B9                   jp c,star7          ; found one we can use.
    4266   00:B903  DD E1               star0  pop ix              ; restore sprite pointer.
    4267   00:B905  C9                         ret                 ; out of slots, can't generate anything.
    4268   00:B906                      
    4269   00:B906  79                  star7  ld a,c              ; direction.
    4270   00:B907  E6 03                      and 3               ; is it left?
    4271   00:B909  28 21                      jr z,star1          ; yes, it's horizontal.
    4272   00:B90B  3D                         dec a               ; is it right?
    4273   00:B90C  28 2C                      jr z,star2          ; yes, it's horizontal.
    4274   00:B90E  3D                         dec a               ; is it up?
    4275   00:B90F  28 35                      jr z,star3          ; yes, it's vertical.
    4276   00:B911                      
    4277   00:B911  3A 54 B5                   ld a,(wntopx)       ; get edge of screen.
    4278   00:B914  3C                         inc a               ; down one pixel.
    4279   00:B915  DD 77 03            star8  ld (ix+3),a         ; set x coord.
    4280   00:B918  CD A6 B9                   call qrand          ; get quick random number.
    4281   00:B91B  DD 77 05            star9  ld (ix+5),a         ; set y position.
    4282   00:B91E  79                         ld a,c              ; direction.
    4283   00:B91F  E6 03                      and 3               ; zero to three.
    4284   00:B921  C6 03                      add a,3             ; 3 to 6 for starfield.
    4285   00:B923  DD 77 00                   ld (ix+0),a         ; define particle as star.
    4286   00:B926  CD C2 B7                   call chkxy          ; plot first position.
    4287   00:B929  C3 03 B9                   jp star0
    4288   00:B92C  CD A6 B9            star1  call qrand          ; get quick random number.
    4289   00:B92F  DD 77 03                   ld (ix+3),a         ; set x coord.
    4290   00:B932  3A 57 B5                   ld a,(wnrgtx)       ; get edge of screen.
    4291   00:B935  C6 0F                      add a,15            ; add width of sprite minus 1.
    4292   00:B937  C3 1B B9                   jp star9
    4293   00:B93A  CD A6 B9            star2  call qrand          ; get quick random number.
    4294   00:B93D  DD 77 03                   ld (ix+3),a         ; set x coord.
    4295   00:B940  3A 55 B5                   ld a,(wnlftx)       ; get edge of screen.
    4296   00:B943  C3 1B B9                   jp star9
    4297   00:B946  3A 56 B5            star3  ld a,(wnbotx)       ; get edge of screen.
    4298   00:B949  C6 0F                      add a,15            ; height of sprite minus one pixel.
    4299   00:B94B  C3 15 B9                   jp star8
    4300   00:B94E                      
    4301   00:B94E                      
    4302   00:B94E                      ; Find particle slot for lasers or vapour trail.
    4303   00:B94E                      ; Can't use alternate accumulator.
    4304   00:B94E                      
    4305   00:B94E                      fpslot:
    4306   00:B94E  DD 21 C2 4D         		ld ix,SHRAPN        ; shrapnel table.
    4307   00:B952  11 09 00            		ld de,SHRSIZ        ; size of each particle.
    4308   00:B955  06 36               		ld b,NUMSHR         ; number of pieces in table.
    4309   00:B957                      fpslt0:
    4310   00:B957  DD 7E 00            		ld a,(ix+0)         ; get type.
    4311   00:B95A  17                  		rla                 ; is this slot in use?
    4312   00:B95B  D8                  		ret c               ; no, we can use it.
    4313   00:B95C  DD 19               		add ix,de           ; point to more shrapnel.
    4314   00:B95E  10 F7               		djnz fpslt0         ; repeat for all shrapnel.
    4315   00:B960  C9                  		ret                 ; out of slots, can't generate anything.
    4316   00:B961                      
    4317   00:B961                      ; Create an explosion at sprite position.
    4318   00:B961                      
    4319   00:B961                      explod:
    4320   00:B961  4F                  		ld c,a              ; particles to create.
    4321   00:B962  DD E5               		push ix             ; store pointer to sprite.
    4322   00:B964  DD 6E 03            		ld l,(ix+3)         ; y coordinate.
    4323   00:B967  DD 66 04            		ld h,(ix+4)         ; x coordinate.
    4324   00:B96A  DD 21 C2 4D         		ld ix,SHRAPN        ; shrapnel table.
    4325   00:B96E  11 09 00            		ld de,SHRSIZ        ; size of each particle.
    4326   00:B971  06 36               		ld b,NUMSHR         ; number of pieces in table.
    4327   00:B973                      expld0:
    4328   00:B973  DD 7E 00            		ld a,(ix+0)         ; get type.
    4329   00:B976  17                  		rla                 ; is this slot in use?
    4330   00:B977  38 07               		jr c,expld1         ; no, we can use it.
    4331   00:B979                      expld2:
    4332   00:B979  DD 19               		add ix,de           ; point to more shrapnel.
    4333   00:B97B  10 F6               		djnz expld0         ; repeat for all shrapnel.
    4334   00:B97D                      expld3:
    4335   00:B97D  DD E1               		pop ix              ; restore sprite pointer.
    4336   00:B97F  C9                  		ret                 ; out of slots, can't generate any more.
    4337   00:B980                      
    4338   00:B980                      expld1:
    4339   00:B980  79                  		ld a,c              ; shrapnel counter.
    4340   00:B981  E6 0F               		and 15              ; 0 to 15.
    4341   00:B983  85                  		add a,l             ; add to x.
    4342   00:B984  DD 77 03            		ld (ix+3),a         ; x coord.
    4343   00:B987  3A 4F 40            		ld a,(seed3)        ; crap random number.
    4344   00:B98A  E6 0F               		and 15              ; 0 to 15.
    4345   00:B98C  84                  		add a,h             ; add to y.
    4346   00:B98D  DD 77 05            		ld (ix+5),a         ; y coord.
    4347   00:B990  DD 36 00 02         		ld (ix+0),2         ; switch it on.
    4348   00:B994  D9                  		exx                 ; store coordinates.
    4349   00:B995  CD C2 B7            		call chkxy          ; plot first position.
    4350   00:B998  CD A6 B9            		call qrand          ; quick random angle.
    4351   00:B99B  E6 3C               		and 60              ; keep within range.
    4352   00:B99D  DD 77 01            		ld (ix+1),a         ; angle.
    4353   00:B9A0  D9                  		exx                 ; restore coordinates.
    4354   00:B9A1  0D                  		dec c               ; one less piece of shrapnel to generate.
    4355   00:B9A2  20 D5               		jr nz,expld2        ; back to main explosion loop.
    4356   00:B9A4  18 D7               		jr expld3           ; restore sprite pointer and exit.
    4357   00:B9A6                      qrand:
    4358   00:B9A6  3A 4F 40            		ld a,(seed3)        ; random seed.
    4359   00:B9A9  6F                  		ld l,a              ; low byte.
    4360   00:B9AA  26 00               		ld h,0              ; no high byte.
    4361   00:B9AC  ED 5F               		ld a,r              ; r register.
    4362   00:B9AE  AE                  		xor (hl)            ; combine with seed.
    4363   00:B9AF  32 4F 40            		ld (seed3),a        ; new seed.
    4364   00:B9B2  C9                  		ret
    4365   00:B9B3                      
    4366   00:B9B3                      ; Display all shrapnel.
    4367   00:B9B3                      
    4368   00:B9B3                      dshrp:
    4369   00:B9B3  21 7A B8            		ld hl,plotde        ; display routine.
    4370   00:B9B6  22 17 40            		ld (shrplot),hl
    4371   00:B9B9                      		; ld (proshx+1),hl    ; modify routine.		
    4372   00:B9B9                      		
    4373   00:B9B9  AF                  		xor a
    4374   00:B9BA  CD 69 B7            		call setshr0
    4375   00:B9BD  CD 38 B7            		call proshrnoset    ; process even shrapnel.
    4376   00:B9C0  3E 01               		ld a,1
    4377   00:B9C2  CD 69 B7            		call setshr0
    4378   00:B9C5  CD 38 B7            		call proshrnoset    ; process odd shrapnel.
    4379   00:B9C8                      		
    4380   00:B9C8  21 7A B7            		ld hl,prosh1        ; processing routine.
    4381   00:B9CB  22 17 40            		ld (shrplot),hl
    4382   00:B9CE                      		; ld (proshx+1),hl    ; modify the call.
    4383   00:B9CE                      		
    4384   00:B9CE  C9                  		ret
    4385   00:B9CF                      
    4386   00:B9CF                      ; Deletes all shrapnel
    4387   00:B9CF                      
    4388   00:B9CF                      delshr: 
    4389   00:B9CF  DD 21 C2 4D         		ld ix,SHRAPN        ; table.
    4390   00:B9D3  06 36               		ld b,NUMSHR         ; shrapnel pieces to process.
    4391   00:B9D5                      		; ld d,0				; plot needs this initially		
    4392   00:B9D5                      .loop:
    4393   00:B9D5  DD 7E 00            		ld a,(ix+0)         ; on/off marker.
    4394   00:B9D8  17                  		rla
    4395   00:B9D9  38 05               		jr c,.noshr
    4396   00:B9DB  C5                  		push bc             ; store counter.
    4397   00:B9DC  CD E9 B7            		call plot           ; delete the pixel.
    4398   00:B9DF  C1                  		pop bc              ; restore counter.
    4399   00:B9E0                      .noshr:		
    4400   00:B9E0  11 09 00            		ld de,SHRSIZ        ; distance to next.
    4401   00:B9E3  DD 19               		add ix,de           ; point there.
    4402   00:B9E5  10 EE               		djnz .loop         ; round again.
    4403   00:B9E7  C9                  		ret
    4404   00:B9E8                      
    4405   00:B9E8                      inishr:	
    4406   00:B9E8  21 C2 4D            		ld hl,SHRAPN        ; table.
    4407   00:B9EB  11 C3 4D            		ld de,SHRAPN+1        ; distance to next.
    4408   00:B9EE  36 FF               		ld (hl),255
    4409   00:B9F0  01 E5 01            		ld bc,(NUMSHR*SHRSIZ)-1         ; shrapnel pieces to process.
    4410   00:B9F3  ED B0               		ldir 
    4411   00:B9F5  C9                  		ret
    4412   00:B9F6                      	   
    4413   00:B9F6                      ; Check for collision between laser and sprite.
    4414   00:B9F6                      
    4415   00:B9F6                      lcol:
    4416   00:B9F6  21 C2 4D            		ld hl,SHRAPN        ; shrapnel table.
    4417   00:B9F9  11 09 00            		ld de,SHRSIZ        ; size of each particle.
    4418   00:B9FC  06 36               		ld b,NUMSHR         ; number of pieces in table.
    4419   00:B9FE                      .loop:
    4420   00:B9FE  7E                  		ld a,(hl)           ; get type.
    4421   00:B9FF  A7                  		and a               ; is this slot a laser?
    4422   00:BA00  28 04               		jr z,.chkcol          ; yes, check collision.
    4423   00:BA02                      .nxtshr:
    4424   00:BA02  19                  		add hl,de           ; point to more shrapnel.
    4425   00:BA03  10 F9               		djnz .loop          ; repeat for all shrapnel.
    4426   00:BA05  C9                  		ret                 ; no collision, carry not set.
    4427   00:BA06                      .chkcol:
    4428   00:BA06  E5                  		push hl             ; store pointer to laser.
    4429   00:BA07  23                  		inc hl              ; direction.
    4430   00:BA08  23                  		inc hl              ; not used.
    4431   00:BA09  23                  		inc hl              ; x position.
    4432   00:BA0A  7E                  		ld a,(hl)           ; get x.
    4433   00:BA0B  DD 96 03            		sub (ix+X)          ; subtract sprite x.
    4434   00:BA0E                      ;lcolh:
    4435   00:BA0E  FE 10               		cp 16               ; within range?
    4436   00:BA10  30 0A               		jr nc,.missed         ; no, missed.
    4437   00:BA12  23                  		inc hl              ; not used.
    4438   00:BA13  23                  		inc hl              ; y position.
    4439   00:BA14  7E                  		ld a,(hl)           ; get y.
    4440   00:BA15  DD 96 04            		sub (ix+Y)          ; subtract sprite y.
    4441   00:BA18  FE 10               		cp 16               ; within range?
    4442   00:BA1A  38 03               		jr c,.exit          ; yes, collision occurred.
    4443   00:BA1C                      .missed:
    4444   00:BA1C  E1                  		pop hl              ; restore laser pointer from stack.
    4445   00:BA1D  18 E3               		jr .nxtshr
    4446   00:BA1F                      .exit:
    4447   00:BA1F  E1                  		pop hl              ; restore laser pointer.
    4448   00:BA20  C9                  		ret                 ; return with carry set for collision.
    4449   00:BA21                      
    4450   00:BA21                      	endif
    4451   00:BA21                      	
    4452   00:BA21                      ; Main game engine code starts here.
    4453   00:BA21                      
    4454   00:BA21                      game:
    4455   00:BA21                      
    4456   00:BA21                      	if PFLAG
    4457   00:BA21  CD E8 B9            		call inishr         ; initialise particle engine.
    4458   00:BA24                      	endif
    4459   00:BA24                      evintr:
    4460   00:BA24  F3                  	di
    4461   00:BA25  CD B3 8E            		call evnt12         ; call intro/menu event.
    4462   00:BA28                      
    4463   00:BA28  21 00 46            		ld hl,MAP           ; block properties.
    4464   00:BA2B  0E 03               		ld c,3     			; 3 * 256 bytes
    4465   00:BA2D  3E 02               		ld a,WALL			; fill value
    4466   00:BA2F  CD 5C C7            		call fastfill
    4467   00:BA32                      
    4468   00:BA32                      	if OFLAG
    4469   00:BA32  CD 4B C7            		call clrobjlst
    4470   00:BA35                      	endif
    4471   00:BA35  CD 55 C7            		call clrscrmap
    4472   00:BA38                      
    4473   00:BA38                      	if OFLAG
    4474   00:BA38  CD E6 B5            		call iniob          ; initialise objects.
    4475   00:BA3B                      	endif
    4476   00:BA3B  AF                  		xor a               ; put zero in accumulator.
    4477   00:BA3C  32 53 40            		ld (gamwon),a       ; reset game won flag.
    4478   00:BA3F                      
    4479   00:BA3F  21 00 40            		ld hl,score         ; score.
    4480   00:BA42  CD 64 BB            		call inisc          ; init the score.
    4481   00:BA45                      mapst:
    4482   00:BA45  3A A7 80            		ld a,(stmap)        ; start position on map.
    4483   00:BA48  32 4C 40            		ld (roomtb),a       ; set up position in table, if there is one.
    4484   00:BA4B                      inipbl:
    4485   00:BA4B                      	if AFLAG
    4486   00:BA4B                    ~ 		ld hl,eop          ; reset blockpointer
    4487   00:BA4B                    ~ 		; ld (pbptr+1),hl
    4488   00:BA4B                    ~ 		ld (pblkptr),hl
    4489   00:BA4B                    ~ 	endif
    4490   00:BA4B                       
    4491   00:BA4B  CD DB C4            		call initsc         ; set up first screen.
    4492   00:BA4E  DD 21 A3 40         		ld ix,ssprit        ; default to spare sprite in table.
    4493   00:BA52                      evini:  
    4494   00:BA52                      
    4495   00:BA52  CD 13 90            		call evnt13         ; initialisation. (GAMEINIT)
    4496   00:BA55                      
    4497   00:BA55                      ; Two restarts.
    4498   00:BA55                      ; First restart - clear all sprites and initialise everything.
    4499   00:BA55                      
    4500   00:BA55                      rstrt:
    4501   00:BA55  CD 1F BB            		call rsevt          ; restart events (evnt14 - RESTARTSCREEN).
    4502   00:BA58  CD C7 B5            		call xspr           ; clear sprite table.
    4503   00:BA5B  CD 33 C6            		call sprlst         ; fetch pointer to screen sprites.
    4504   00:BA5E  CD 62 C6            		call ispr           ; initialise sprite table.
    4505   00:BA61  18 0F               		jr rstrt0
    4506   00:BA63                      
    4507   00:BA63                      ; Second restart - clear all but player, and don't initialise him.
    4508   00:BA63                      
    4509   00:BA63                      rstrtn:
    4510   00:BA63  CD 1F BB            		call rsevt          ; restart events (evnt14 - RESTARTSCREEN).
    4511   00:BA66  CD 4A C6            		call nspr           ; clear all non-player sprites.
    4512   00:BA69  CD D8 B5            		call xspr0
    4513   00:BA6C  CD 33 C6            		call sprlst         ; fetch pointer to screen sprites.
    4514   00:BA6F  CD 87 C6            		call kspr           ; initialise sprite table, no more players.
    4515   00:BA72                      
    4516   00:BA72                      ; Set up the player and/or enemy sprites.
    4517   00:BA72                      
    4518   00:BA72                      rstrt0: 
    4519   00:BA72  AF                  		xor a               ; zero in accumulator.
    4520   00:BA73  32 50 40            		ld (nexlev),a       ; reset next level flag.
    4521   00:BA76  32 51 40            		ld (restfl),a       ; reset restart flag.
    4522   00:BA79  32 52 40            		ld (deadf),a        ; reset dead flag.
    4523   00:BA7C                      		; ld (nohide),a		; enable screen hiding		
    4524   00:BA7C                      		
    4525   00:BA7C                      	if PFLAG
    4526   00:BA7C  CD CF B9            		call delshr			; erases all particles from screen
    4527   00:BA7F                      	endif
    4528   00:BA7F                      	if OFLAG
    4529   00:BA7F  CD 89 BC            		call robjs			; removes all present objects from screen
    4530   00:BA82                      	endif
    4531   00:BA82  CD 46 BF            		call droom          ; show screen layout.
    4532   00:BA85                      rpblc0: 
    4533   00:BA85                      	if AFLAG
    4534   00:BA85                    ~ 		call rbloc          ; draw blocks for this screen
    4535   00:BA85                    ~ 	endif
    4536   00:BA85                      	if PFLAG
    4537   00:BA85  CD E8 B9            		call inishr         ; initialise particle engine.
    4538   00:BA88                      	endif
    4539   00:BA88                      	if OFLAG
    4540   00:BA88  CD 8F BB            		call shwob          ; draw objects.
    4541   00:BA8B                      	endif
    4542   00:BA8B                      mloop:
    4543   00:BA8B  CD 01 B6            		call vsync          ; synchronise with display.
    4544   00:BA8E  CD 10 C4            		call dumpspr
    4545   00:BA91                      		
    4546   00:BA91                      	ifdef DEBUG
    4547   00:BA91                    ~ 		BORDER 9
    4548   00:BA91                    ~ 	endif
    4549   00:BA91                      	   
    4550   00:BA91  DD 21 A3 40         		ld ix,ssprit        ; point to spare sprite for spawning purposes.
    4551   00:BA95                      evlp1:  
    4552   00:BA95  CD D7 8D            		call evnt10         ; MAINLOOP1: called once per main loop.
    4553   00:BA98  CD 82 C2            		call pspr           ; process sprites.
    4554   00:BA9B                      		
    4555   00:BA9B                      ; Main loop events.
    4556   00:BA9B  DD 21 A3 40         		ld ix,ssprit        ; point to spare sprite for spawning purposes.
    4557   00:BA9F                      evlp2:  
    4558   00:BA9F                      	ifdef DEBUG
    4559   00:BA9F                    ~ 		BORDER 8
    4560   00:BA9F                    ~ 	endif
    4561   00:BA9F  CD 11 8E            		call evnt11         ; MAINLOOP2: called once per main loop.
    4562   00:BAA2                      	ifdef DEBUG
    4563   00:BAA2                    ~ 		BORDER 14
    4564   00:BAA2                    ~ 	endif
    4565   00:BAA2                      		
    4566   00:BAA2  DD 21 B4 40         		ld ix,sprtab
    4567   00:BAA6  CD D8 C2            		call chkimg
    4568   00:BAA9                      		
    4569   00:BAA9  3A 50 40            		ld a,(nexlev)       ; finished level flag.
    4570   00:BAAC  A7                  		and a               ; has it been set?
    4571   00:BAAD  20 1E               		jr nz,newlev        ; yes, go to next level.
    4572   00:BAAF  3A 53 40            		ld a,(gamwon)       ; finished game flag.
    4573   00:BAB2  A7                  		and a               ; has it been set?
    4574   00:BAB3  20 28               		jr nz,evwon         ; yes, finish the game.
    4575   00:BAB5  3A 51 40            		ld a,(restfl)       ; finished level flag.
    4576   00:BAB8  3D                  		dec a               ; has it been set?
    4577   00:BAB9  CA 55 BA            		jp z,rstrt          ; yes, go to next level.
    4578   00:BABC  3D                  		dec a               ; has it been set?
    4579   00:BABD  CA 63 BA            		jp z,rstrtn         ; yes, go to next level.
    4580   00:BAC0  3A 52 40            		ld a,(deadf)        ; dead flag.
    4581   00:BAC3  A7                  		and a               ; is it non-zero?
    4582   00:BAC4  20 1D               		jr nz,pdead         ; yes, player dead.
    4583   00:BAC6                      		
    4584   00:BAC6  21 4D 40            		ld hl,frmno         ; game frame.
    4585   00:BAC9  34                  		inc (hl)            ; advance the frame.
    4586   00:BACA                      ; Back to start of main loop.
    4587   00:BACA                      qoff:	
    4588   00:BACA  C3 8B BA            		jp mloop            ; switched to a jp nz,mloop during test mode.
    4589   00:BACD                      		
    4590   00:BACD                      ;----------------------------------------------------------
    4591   00:BACD                      ; Read blocks from list and update screen accordingly.
    4592   00:BACD                      ;----------------------------------------------------------
    4593   00:BACD                      
    4594   00:BACD                      	if AFLAG
    4595   00:BACD                    ~ 	
    4596   00:BACD                    ~ rbloc:
    4597   00:BACD                    ~ ;pbbuf:
    4598   00:BACD                    ~ 		ld de,eop             ; check for last block
    4599   00:BACD                    ~ rbloc2:
    4600   00:BACD                    ~ 		; ld hl,(pbptr+1)
    4601   00:BACD                    ~ 		ld hl,(pblkptr)
    4602   00:BACD                    ~ 		or a
    4603   00:BACD                    ~ 		sbc hl,de
    4604   00:BACD                    ~ 		ret z
    4605   00:BACD                    ~ rbloc1:
    4606   00:BACD                    ~ 		ex de,hl
    4607   00:BACD                    ~ 		ld a,(scno)
    4608   00:BACD                    ~ 		cp (hl)                ;pbbuf
    4609   00:BACD                    ~ 		jr nz,rbloc0
    4610   00:BACD                    ~ 		push hl
    4611   00:BACD                    ~ 		inc hl
    4612   00:BACD                    ~ 		ld de,dispx
    4613   00:BACD                    ~ 		ldi                    ;dispx
    4614   00:BACD                    ~ 		ldi                    ;dispy
    4615   00:BACD                    ~ 		ld a,(hl)
    4616   00:BACD                    ~ 		call pattr2            ; draw block
    4617   00:BACD                    ~ 		pop hl
    4618   00:BACD                    ~ rbloc0:
    4619   00:BACD                    ~ 		ld de,4
    4620   00:BACD                    ~ 		add hl,de              ; point to next block
    4621   00:BACD                    ~ 		ex de,hl
    4622   00:BACD                    ~ 		jr rbloc2
    4623   00:BACD                    ~     
    4624   00:BACD                    ~ 	endif
    4625   00:BACD                      
    4626   00:BACD                      	
    4627   00:BACD                      newlev:
    4628   00:BACD  3A 41 40            		ld a,(scno)         ; current screen.
    4629   00:BAD0  21 9B 97            		ld hl,numsc         ; total number of screens.
    4630   00:BAD3  3C                  		inc a               ; next screen.
    4631   00:BAD4  BE                  		cp (hl)             ; reached the limit?
    4632   00:BAD5  30 06               		jr nc,evwon         ; yes, game finished.
    4633   00:BAD7  32 41 40            		ld (scno),a         ; set new level number.
    4634   00:BADA  C3 55 BA            		jp rstrt            ; restart, clearing all aliens.
    4635   00:BADD                      evwon:
    4636   00:BADD  CD C3 91            		call evnt18         ; game completed.
    4637   00:BAE0  C3 F7 BA            		jp tidyup           ; tidy up and return to BASIC/calling routine.
    4638   00:BAE3                      
    4639   00:BAE3                      ; Player dead.
    4640   00:BAE3                      
    4641   00:BAE3                      pdead:
    4642   00:BAE3  AF                  		xor a               ; zeroise accumulator.
    4643   00:BAE4  32 52 40            		ld (deadf),a        ; reset dead flag.
    4644   00:BAE7                      evdie:
    4645   00:BAE7  CD 4B 91            		call evnt16         ; death subroutine.
    4646   00:BAEA  3A 45 40            		ld a,(numlif)       ; number of lives.
    4647   00:BAED  A7                  		and a               ; reached zero yet?
    4648   00:BAEE  C2 55 BA            		jp nz,rstrt         ; restart game.
    4649   00:BAF1  CD 06 C3            		call dissprs
    4650   00:BAF4  CD 5E 91            		call evnt17         ; failure event.
    4651   00:BAF7                      tidyup: 
    4652   00:BAF7  21 06 40            		ld hl,hiscor        ; high score.
    4653   00:BAFA  11 00 40            		ld de,score         ; player's score.
    4654   00:BAFD  06 06               		ld b,6              ; digits to check.
    4655   00:BAFF                      .tidyu2 
    4656   00:BAFF  1A                  		ld a,(de)           ; get score digit.
    4657   00:BB00  BE                  		cp (hl)             ; are we larger than high score digit?
    4658   00:BB01  38 06               		jr c,tidyu0         ; high score is bigger.
    4659   00:BB03  20 07               		jr nz,tidyu1        ; score is greater, record new high score.
    4660   00:BB05  23                  		inc hl              ; next digit of high score.
    4661   00:BB06  13                  		inc de              ; next digit of score.
    4662   00:BB07  10 F6               		djnz .tidyu2         ; repeat for all digits.
    4663   00:BB09                      tidyu0:
    4664   00:BB09  C3 21 BA            		jp game
    4665   00:BB0C                      tidyu1:
    4666   00:BB0C  21 00 40            		ld hl,score         ; score.
    4667   00:BB0F  11 06 40            		ld de,hiscor        ; high score.
    4668   00:BB12  01 06 00            		ld bc,6             ; digits to copy.
    4669   00:BB15  ED B0               		ldir                ; copy score to high score.
    4670   00:BB17  CD 06 C3            		call dissprs
    4671   00:BB1A  CD CD 91            		call evnt19         ; new high score event.
    4672   00:BB1D  18 EA               		jr tidyu0           ; tidy up.
    4673   00:BB1F                      
    4674   00:BB1F                      ; Restart event.
    4675   00:BB1F                      
    4676   00:BB1F                      rsevt:
    4677   00:BB1F  DD 21 A3 40         		ld ix,ssprit        ; default to spare element in table.
    4678   00:BB23                      evrs:
    4679   00:BB23  C3 78 90            		jp evnt14           ; call restart event.
    4680   00:BB26                      
    4681   00:BB26                      ; Copy number passed in a to string position bc, right-justified.
    4682   00:BB26                      
    4683   00:BB26  6F                  num2ch ld l,a              ; put accumulator in l.
    4684   00:BB27  26 00                      ld h,0              ; blank high byte of hl.
    4685   00:BB29  3E 20                      ld a,32             ; leading spaces.
    4686   00:BB2B  11 64 00            numdg3 ld de,100           ; hundreds column.
    4687   00:BB2E  CD 3C BB                   call numdg          ; show digit.
    4688   00:BB31  11 0A 00            numdg2 ld de,10            ; tens column.
    4689   00:BB34  CD 3C BB                   call numdg          ; show digit.
    4690   00:BB37  F6 10                      or 16               ; last digit is always shown.
    4691   00:BB39  11 01 00                   ld de,1             ; units column.
    4692   00:BB3C  E6 30               numdg  and 48              ; clear carry, clear digit.
    4693   00:BB3E  ED 52               numdg1 sbc hl,de           ; subtract from column.
    4694   00:BB40  38 05                      jr c,numdg0         ; nothing to show.
    4695   00:BB42  F6 10                      or 16               ; something to show, make it a digit.
    4696   00:BB44  3C                         inc a               ; increment digit.
    4697   00:BB45  18 F7                      jr numdg1           ; repeat until column is zero.
    4698   00:BB47  19                  numdg0 add hl,de           ; restore total.
    4699   00:BB48  FE 20                      cp 32               ; leading space?
    4700   00:BB4A  C8                         ret z               ; yes, don't write that.
    4701   00:BB4B  02                         ld (bc),a           ; write digit to buffer.
    4702   00:BB4C  03                         inc bc              ; next buffer position.
    4703   00:BB4D  C9                         ret
    4704   00:BB4E  6F                  num2dd ld l,a              ; put accumulator in l.
    4705   00:BB4F  26 00                      ld h,0              ; blank high byte of hl.
    4706   00:BB51  3E 20                      ld a,32             ; leading spaces.
    4707   00:BB53  11 64 00                   ld de,100           ; hundreds column.
    4708   00:BB56  CD 3C BB                   call numdg          ; show digit.
    4709   00:BB59  F6 10                      or 16               ; second digit is always shown.
    4710   00:BB5B  18 D4                      jr numdg2
    4711   00:BB5D  6F                  num2td ld l,a              ; put accumulator in l.
    4712   00:BB5E  26 00                      ld h,0              ; blank high byte of hl.
    4713   00:BB60  3E 30                      ld a,48             ; leading spaces.
    4714   00:BB62  18 C7                      jr numdg3
    4715   00:BB64                      
    4716   00:BB64  06 06               inisc  ld b,6              ; digits to initialise.
    4717   00:BB66  36 30               inisc0 ld (hl),'0'         ; write zero digit.
    4718   00:BB68  23                         inc hl              ; next column.
    4719   00:BB69  10 FB                      djnz inisc0         ; repeat for all digits.
    4720   00:BB6B  C9                         ret
    4721   00:BB6C                      
    4722   00:BB6C                      
    4723   00:BB6C                      ; Multiply h by d and return in hl.
    4724   00:BB6C                      
    4725   00:BB6C                      imul:   
    4726   00:BB6C  5A                  		ld e,d              ; HL = H * D
    4727   00:BB6D  4C                  		ld c,h              ; make c first multiplier.
    4728   00:BB6E                      imul0:
    4729   00:BB6E  21 00 00            		ld hl,0             ; zeroise total.
    4730   00:BB71  54                  		ld d,h              ; zeroise high byte.
    4731   00:BB72  06 08               		ld b,8              ; repeat 8 times.
    4732   00:BB74                      .loop:
    4733   00:BB74  CB 19               		rr c                ; rotate rightmost bit into carry.
    4734   00:BB76  30 02               		jr nc,.imul2         ; wasn't set.
    4735   00:BB78  19                  		add hl,de           ; bit was set, so add de.
    4736   00:BB79  A7                  		and a               ; reset carry.
    4737   00:BB7A                      .imul2:
    4738   00:BB7A  CB 13               		rl e                ; shift de 1 bit left.
    4739   00:BB7C  CB 12               		rl d
    4740   00:BB7E  10 F4               		djnz .loop          ; repeat 8 times.
    4741   00:BB80  C9                  		ret
    4742   00:BB81                      
    4743   00:BB81                      ; Divide d by e and return in d, remainder in a.
    4744   00:BB81                      
    4745   00:BB81                      idiv:
    4746   00:BB81  AF                  		xor a
    4747   00:BB82  06 08               		ld b,8              ; bits to shift.
    4748   00:BB84                      .loop:
    4749   00:BB84  CB 22               		sla d               ; multiply d by 2.
    4750   00:BB86  17                  		rla                 ; shift carry into remainder.
    4751   00:BB87  BB                  		cp e                ; test if e is smaller.
    4752   00:BB88  38 02               		jr c,.nodiv          ; e is greater, no division this time.
    4753   00:BB8A  93                  		sub e               ; subtract it.
    4754   00:BB8B  14                  		inc d               ; rotate into d.
    4755   00:BB8C                      .nodiv:
    4756   00:BB8C  10 F6               		djnz .loop
    4757   00:BB8E  C9                  		ret
    4758   00:BB8F                      
    4759   00:BB8F                      	
    4760   00:BB8F                      	if OFLAG
    4761   00:BB8F                      
    4762   00:BB8F                      ; Objects handling.
    4763   00:BB8F                      ; 64 bytes for image
    4764   00:BB8F                      ; 3 for room, x and y
    4765   00:BB8F                      ; 3 for starting room, x and y.
    4766   00:BB8F                      ; 254 = disabled.
    4767   00:BB8F                      ; 255 = object in player's pockets.
    4768   00:BB8F                      
    4769   00:BB8F                      ; Show items present.
    4770   00:BB8F                      
    4771   00:BB8F                      	if DISTYPE=ROM
    4772   00:BB8F                      	
    4773   00:BB8F                      shwob:
    4774   00:BB8F  21 A8 4F            		ld hl,objatr        ; objects attribute table.		
    4775   00:BB92  3A 53 B5            		ld a,(numob)        ; number of objects in the game.
    4776   00:BB95  47                  		ld b,a              ; loop counter.
    4777   00:BB96                      .loop0:
    4778   00:BB96  C5                  		push bc             ; store count.
    4779   00:BB97  E5                  		push hl             ; store item pointer.
    4780   00:BB98  3A 53 B5            		ld a,(numob)
    4781   00:BB9B  90                  		sub b				; need to invert object counter
    4782   00:BB9C  32 46 40            		ld (curobj),a
    4783   00:BB9F  3A 41 40            		ld a,(scno)         ; current location.
    4784   00:BBA2  BE                  		cp (hl)             ; same as an item?
    4785   00:BBA3  CC AF BB            		call z,dobj         ; yes, display object in colour.
    4786   00:BBA6  E1                  		pop hl              ; restore pointer.
    4787   00:BBA7  C1                  		pop bc              ; restore counter.
    4788   00:BBA8  11 03 00            		ld de,ODTSIZ		; distance to next item.
    4789   00:BBAB  19                  		add hl,de           ; point to it.
    4790   00:BBAC  10 E8               		djnz .loop0         ; repeat for others.
    4791   00:BBAE  C9                  		ret
    4792   00:BBAF                      
    4793   00:BBAF                      	else
    4794   00:BBAF                    ~ 	
    4795   00:BBAF                    ~ shwob:
    4796   00:BBAF                    ~ 		ld hl,objdta        ; objects table.
    4797   00:BBAF                    ~ 		ld de,OBJSIZ-ODTSIZ ; distance to room number.
    4798   00:BBAF                    ~ 		add hl,de           ; point to room data.
    4799   00:BBAF                    ~ 		ld a,(numob)        ; number of objects in the game.
    4800   00:BBAF                    ~ 		ld b,a              ; loop counter.
    4801   00:BBAF                    ~ .loop0:
    4802   00:BBAF                    ~ 		push bc             ; store count.
    4803   00:BBAF                    ~ 		push hl             ; store item pointer.
    4804   00:BBAF                    ~ 		ld a,(numob)
    4805   00:BBAF                    ~ 		sub b				; need to invert object counter
    4806   00:BBAF                    ~ 		ld (curobj),a
    4807   00:BBAF                    ~ 		ld a,(scno)         ; current location.
    4808   00:BBAF                    ~ 		cp (hl)             ; same as an item?
    4809   00:BBAF                    ~ 		call z,dobj         ; yes, display object in colour.
    4810   00:BBAF                    ~ 		pop hl              ; restore pointer.
    4811   00:BBAF                    ~ 		pop bc              ; restore counter.
    4812   00:BBAF                    ~ 		ld de,OBJSIZ        ; distance to next item.
    4813   00:BBAF                    ~ 		add hl,de           ; point to it.
    4814   00:BBAF                    ~ 		djnz .loop0         ; repeat for others.
    4815   00:BBAF                    ~ 		ret
    4816   00:BBAF                    ~ 
    4817   00:BBAF                    ~ 	endif
    4818   00:BBAF                      
    4819   00:BBAF                      ; Display object.
    4820   00:BBAF                      ; hl must point to object's room number.
    4821   00:BBAF                      
    4822   00:BBAF                      	if DISTYPE=ROM
    4823   00:BBAF                      	
    4824   00:BBAF                      dobj:   
    4825   00:BBAF  23                  		inc hl						; point to y.
    4826   00:BBB0  11 54 40            		ld de,dispx         		; coordinates.
    4827   00:BBB3  7E                  		ld a,(hl)
    4828   00:BBB4  FE C0               		cp MSX_MAXCY+1
    4829   00:BBB6  D0                  		ret nc						; don't draw if it's out of boundaries
    4830   00:BBB7  ED A0               		ldi                 		; transfer y coord.
    4831   00:BBB9  ED A0               		ldi                 		; transfer x too.
    4832   00:BBBB  CD F1 BB            		call objimg			; gets object image address in HL
    4833   00:BBBE                      putobj:
    4834   00:BBBE  E5                  		push hl             ; store object graphic address.
    4835   00:BBBF  CD 47 BC            		call wobj			; preserves visible object coords in list
    4836   00:BBC2  CD 26 C4            		call scadd          ; get screen address in hl.
    4837   00:BBC5  CB F4               		set 6,h				; set write permanently
    4838   00:BBC7  7D                  		ld a,l
    4839   00:BBC8  F3                  		di					;
    4840   00:BBC9  D3 BF               		out (MSX_VDPCW),a
    4841   00:BBCB  7C                  		ld a,h
    4842   00:BBCC  FB                  		ei	
    4843   00:BBCD  D3 BF               		out (MSX_VDPCW),a   ;
    4844   00:BBCF  0E BE               		ld c,MSX_VDPDRW		
    4845   00:BBD1  EB                  		ex de,hl            ; switch regs. DE=VRAM
    4846   00:BBD2  E1                  		pop hl              ; restore graphic address. HL=graphics, DE=VRAM
    4847   00:BBD3  CD E9 BB            		call putrow0		; 1st pattern row
    4848   00:BBD6  14                  		inc d				; row increased
    4849   00:BBD7  CD E1 BB            		call putrow			; 2nd pattern row
    4850   00:BBDA  15                  		dec d				; back again to 1st row
    4851   00:BBDB  CB EA               		set 5,d				; point to color area
    4852   00:BBDD  CD E1 BB            		call putrow			; 1st color row
    4853   00:BBE0  14                  		inc d				; row increased and process color row
    4854   00:BBE1                      putrow:
    4855   00:BBE1  7B                  		ld a,e
    4856   00:BBE2  F3                  		di					;
    4857   00:BBE3  D3 BF               		out (MSX_VDPCW),a
    4858   00:BBE5  7A                  		ld a,d
    4859   00:BBE6  FB                  		ei	
    4860   00:BBE7  D3 BF               		out (MSX_VDPCW),a   ;
    4861   00:BBE9                      putrow0:
    4862   00:BBE9  06 10               		ld b,16
    4863   00:BBEB                      .loop:
    4864   00:BBEB  ED A3               		outi
    4865   00:BBED  C2 EB BB            		jp nz,.loop
    4866   00:BBF0  C9                  		ret
    4867   00:BBF1                      ;
    4868   00:BBF1                      ; calculates object image address from object number
    4869   00:BBF1                      ;
    4870   00:BBF1                      ; Input:
    4871   00:BBF1                      ;	A = object number
    4872   00:BBF1                      ; Output:
    4873   00:BBF1                      ;	HL = object image address
    4874   00:BBF1                      ;
    4875   00:BBF1                      objimg:
    4876   00:BBF1  16 00               		ld d,0
    4877   00:BBF3  3A 46 40            		ld a,(curobj)
    4878   00:BBF6  5F                  		ld e,a
    4879   00:BBF7  0F                  		rrca
    4880   00:BBF8  0F                  		rrca
    4881   00:BBF9  6F                  		ld l,a			
    4882   00:BBFA  E6 3F               		and $3F			
    4883   00:BBFC  67                  		ld h,a			
    4884   00:BBFD  7D                  		ld a,l			
    4885   00:BBFE  E6 C0               		and $C0			
    4886   00:BC00  6F                  		ld l,a			; n * 64
    4887   00:BC01  19                  		add hl,de
    4888   00:BC02  EB                  		ex de,hl		; DE=n*65
    4889   00:BC03  29                  		add hl,hl		; HL=n*2
    4890   00:BC04  19                  		add hl,de		; HL=n*65 + n*2
    4891   00:BC05  11 43 A7            		ld de,objdta+3
    4892   00:BC08  19                  		add hl,de		; point to image.		
    4893   00:BC09  C9                  		ret
    4894   00:BC0A                      
    4895   00:BC0A                      	else
    4896   00:BC0A                    ~ 	
    4897   00:BC0A                    ~ dobj:   
    4898   00:BC0A                    ~ 		inc hl						; point to x.
    4899   00:BC0A                    ~ 		ld de,dispx         		; coordinates.
    4900   00:BC0A                    ~ 		ld a,(hl)
    4901   00:BC0A                    ~ 		cp MSX_MAXCY+1
    4902   00:BC0A                    ~ 		ret nc						; don't draw if it's out of boundaries
    4903   00:BC0A                    ~ 		ldi                 		; transfer y coord.
    4904   00:BC0A                    ~ 		ldi                 		; transfer x too.
    4905   00:BC0A                    ~ 		ld de,-(OBJSIZ-(ODTSIZ/2))	; distance needed to restore image pointer.
    4906   00:BC0A                    ~ 		add hl,de           		; point to image.
    4907   00:BC0A                    ~ putobj:
    4908   00:BC0A                    ~ 		push hl             ; store sprite graphic address.
    4909   00:BC0A                    ~ 		call wobj			; preserves visible object coords in list
    4910   00:BC0A                    ~ 		call scadd          ; get screen address in hl.
    4911   00:BC0A                    ~ 		set 6,h
    4912   00:BC0A                    ~ 		ld a,l
    4913   00:BC0A                    ~ 		di					;
    4914   00:BC0A                    ~ 		out (MSX_VDPCW),a
    4915   00:BC0A                    ~ 		ld a,h
    4916   00:BC0A                    ~ 		ei	
    4917   00:BC0A                    ~ 		out (MSX_VDPCW),a   ;
    4918   00:BC0A                    ~ 		ld c,MSX_VDPDRW		
    4919   00:BC0A                    ~ 		ex de,hl            ; switch regs. DE=VRAM
    4920   00:BC0A                    ~ 		pop hl              ; restore graphic address. HL=graphics, DE=VRAM
    4921   00:BC0A                    ~ 		call putrow0		; 1st pattern row
    4922   00:BC0A                    ~ 		inc d				; row increased
    4923   00:BC0A                    ~ 		call putrow			; 2nd pattern row
    4924   00:BC0A                    ~ 		dec d				; back again to 1st row
    4925   00:BC0A                    ~ 		set 5,d				; point to color area
    4926   00:BC0A                    ~ 		call putrow			; 1st color row
    4927   00:BC0A                    ~ 		inc d				; row increased and process las color row
    4928   00:BC0A                    ~ putrow:
    4929   00:BC0A                    ~ 		ld a,e
    4930   00:BC0A                    ~ 		di					;
    4931   00:BC0A                    ~ 		out (MSX_VDPCW),a
    4932   00:BC0A                    ~ 		ld a,d
    4933   00:BC0A                    ~ 		ei	
    4934   00:BC0A                    ~ 		out (MSX_VDPCW),a   ;
    4935   00:BC0A                    ~ putrow0:
    4936   00:BC0A                    ~ 		ld b,16
    4937   00:BC0A                    ~ .loop:
    4938   00:BC0A                    ~ 		outi
    4939   00:BC0A                    ~ 		jp nz,.loop
    4940   00:BC0A                    ~ 		ret
    4941   00:BC0A                    ~ 
    4942   00:BC0A                    ~ 	endif
    4943   00:BC0A                      	
    4944   00:BC0A                      	
    4945   00:BC0A                      ; Remove an object (REMOVEOBJECT).
    4946   00:BC0A                      
    4947   00:BC0A                      remob:
    4948   00:BC0A  21 53 B5            		ld hl,numob         ; number of objects in game.
    4949   00:BC0D  BE                  		cp (hl)             ; are we checking past the end?
    4950   00:BC0E  D0                  		ret nc              ; yes, can't get non-existent item.
    4951   00:BC0F  F5                  		push af             ; remember object.
    4952   00:BC10  CD 1A BC            		call getob          ; pick it up if we haven't already got it.
    4953   00:BC13  F1                  		pop af              ; retrieve object number.
    4954   00:BC14  CD 01 BD            		call gotob          ; get its address.
    4955   00:BC17  36 FE               		ld (hl),254         ; remove it.
    4956   00:BC19  C9                  		ret
    4957   00:BC1A                      
    4958   00:BC1A                      ; Pick up object number held in the accumulator (GET).
    4959   00:BC1A                      
    4960   00:BC1A                      getob:  
    4961   00:BC1A  32 46 40            		ld (curobj),a		; preserves object number
    4962   00:BC1D  21 53 B5            		ld hl,numob         ; number of objects in game.
    4963   00:BC20  BE                  		cp (hl)             ; are we checking past the end?
    4964   00:BC21  D0                  		ret nc              ; yes, can't get non-existent item.
    4965   00:BC22  CD 01 BD            		call gotob          ; check if we already have it.
    4966   00:BC25  C8                  		ret z               ; we already do.
    4967   00:BC26  EB                  		ex de,hl            ; object address in de.
    4968   00:BC27  21 41 40            		ld hl,scno          ; current screen.
    4969   00:BC2A  BE                  		cp (hl)             ; is it on this screen?
    4970   00:BC2B  EB                  		ex de,hl            ; object address back in hl.
    4971   00:BC2C  20 0B               		jr nz,.notinscr        ; not on screen, so nothing to delete.
    4972   00:BC2E  36 FF               		ld (hl),255         ; pick it up.
    4973   00:BC30  2A 5A B5            		ld hl,(blkptr)      ; blocks.
    4974   00:BC33  22 3E 40            		ld (grbase),hl      ; set graphics base.		
    4975   00:BC36  C3 4F BC            		jp robj
    4976   00:BC39                      .notinscr:
    4977   00:BC39  36 FF               		ld (hl),255         ; pick it up.
    4978   00:BC3B  C9                  		ret
    4979   00:BC3C                      
    4980   00:BC3C                      ;
    4981   00:BC3C                      ; Returns pointers over dispx & object coords list
    4982   00:BC3C                      ; Input:
    4983   00:BC3C                      ;	curobj = object number
    4984   00:BC3C                      ; Output:
    4985   00:BC3C                      ;	HL = dispx
    4986   00:BC3C                      ;	DE = Object's pointer
    4987   00:BC3C                      ;
    4988   00:BC3C                      objptr:
    4989   00:BC3C  3A 46 40            		ld a,(curobj)
    4990   00:BC3F  87                  		add a,a
    4991   00:BC40  5F                  		ld e,a
    4992   00:BC41  16 49               		ld d,(objlist >> 8) & $FF
    4993   00:BC43  21 54 40            		ld hl,dispx
    4994   00:BC46  C9                  		ret
    4995   00:BC47                      
    4996   00:BC47                      ;
    4997   00:BC47                      ; Stores current coords in object coords list
    4998   00:BC47                      ; Input:
    4999   00:BC47                      ;	curobj = object number
    5000   00:BC47                      ; Output:
    5001   00:BC47                      ;	None. Object's coords filled with dispx/y
    5002   00:BC47                      ;
    5003   00:BC47                      wobj:
    5004   00:BC47  CD 3C BC            		call objptr
    5005   00:BC4A  ED A0               		ldi
    5006   00:BC4C  ED A0               		ldi					; stores dispxy to objects coords list
    5007   00:BC4E  C9                  		ret
    5008   00:BC4F                      
    5009   00:BC4F                      ;
    5010   00:BC4F                      ; Removes object from objects list restoring background		
    5011   00:BC4F                      ;		
    5012   00:BC4F                      ; Input:
    5013   00:BC4F                      ; 	curobj = object number to delete
    5014   00:BC4F                      ; Output:
    5015   00:BC4F                      ;	None. Object's coords erased with $FF
    5016   00:BC4F                      ; Modifies: All
    5017   00:BC4F                      ;		
    5018   00:BC4F                      robj:
    5019   00:BC4F  CD 3C BC            		call objptr
    5020   00:BC52  1A                  		ld a,(de)			
    5021   00:BC53  FE FF               		cp 255
    5022   00:BC55  C8                  		ret z				; if dispx=255, there's no object displayed
    5023   00:BC56  EB                  		ex de,hl	
    5024   00:BC57  ED A0               		ldi				
    5025   00:BC59  ED A0               		ldi					; restores to dispxy stored objects coords
    5026   00:BC5B  2B                  		dec hl
    5027   00:BC5C  2B                  		dec hl
    5028   00:BC5D  36 FF               		ld (hl),255			; clear stored dispx, object deleted
    5029   00:BC5F  CD 32 BE            		call gp2tp
    5030   00:BC62  11 00 4A            		ld de,scrmap
    5031   00:BC65  CD 54 BE            		call pradd
    5032   00:BC68  19                  		add hl,de
    5033   00:BC69  7E                  		ld a,(hl)			; gets old block from screen map buffer
    5034   00:BC6A  E5                  		push hl
    5035   00:BC6B  CD E8 BE            		call pchr
    5036   00:BC6E  E1                  		pop hl
    5037   00:BC6F  23                  		inc hl
    5038   00:BC70  7E                  		ld a,(hl)
    5039   00:BC71  E5                  		push hl
    5040   00:BC72  CD E8 BE            		call pchr
    5041   00:BC75  35                  		dec (hl)
    5042   00:BC76  35                  		dec (hl)
    5043   00:BC77  2B                  		dec hl
    5044   00:BC78  34                  		inc (hl)
    5045   00:BC79  E1                  		pop hl
    5046   00:BC7A  11 1F 00            		ld de,31
    5047   00:BC7D  19                  		add hl,de
    5048   00:BC7E  7E                  		ld a,(hl)
    5049   00:BC7F  E5                  		push hl
    5050   00:BC80  CD E8 BE            		call pchr
    5051   00:BC83  E1                  		pop hl
    5052   00:BC84  23                  		inc hl
    5053   00:BC85  7E                  		ld a,(hl)
    5054   00:BC86  C3 E8 BE            		jp pchr
    5055   00:BC89                      
    5056   00:BC89                      ;
    5057   00:BC89                      ; Removes all objects from objects list restoring background		
    5058   00:BC89                      ;		
    5059   00:BC89                      ; Input:
    5060   00:BC89                      ; 	None
    5061   00:BC89                      ; Output:
    5062   00:BC89                      ;	None. All object's dispx in objects list erased with $FF		
    5063   00:BC89                      		
    5064   00:BC89                      robjs:
    5065   00:BC89  2A 5A B5            		ld hl,(blkptr)      ; blocks.
    5066   00:BC8C  22 3E 40            		ld (grbase),hl      ; set graphics base.
    5067   00:BC8F  3A 53 B5            		ld a,(numob)
    5068   00:BC92  47                  		ld b,a
    5069   00:BC93                      .loop:
    5070   00:BC93  C5                  		push bc
    5071   00:BC94  78                  		ld a,b
    5072   00:BC95  3D                  		dec a
    5073   00:BC96  32 46 40            		ld (curobj),a
    5074   00:BC99  CD 4F BC            		call robj			; erase object restoring bg
    5075   00:BC9C  C1                  		pop bc
    5076   00:BC9D  10 F4               		djnz .loop
    5077   00:BC9F  C9                  		ret
    5078   00:BCA0                      
    5079   00:BCA0                      ; Drop object number at (dispx, dispy).
    5080   00:BCA0                      
    5081   00:BCA0                      	if DISTYPE=ROM
    5082   00:BCA0                      
    5083   00:BCA0                      drpob:
    5084   00:BCA0  32 46 40            		ld (curobj),a		; preserves object number
    5085   00:BCA3  21 53 B5            		ld hl,numob         ; number of objects in game.
    5086   00:BCA6  BE                  		cp (hl)             ; are we checking past the end?
    5087   00:BCA7  D0                  		ret nc              ; yes, can't drop non-existent item.
    5088   00:BCA8  CD 01 BD            		call gotob          ; make sure object is in inventory.
    5089   00:BCAB  3A 41 40            		ld a,(scno)         ; screen number.
    5090   00:BCAE  BE                  		cp (hl)             ; already on this screen?
    5091   00:BCAF  C8                  		ret z               ; yes, nothing to do.
    5092   00:BCB0  77                  		ld (hl),a           ; bring onto screen.
    5093   00:BCB1  23                  		inc hl              ; point to x coord.
    5094   00:BCB2                      		
    5095   00:BCB2  3A 54 40            		ld a,(dispx)        ; object y coordinate.
    5096   00:BCB5  77                  		ld (hl),a           ; set y coord.
    5097   00:BCB6  4F                  		ld c,a
    5098   00:BCB7  23                  		inc hl              ; point to object x.
    5099   00:BCB8  3A 55 40            		ld a,(dispy)        ; object x coordinate.
    5100   00:BCBB  77                  		ld (hl),a           ; set the x position.
    5101   00:BCBC  79                  		ld a,c
    5102   00:BCBD  FE C0               		cp MSX_MAXCY+1
    5103   00:BCBF  D0                  		ret nc				; don't draw object if it's out of boundaries
    5104   00:BCC0                      
    5105   00:BCC0  3A 46 40            		ld a,(curobj)
    5106   00:BCC3  CD F1 BB            		call objimg
    5107   00:BCC6  C3 BE BB            		jp putobj           ; draw object.
    5108   00:BCC9                      
    5109   00:BCC9                      	else
    5110   00:BCC9                    ~ 	
    5111   00:BCC9                    ~ drpob:
    5112   00:BCC9                    ~ 		ld (curobj),a		; preserves object number
    5113   00:BCC9                    ~ 		ld hl,numob         ; number of objects in game.
    5114   00:BCC9                    ~ 		cp (hl)             ; are we checking past the end?
    5115   00:BCC9                    ~ 		ret nc              ; yes, can't drop non-existent item.
    5116   00:BCC9                    ~ 		call gotob          ; make sure object is in inventory.
    5117   00:BCC9                    ~ 		ld a,(scno)         ; screen number.
    5118   00:BCC9                    ~ 		cp (hl)             ; already on this screen?
    5119   00:BCC9                    ~ 		ret z               ; yes, nothing to do.
    5120   00:BCC9                    ~ 		ld (hl),a           ; bring onto screen.
    5121   00:BCC9                    ~ 		inc hl              ; point to x coord.
    5122   00:BCC9                    ~ 		
    5123   00:BCC9                    ~ 		ld a,(dispx)        ; object y coordinate.
    5124   00:BCC9                    ~ 		ld (hl),a           ; set y coord.
    5125   00:BCC9                    ~ 		ld c,a
    5126   00:BCC9                    ~ 		inc hl              ; point to object x.
    5127   00:BCC9                    ~ 		ld a,(dispy)        ; object x coordinate.
    5128   00:BCC9                    ~ 		ld (hl),a           ; set the x position.
    5129   00:BCC9                    ~ 		ld a,c
    5130   00:BCC9                    ~ 		cp MSX_MAXCY+1
    5131   00:BCC9                    ~ 		ret nc				; don't draw object if it's out of boundaries
    5132   00:BCC9                    ~ 		
    5133   00:BCC9                    ~ 		ld de,-66           ; minus graphic size.
    5134   00:BCC9                    ~ 		add hl,de           ; point to graphics.
    5135   00:BCC9                    ~ 		jp putobj           ; draw object.
    5136   00:BCC9                    ~ 
    5137   00:BCC9                    ~ 	endif
    5138   00:BCC9                      	
    5139   00:BCC9                      
    5140   00:BCC9                      ; Seek objects at sprite position.
    5141   00:BCC9                      
    5142   00:BCC9                      	if DISTYPE=ROM
    5143   00:BCC9                      	
    5144   00:BCC9                      skobj:
    5145   00:BCC9  11 03 00            		ld de,ODTSIZ        ; size of each object.
    5146   00:BCCC  21 A8 4F            		ld hl,objatr
    5147   00:BCCF  3A 53 B5            		ld a,(numob)        ; number of objects in game.
    5148   00:BCD2  47                  		ld b,a              ; set up the loop counter.
    5149   00:BCD3                      .sk0: 
    5150   00:BCD3  3A 41 40            		ld a,(scno)         ; current room number.
    5151   00:BCD6  BE                  		cp (hl)             ; is object in here?
    5152   00:BCD7  CC E0 BC            		call z,.sk1       	; yes, check coordinates.
    5153   00:BCDA  19                  		add hl,de           ; point to next object in table.
    5154   00:BCDB  10 F6               		djnz .sk0         	; repeat for all objects.
    5155   00:BCDD  3E FF               		ld a,255            ; end of list and nothing found, return 255.
    5156   00:BCDF  C9                  		ret
    5157   00:BCE0                      .sk1: 
    5158   00:BCE0  23                  		inc hl              ; point to y coordinate.
    5159   00:BCE1  7E                  		ld a,(hl)           ; get coordinate.
    5160   00:BCE2  DD 96 03            		sub (ix+3)          ; subtract sprite y.
    5161   00:BCE5  C6 0F               		add a,MSX_SPRVS-1	; add sprite height minus one.
    5162   00:BCE7  FE 1F               		cp MSX_SPRVS+16-1   ; within range?
    5163   00:BCE9  D2 FF BC            		jp nc,.sk2        	; no, ignore object.
    5164   00:BCEC  23                  		inc hl              ; point to x coordinate now.
    5165   00:BCED  7E                  		ld a,(hl)           ; get coordinate.
    5166   00:BCEE  DD 96 04            		sub (ix+4)          ; subtract the sprite x.
    5167   00:BCF1  C6 0F               		add a,MSX_SPRHS-1   ; add sprite width minus one.
    5168   00:BCF3  FE 1F               		cp MSX_SPRHS+16-1   ; within range?
    5169   00:BCF5  D2 FE BC            		jp nc,.sk3        	; no, ignore object.
    5170   00:BCF8  D1                  		pop de              ; remove return address from stack.
    5171   00:BCF9  3A 53 B5            		ld a,(numob)        ; objects in game.
    5172   00:BCFC  90                  		sub b               ; subtract loop counter.
    5173   00:BCFD  C9                  		ret                 ; accumulator now points to object.
    5174   00:BCFE                      .sk3:
    5175   00:BCFE  2B                  		dec hl              ; back to y position.
    5176   00:BCFF                      .sk2:
    5177   00:BCFF  2B                  		dec hl              ; back to room.
    5178   00:BD00  C9                  		ret
    5179   00:BD01                      
    5180   00:BD01                      	else
    5181   00:BD01                    ~ 	
    5182   00:BD01                    ~ skobj:
    5183   00:BD01                    ~ 		ld hl,objdta        ; pointer to objects.
    5184   00:BD01                    ~ 		ld de,OBJSIZ-ODTSIZ ; distance to room number.
    5185   00:BD01                    ~ 		add hl,de           ; point to room data.
    5186   00:BD01                    ~ 		ld de,OBJSIZ        ; size of each object.
    5187   00:BD01                    ~ 		ld a,(numob)        ; number of objects in game.
    5188   00:BD01                    ~ 		ld b,a              ; set up the loop counter.
    5189   00:BD01                    ~ .sk0: 
    5190   00:BD01                    ~ 		ld a,(scno)         ; current room number.
    5191   00:BD01                    ~ 		cp (hl)             ; is object in here?
    5192   00:BD01                    ~ 		call z,.sk1       	; yes, check coordinates.
    5193   00:BD01                    ~ 		add hl,de           ; point to next object in table.
    5194   00:BD01                    ~ 		djnz .sk0         	; repeat for all objects.
    5195   00:BD01                    ~ 		ld a,255            ; end of list and nothing found, return 255.
    5196   00:BD01                    ~ 		ret
    5197   00:BD01                    ~ .sk1: 
    5198   00:BD01                    ~ 		inc hl              ; point to x coordinate.
    5199   00:BD01                    ~ 		ld a,(hl)           ; get coordinate.
    5200   00:BD01                    ~ 		sub (ix+3)          ; subtract sprite x.
    5201   00:BD01                    ~ 		add a,15            ; add sprite height minus one.
    5202   00:BD01                    ~ 		cp 31               ; within range?
    5203   00:BD01                    ~ 		jp nc,.sk2        	; no, ignore object.
    5204   00:BD01                    ~ 		inc hl              ; point to y coordinate now.
    5205   00:BD01                    ~ 		ld a,(hl)           ; get coordinate.
    5206   00:BD01                    ~ 		sub (ix+4)          ; subtract the sprite y.
    5207   00:BD01                    ~ 		add a,15            ; add sprite width minus one.
    5208   00:BD01                    ~ 		cp 31               ; within range?
    5209   00:BD01                    ~ 		jp nc,.sk3        	; no, ignore object.
    5210   00:BD01                    ~ 		pop de              ; remove return address from stack.
    5211   00:BD01                    ~ 		ld a,(numob)        ; objects in game.
    5212   00:BD01                    ~ 		sub b               ; subtract loop counter.
    5213   00:BD01                    ~ 		ret                 ; accumulator now points to object.
    5214   00:BD01                    ~ .sk3:
    5215   00:BD01                    ~ 		dec hl              ; back to y position.
    5216   00:BD01                    ~ .sk2:
    5217   00:BD01                    ~ 		dec hl              ; back to room.
    5218   00:BD01                    ~ 		ret
    5219   00:BD01                    ~ 
    5220   00:BD01                    ~ 	endif
    5221   00:BD01                      	
    5222   00:BD01                      	endif
    5223   00:BD01                      	
    5224   00:BD01                      	if (OFLAG or MFLAG)
    5225   00:BD01                      		
    5226   00:BD01                      ;-----------------------------------------------------------------
    5227   00:BD01                      ; Got object check.
    5228   00:BD01                      ; Call with object in accumulator, returns zero set if in pockets.
    5229   00:BD01                      ;
    5230   00:BD01                      ; Input:
    5231   00:BD01                      ;  A = object number
    5232   00:BD01                      ;-----------------------------------------------------------------
    5233   00:BD01                      
    5234   00:BD01                      gotob:
    5235   00:BD01  21 53 B5            		ld hl,numob         ; number of objects in game.
    5236   00:BD04  BE                  		cp (hl)             ; are we checking past the end?
    5237   00:BD05  30 06               		jr nc,.gotob0       ; yes, we can't have a non-existent object.
    5238   00:BD07  CD 11 BD            		call findob         ; find the object.
    5239   00:BD0A                      .gotob1:
    5240   00:BD0A  FE FF               		cp 255              ; in pockets?
    5241   00:BD0C  C9                  		ret
    5242   00:BD0D                      .gotob0:
    5243   00:BD0D  3E FE               		ld a,254            ; missing.
    5244   00:BD0F  18 F9               		jr .gotob1
    5245   00:BD11                      
    5246   00:BD11                      ; Find object address
    5247   00:BD11                      
    5248   00:BD11                      	if DISTYPE=ROM
    5249   00:BD11                      	
    5250   00:BD11                      findob:
    5251   00:BD11  26 00               		ld h,0
    5252   00:BD13  6F                  		ld l,a
    5253   00:BD14  29                  		add hl,hl
    5254   00:BD15                      		ADD_HL_A
    5254   00:BD15  85                >   add a,l
    5254   00:BD16  6F                >   ld l,a
    5254   00:BD17  8C                >   adc a,h
    5254   00:BD18  95                >   sub l
    5254   00:BD19  67                >   ld h,a
    5255   00:BD1A  11 A8 4F            		ld de,objatr
    5256   00:BD1D  19                  		add hl,de
    5257   00:BD1E  7E                  		ld a,(hl)
    5258   00:BD1F  C9                  		ret
    5259   00:BD20                      
    5260   00:BD20                      	else
    5261   00:BD20                    ~ 	
    5262   00:BD20                    ~ findob:
    5263   00:BD20                    ~ 		ld hl,objdta        ; objects.
    5264   00:BD20                    ~ 		ld de,OBJSIZ        ; size of each object (64+6)
    5265   00:BD20                    ~ 		and a               ; is it zero?
    5266   00:BD20                    ~ 		jr z,.fndob1        ; yes, skip loop.
    5267   00:BD20                    ~ 		ld b,a              ; loop counter in b.
    5268   00:BD20                    ~ .fndob2:
    5269   00:BD20                    ~ 		add hl,de           ; point to next one.
    5270   00:BD20                    ~ 		djnz .fndob2        ; repeat until we find address.
    5271   00:BD20                    ~ .fndob1:
    5272   00:BD20                    ~ 		ld e,OBJSIZ-ODTSIZ  ; distance to room it's in (0-63 obj.data, 64 room)
    5273   00:BD20                    ~ 		add hl,de           ; point to room.
    5274   00:BD20                    ~ 		ld a,(hl)           ; fetch status.
    5275   00:BD20                    ~ 		ret
    5276   00:BD20                    ~ 
    5277   00:BD20                    ~ 	endif
    5278   00:BD20                      	
    5279   00:BD20                      	endif
    5280   00:BD20                      
    5281   00:BD20                      
    5282   00:BD20                      ;
    5283   00:BD20                      ; Fills a box of values 255 in screenmap
    5284   00:BD20                      ;
    5285   00:BD20                      ; Input:
    5286   00:BD20                      ;	dispx: y coord (0-191)
    5287   00:BD20                      ;	dispy: x coord (0-255)
    5288   00:BD20                      ;	dirthig: height of the box
    5289   00:BD20                      ;	dirthig+1: width of the box		
    5290   00:BD20                      ; Output:
    5291   00:BD20                      ; 	None. box is filled in scrmap
    5292   00:BD20                      ; Modifies:
    5293   00:BD20                      ;	None
    5294   00:BD20                      ;
    5295   00:BD20                      
    5296   00:BD20                      /* dirtybox:
    5297   00:BD20                    ~ 		push hl
    5298   00:BD20                    ~ 		push de
    5299   00:BD20                    ~ 		push bc
    5300   00:BD20                    ~ 		ld de,scrmap
    5301   00:BD20                    ~ 		call chradd
    5302   00:BD20                    ~ 		add hl,de
    5303   00:BD20                    ~ 		ld de,32
    5304   00:BD20                    ~ 		ld bc,(dirthig)
    5305   00:BD20                    ~ 		ld a,b
    5306   00:BD20                    ~ .looprows:	
    5307   00:BD20                    ~ 		push hl
    5308   00:BD20                    ~ .loopcols:		
    5309   00:BD20                    ~ 		ld (hl),255
    5310   00:BD20                    ~ 		inc hl
    5311   00:BD20                    ~ 		djnz .loopcols
    5312   00:BD20                    ~ 		pop hl		
    5313   00:BD20                    ~ 		add hl,de
    5314   00:BD20                    ~ 		ld b,a		
    5315   00:BD20                    ~ 		dec c
    5316   00:BD20                    ~ 		jr nz,.looprows		
    5317   00:BD20                    ~ 		pop bc
    5318   00:BD20                    ~ 		pop de
    5319   00:BD20                    ~ 		pop hl
    5320   00:BD20                    ~ 		ret
    5321   00:BD20                    ~  */	   
    5322   00:BD20                      
    5323   00:BD20                      ; Spawn a new sprite.
    5324   00:BD20                      
    5325   00:BD20                      spawn:
    5326   00:BD20  21 B4 40            		ld hl,sprtab        ; sprite table.
    5327   00:BD23                      numsp1:
    5328   00:BD23  3E 20               		ld a,NUMSPR         ; number of sprites.
    5329   00:BD25  11 11 00            		ld de,TABSIZ        ; size of each entry.
    5330   00:BD28                      .nxtslot:
    5331   00:BD28  08                  		ex af,af            ; store loop counter.
    5332   00:BD29  7E                  		ld a,(hl)           ; get sprite type.
    5333   00:BD2A  3C                  		inc a               ; is it an unused slot?
    5334   00:BD2B  28 05               		jr z,.spaw1         ; yes, we can use this one.
    5335   00:BD2D  19                  		add hl,de           ; point to next sprite in table.
    5336   00:BD2E  08                  		ex af,af            ; restore loop counter.
    5337   00:BD2F  3D                  		dec a               ; one less iteration.
    5338   00:BD30  20 F6               		jr nz,.nxtslot      ; keep going until we find a slot.
    5339   00:BD32                      ; Didn't find one but drop through and set up a dummy sprite instead.
    5340   00:BD32                      .spaw1:
    5341   00:BD32  DD E5               		push ix             ; existing sprite address on stack.
    5342   00:BD34  22 3B 40            		ld (spptr),hl       ; store spawned sprite address.
    5343   00:BD37  71                  		ld (hl),c           ; set the type.
    5344   00:BD38  23                  		inc hl              ; point to image.
    5345   00:BD39  70                  		ld (hl),b           ; set the image.
    5346   00:BD3A  23                  		inc hl              ; next byte.
    5347   00:BD3B                      
    5348   00:BD3B  78                  		ld a,b
    5349   00:BD3C  CD FF C6            		call mapsprite
    5350   00:BD3F                      
    5351   00:BD3F  36 00               		ld (hl),0           ; frame zero.
    5352   00:BD41  23                  		inc hl              ; next byte.
    5353   00:BD42  DD 7E 03            		ld a,(ix+X)         ; x coordinate.
    5354   00:BD45  77                  		ld (hl),a           ; set sprite coordinate.
    5355   00:BD46  23                  		inc hl              ; next byte.
    5356   00:BD47  DD 7E 04            		ld a,(ix+Y)         ; y coordinate.
    5357   00:BD4A  77                  		ld (hl),a           ; set sprite coordinate.
    5358   00:BD4B  23                  		inc hl              ; next byte.
    5359   00:BD4C                      
    5360   00:BD4C  DD 7E 05            		ld a,(ix+5)         ; color
    5361   00:BD4F  77                  		ld (hl),a           ; set sprite color.
    5362   00:BD50  23                  		inc hl              ; next byte.
    5363   00:BD51  23                  		inc hl
    5364   00:BD52  23                  		inc hl
    5365   00:BD53  DD 7E 03            		ld a,(ix+X)         ; x coordinate.
    5366   00:BD56  77                  		ld (hl),a           ; set sprite coordinate.
    5367   00:BD57  23                  		inc hl              ; next byte.
    5368   00:BD58  DD 7E 04            		ld a,(ix+Y)         ; y coordinate.
    5369   00:BD5B  77                  		ld (hl),a           ; set sprite coordinate.
    5370   00:BD5C  23                  		inc hl              ; next byte.
    5371   00:BD5D                      
    5372   00:BD5D  DD 7E 0A            		ld a,(ix+10)        ; direction of original.
    5373   00:BD60  77                  		ld (hl),a           ; set the direction.
    5374   00:BD61  23                  		inc hl              ; next byte.
    5375   00:BD62  06 00               		ld b,0
    5376   00:BD64  70                  		ld (hl),b           ; reset parameter.
    5377   00:BD65  23                  		inc hl              ; next byte.
    5378   00:BD66  70                  		ld (hl),b           ; reset parameter.
    5379   00:BD67  23                  		inc hl              ; next byte.
    5380   00:BD68  70                  		ld (hl),b           ; reset parameter.
    5381   00:BD69  23                  		inc hl              ; next byte.
    5382   00:BD6A  70                  		ld (hl),b           ; reset parameter.
    5383   00:BD6B                      rtssp:
    5384   00:BD6B  DD 2A 3B 40         		ld ix,(spptr)       ; address of new sprite.
    5385   00:BD6F                      evis1:
    5386   00:BD6F  CD 86 8D            		call evnt09         ; call sprite initialisation event.
    5387   00:BD72  DD E1               		pop ix              ; address of original sprite.
    5388   00:BD74                      
    5389   00:BD74                      ;
    5390   00:BD74                      ; Finds the highest used sprite slot
    5391   00:BD74                      ;
    5392   00:BD74                      
    5393   00:BD74                      hslot:		
    5394   00:BD74  3E FF               		ld a,255
    5395   00:BD76  06 20               		ld b,NUMSPR
    5396   00:BD78  11 EF FF            		ld de,-TABSIZ
    5397   00:BD7B  21 C3 42            		ld hl,sprtab+((NUMSPR-1)*TABSIZ)
    5398   00:BD7E                      .nxtslot:
    5399   00:BD7E  BE                  		cp (hl)
    5400   00:BD7F  20 03               		jr nz,.found
    5401   00:BD81  19                  		add hl,de
    5402   00:BD82  10 FA               		djnz .nxtslot
    5403   00:BD84                      .found		
    5404   00:BD84  78                  		ld a,b
    5405   00:BD85  32 4B 40            		ld (highslot),a
    5406   00:BD88  C9                  		ret
    5407   00:BD89                      
    5408   00:BD89                      checkx:
    5409   00:BD89  7B                  		ld a,e              ; x position.
    5410   00:BD8A  FE 18               		cp MSX_MAXROWS      ; off screen?
    5411   00:BD8C  D8                  		ret c               ; no, it's okay.
    5412   00:BD8D  E1                  		pop hl              ; remove return address from stack.
    5413   00:BD8E  C9                  		ret
    5414   00:BD8F                      
    5415   00:BD8F                      ; Displays the current score. (MSX:OK)
    5416   00:BD8F                      
    5417   00:BD8F                      dscor:
    5418   00:BD8F  CD 66 C2            		call preprt         ; set up font and print position.
    5419   00:BD92  CD 89 BD            		call checkx         ; make sure we're in a printable range.
    5420   00:BD95  3A 38 40            		ld a,(prtmod)       ; get print mode.
    5421   00:BD98  A7                  		and a               ; standard size text?
    5422   00:BD99  C2 B8 BD            		jp nz,bscor0        ; no, show double-height.
    5423   00:BD9C                      dscor0:
    5424   00:BD9C  C5                  		push bc             ; place counter onto the stack.
    5425   00:BD9D  E5                  		push hl
    5426   00:BD9E  7E                  		ld a,(hl)           ; fetch character.
    5427   00:BD9F  CD 88 BE            		call ptxt           ; display character.
    5428   00:BDA2                      		
    5429   00:BDA2  21 55 40            		ld hl,dispy         ; y coordinate.
    5430   00:BDA5  34                  		inc (hl)            ; move along one.
    5431   00:BDA6  E1                  		pop hl
    5432   00:BDA7  23                  		inc hl              ; next score column.
    5433   00:BDA8  C1                  		pop bc              ; retrieve character counter.
    5434   00:BDA9  10 F1               		djnz dscor0         ; repeat for all digits.
    5435   00:BDAB  2A 5A B5            		ld hl,(blkptr)      ; blocks.
    5436   00:BDAE  22 3E 40            		ld (grbase),hl      ; set graphics base.
    5437   00:BDB1                      dscor2:
    5438   00:BDB1  2A 54 40            		ld hl,(dispx)       ; general coordinates.
    5439   00:BDB4  22 35 40            		ld (charx),hl       ; set up display coordinates.
    5440   00:BDB7  C9                  		ret
    5441   00:BDB8                      
    5442   00:BDB8                      ; Displays the current score in double-height characters.
    5443   00:BDB8                      
    5444   00:BDB8  C5                  bscor0 push bc             ; place counter onto the stack.
    5445   00:BDB9  E5                         push hl
    5446   00:BDBA  7E                         ld a,(hl)           ; fetch character.
    5447   00:BDBB  CD E5 C1                   call bchar          ; display big char.
    5448   00:BDBE  E1                         pop hl
    5449   00:BDBF  23                         inc hl              ; next score column.
    5450   00:BDC0  C1                         pop bc              ; retrieve character counter.
    5451   00:BDC1  10 F5                      djnz bscor0         ; repeat for all digits.
    5452   00:BDC3  C3 B1 BD                   jp dscor2           ; tidy up line and column variables.
    5453   00:BDC6                      
    5454   00:BDC6                      ; Adds number in the hl pair to the score.
    5455   00:BDC6                      
    5456   00:BDC6  11 01 40            addsc  ld de,score+1       ; ten thousands column.
    5457   00:BDC9  01 10 27                   ld bc,10000         ; amount to add each time.
    5458   00:BDCC  CD E8 BD                   call incsc          ; add to score.
    5459   00:BDCF  13                         inc de              ; thousands column.
    5460   00:BDD0  01 E8 03                   ld bc,1000          ; amount to add each time.
    5461   00:BDD3  CD E8 BD                   call incsc          ; add to score.
    5462   00:BDD6  13                         inc de              ; hundreds column.
    5463   00:BDD7  01 64 00                   ld bc,100           ; amount to add each time.
    5464   00:BDDA  CD E8 BD                   call incsc          ; add to score.
    5465   00:BDDD  13                         inc de              ; tens column.
    5466   00:BDDE  01 0A 00                   ld bc,10            ; amount to add each time.
    5467   00:BDE1  CD E8 BD                   call incsc          ; add to score.
    5468   00:BDE4  13                         inc de              ; units column.
    5469   00:BDE5  01 01 00                   ld bc,1             ; units.
    5470   00:BDE8  E5                  incsc  push hl             ; store amount to add.
    5471   00:BDE9  A7                         and a               ; clear the carry flag.
    5472   00:BDEA  ED 42                      sbc hl,bc           ; subtract from amount to add.
    5473   00:BDEC  38 09                      jr c,incsc0         ; too much, restore value.
    5474   00:BDEE  F1                         pop af              ; delete the previous amount from the stack.
    5475   00:BDEF  D5                         push de             ; store column position.
    5476   00:BDF0  CD F9 BD                   call incsc2         ; do the increment.
    5477   00:BDF3  D1                         pop de              ; restore column.
    5478   00:BDF4  C3 E8 BD                   jp incsc            ; repeat until all added.
    5479   00:BDF7  E1                  incsc0 pop hl              ; restore previous value.
    5480   00:BDF8  C9                         ret
    5481   00:BDF9  1A                  incsc2 ld a,(de)           ; get amount.
    5482   00:BDFA  3C                         inc a               ; add one to column.
    5483   00:BDFB  12                         ld (de),a           ; write new column total.
    5484   00:BDFC  FE 3A                      cp '9'+1            ; gone beyond range of digits?
    5485   00:BDFE  D8                         ret c               ; no, carry on.
    5486   00:BDFF  3E 30                      ld a,'0'            ; mae it zero.
    5487   00:BE01  12                         ld (de),a           ; write new column total.
    5488   00:BE02  1B                         dec de              ; back one column.
    5489   00:BE03  18 F4                      jr incsc2
    5490   00:BE05                      
    5491   00:BE05                      ; Add bonus to score.
    5492   00:BE05                      
    5493   00:BE05  11 05 40            addbo  ld de,score+5       ; last score digit.
    5494   00:BE08  21 11 40                   ld hl,bonus+5       ; last bonus digit.
    5495   00:BE0B  A7                         and a               ; clear carry.
    5496   00:BE0C  01 30 06                   ld bc,6*256+48      ; 6 digits to add, ASCII '0' in c.
    5497   00:BE0F  1A                  addbo0 ld a,(de)           ; get score.
    5498   00:BE10  8E                         adc a,(hl)          ; add bonus.
    5499   00:BE11  91                         sub c               ; 0 to 18.
    5500   00:BE12  71                         ld (hl),c           ; zeroise bonus.
    5501   00:BE13  2B                         dec hl              ; next bonus.
    5502   00:BE14  FE 3A                      cp 58               ; carried?
    5503   00:BE16  38 02                      jr c,addbo1         ; no, do next one.
    5504   00:BE18  D6 0A                      sub 10              ; subtract 10.
    5505   00:BE1A  12                  addbo1 ld (de),a           ; write new score.
    5506   00:BE1B  1B                         dec de              ; next score digit.
    5507   00:BE1C  3F                         ccf                 ; set carry for next digit.
    5508   00:BE1D  10 F0                      djnz addbo0         ; repeat for all 6 digits.
    5509   00:BE1F  C9                         ret
    5510   00:BE20                      
    5511   00:BE20                      ; Swap score and bonus.
    5512   00:BE20                      
    5513   00:BE20  11 00 40            swpsb  ld de,score         ; first score digit.
    5514   00:BE23  21 0C 40                   ld hl,bonus         ; first bonus digit.
    5515   00:BE26  06 06                      ld b,6              ; digits to add.
    5516   00:BE28  1A                  swpsb0 ld a,(de)           ; get score and bonus digits.
    5517   00:BE29  4E                         ld c,(hl)
    5518   00:BE2A  EB                         ex de,hl            ; swap pointers.
    5519   00:BE2B  71                         ld (hl),c           ; write bonus and score digits.
    5520   00:BE2C  12                         ld (de),a
    5521   00:BE2D  23                         inc hl              ; next score and bonus.
    5522   00:BE2E  13                         inc de
    5523   00:BE2F  10 F7                      djnz swpsb0         ; repeat for all 6 digits.
    5524   00:BE31  C9                         ret
    5525   00:BE32                      
    5526   00:BE32                      ; Turns graphic coordinates to text ones
    5527   00:BE32                      ; Input:
    5528   00:BE32                      ;	None
    5529   00:BE32                      ; Output:
    5530   00:BE32                      ; 	dispx & dispy updated
    5531   00:BE32                      gp2tp:
    5532   00:BE32  3A 54 40            		ld a,(dispx)
    5533   00:BE35  0F                  		rrca
    5534   00:BE36  0F                  		rrca
    5535   00:BE37  0F                  		rrca
    5536   00:BE38  E6 1F               		and $1F			
    5537   00:BE3A  32 54 40            		ld (dispx),a	; stores y/8
    5538   00:BE3D  3A 55 40            		ld a,(dispy)
    5539   00:BE40  0F                  		rrca
    5540   00:BE41  0F                  		rrca
    5541   00:BE42  0F                  		rrca
    5542   00:BE43  E6 1F               		and $1F			
    5543   00:BE45  32 55 40            		ld (dispy),a	; stores x/8
    5544   00:BE48  C9                  		ret
    5545   00:BE49                      		
    5546   00:BE49                      ; Get print address.Returns VRAM address in DE (0000-17FF).
    5547   00:BE49                      ; Requires: y(0-23), x(0-31)
    5548   00:BE49                      ; Must NOT modify HL
    5549   00:BE49                      
    5550   00:BE49                      gprad:
    5551   00:BE49  ED 5B 54 40         		ld de,(dispx)		; get y coord
    5552   00:BE4D  7A                  		ld a,d				; y*256
    5553   00:BE4E  87                  		add a,a				; get x coord
    5554   00:BE4F  87                  		add a,a				; 
    5555   00:BE50  87                  		add a,a				; 
    5556   00:BE51  53                  		ld d,e				; x*8
    5557   00:BE52  5F                  		ld e,a				; (y*256)+(x*8)
    5558   00:BE53  C9                  		ret		
    5559   00:BE54                       
    5560   00:BE54                      ; Get property buffer address of char at (dispx, dispy) in HL (0-767).
    5561   00:BE54                      ; Requires: y(0-23), x(0-31)
    5562   00:BE54                      
    5563   00:BE54                      pradd:
    5564   00:BE54  3A 54 40            		ld a,(dispx)        ; y coordinate.
    5565   00:BE57  0F                  		rrca
    5566   00:BE58  0F                  		rrca
    5567   00:BE59  0F                  		rrca
    5568   00:BE5A  6F                  		ld l,a			
    5569   00:BE5B  E6 1F               		and $1F			
    5570   00:BE5D  67                  		ld h,a			
    5571   00:BE5E  7D                  		ld a,l			
    5572   00:BE5F  E6 E0               		and $E0			
    5573   00:BE61  6F                  		ld l,a				; y * 32
    5574   00:BE62  3A 55 40            		ld a,(dispy)    	; fetch x coordinate.
    5575   00:BE65  E6 1F               		and $1F         	; should be in range 0 - 31.
    5576   00:BE67                      		ADD_HL_A
    5576   00:BE67  85                >   add a,l
    5576   00:BE68  6F                >   ld l,a
    5576   00:BE69  8C                >   adc a,h
    5576   00:BE6A  95                >   sub l
    5576   00:BE6B  67                >   ld h,a
    5577   00:BE6C  C9                  		ret		
    5578   00:BE6D                      
    5579   00:BE6D                      ; Get screen buffer address of char at (dispx, dispy) in hl (0-767).
    5580   00:BE6D                      ; Requires: y(0-191), x(0-255)
    5581   00:BE6D                      
    5582   00:BE6D                      chradd:
    5583   00:BE6D  3A 54 40            		ld a,(dispx)
    5584   00:BE70  07                  		rlca                ; multiply char by 4.
    5585   00:BE71  07                  		rlca
    5586   00:BE72  6F                  		ld l,a              ; store shift in e.
    5587   00:BE73  E6 03               		and 3               ; only want high byte bits.
    5588   00:BE75  67                  		ld h,a              ; store in d.
    5589   00:BE76  7D                  		ld a,l              ; restore shifted value.
    5590   00:BE77  E6 FC               		and $FC             ; only want low byte bits.
    5591   00:BE79  6F                  		ld l,a
    5592   00:BE7A  3A 55 40            		ld a,(dispy)
    5593   00:BE7D  E6 F8               		and $F8
    5594   00:BE7F  0F                  		rrca
    5595   00:BE80  0F                  		rrca
    5596   00:BE81  0F                  		rrca
    5597   00:BE82                      		ADD_HL_A
    5597   00:BE82  85                >   add a,l
    5597   00:BE83  6F                >   ld l,a
    5597   00:BE84  8C                >   adc a,h
    5597   00:BE85  95                >   sub l
    5597   00:BE86  67                >   ld h,a
    5598   00:BE87  C9                  		ret
    5599   00:BE88                      
    5600   00:BE88                      ; print char pattern (without color) (MSX:OK)
    5601   00:BE88                      ; A= char
    5602   00:BE88                      ; dispy,dispx = x,y
    5603   00:BE88                      ; fgclr,bgclr		
    5604   00:BE88                      ptxt:
    5605   00:BE88  07                  		rlca                ; find address for the font char
    5606   00:BE89  07                  		rlca
    5607   00:BE8A  07                  		rlca				; multiply char code by 8.
    5608   00:BE8B  5F                  		ld e,a              ; store shift in e.
    5609   00:BE8C  E6 07               		and 7               ; only want high byte bits.
    5610   00:BE8E  57                  		ld d,a              ; store in d.
    5611   00:BE8F  7B                  		ld a,e              ; restore shifted value.
    5612   00:BE90  E6 F8               		and 248             ; only want low byte bits.
    5613   00:BE92  5F                  		ld e,a              ; that's the low byte. DE=CHAR*8
    5614   00:BE93  2A 3E 40            		ld hl,(grbase)      ; address of graphics.
    5615   00:BE96  19                  		add hl,de           ; add displacement.
    5616   00:BE97  CD 49 BE            		call gprad          ; get screen address (in DE)
    5617   00:BE9A                      		SETWRT de		
    5617   00:BE9A                    >  ifdifi reg,de
    5617   00:BE9A                    ~   ld a,l
    5617   00:BE9A                    ~   di
    5617   00:BE9A                    ~   out (MSX_VDPCW),a
    5617   00:BE9A                    ~   ld a,h
    5617   00:BE9A                    ~  else
    5617   00:BE9A  7B                >   ld a,e
    5617   00:BE9B  F3                >   di
    5617   00:BE9C  D3 BF             >   out (MSX_VDPCW),a
    5617   00:BE9E  7A                >   ld a,d
    5617   00:BE9F                    >  endif
    5617   00:BE9F  F6 40             >   or $40
    5617   00:BEA1  D3 BF             >   out (MSX_VDPCW),a
    5617   00:BEA3  FB                >   ei
    5618   00:BEA4  01 BE 08            		ld bc,8*256+MSX_VDPDRW
    5619   00:BEA7                      ldirvm0:
    5620   00:BEA7  ED A3               		outi				; writes pattern bytes
    5621   00:BEA9  C2 A7 BE            		jp nz,ldirvm0				
    5622   00:BEAC  7B                  		ld a,e
    5623   00:BEAD  F3                  		di					; 5
    5624   00:BEAE  D3 BF               		out (MSX_VDPCW),a
    5625   00:BEB0  7A                  		ld a,d
    5626   00:BEB1  F6 60               		or $60				; color patterns + write
    5627   00:BEB3  FB                  		ei	
    5628   00:BEB4  D3 BF               		out (MSX_VDPCW),a   ; (51)
    5629   00:BEB6  06 08               		ld b,8
    5630   00:BEB8  3A 39 40            		ld a,(clratt)
    5631   00:BEBB                      .nxtrow:
    5632   00:BEBB  D3 BE               		out (MSX_VDPDRW),a	; writes color bytes
    5633   00:BEBD  10 FC               		djnz .nxtrow
    5634   00:BEBF  C9                  		ret
    5635   00:BEC0                      		
    5636   00:BEC0                      ; Print block with attributes, properties and pixels (saves block if adventure mode).
    5637   00:BEC0                      
    5638   00:BEC0                      pattr:
    5639   00:BEC0                      		if AFLAG
    5640   00:BEC0                    ~ 		call wbloc          ; save blockinfo	   
    5641   00:BEC0                    ~ 		endif
    5642   00:BEC0                      
    5643   00:BEC0                      ; Print block with attributes, properties and pixels (no saving).
    5644   00:BEC0                      		
    5645   00:BEC0                      pattr2:
    5646   00:BEC0  47                  		ld b,a              ; store cell in b register for now.
    5647   00:BEC1  2A 5C B5            		ld hl,(proptr)      ; pointer to properties.
    5648   00:BEC4                      		ADD_HL_A
    5648   00:BEC4  85                >   add a,l
    5648   00:BEC5  6F                >   ld l,a
    5648   00:BEC6  8C                >   adc a,h
    5648   00:BEC7  95                >   sub l
    5648   00:BEC8  67                >   ld h,a
    5649   00:BEC9  4E                  		ld c,(hl)           ; fetch byte.
    5650   00:BECA  79                  		ld a,c              ; put into accumulator.
    5651   00:BECB  FE 08               		cp COLECT           ; is it a collectable?
    5652   00:BECD  C2 D4 BE            		jp nz,pattr1        ; no, carry on as normal.
    5653   00:BED0  78                  		ld a,b              ; restore cell.
    5654   00:BED1  32 37 40            		ld (colpat),a       ; store collectable block.
    5655   00:BED4                      pattr1:
    5656   00:BED4  11 00 46            		ld de,MAP
    5657   00:BED7  CD 54 BE            		call pradd          ; get property buffer address.
    5658   00:BEDA  E5                  		push hl
    5659   00:BEDB  19                  		add hl,de
    5660   00:BEDC  71                  		ld (hl),c           ; write property.		
    5661   00:BEDD  11 00 4A            		ld de,scrmap		; screen buffer
    5662   00:BEE0  E1                  		pop hl
    5663   00:BEE1  19                  		add hl,de
    5664   00:BEE2  7E                  		ld a,(hl)
    5665   00:BEE3  B8                  		cp b
    5666   00:BEE4  28 38               		jr z, pattrnxt		; skip printing char
    5667   00:BEE6  70                   		ld (hl),b		
    5668   00:BEE7  78                  		ld a,b              ; restore block number.
    5669   00:BEE8                      
    5670   00:BEE8                      ; Print block.
    5671   00:BEE8                      pchr:
    5672   00:BEE8  07                  		rlca                ; find address for the block 
    5673   00:BEE9  07                  		rlca
    5674   00:BEEA  07                  		rlca
    5675   00:BEEB  07                  		rlca				; multiply block code by 16
    5676   00:BEEC  5F                  		ld e,a              ; store shift in e.
    5677   00:BEED  E6 0F               		and $0F             ; only want high byte bits.
    5678   00:BEEF  57                  		ld d,a              ; store in d.
    5679   00:BEF0  7B                  		ld a,e              ; restore shifted value.
    5680   00:BEF1  E6 F0               		and $F0             ; only want low byte bits.
    5681   00:BEF3  5F                  		ld e,a              ; that's the low byte. DE=CHAR*8
    5682   00:BEF4  2A 3E 40            		ld hl,(grbase)      ; address of graphics.
    5683   00:BEF7  19                  		add hl,de           ; add displacement.
    5684   00:BEF8  CD 49 BE            		call gprad          ; get screen address (in DE)
    5685   00:BEFB                      		SETWRT de
    5685   00:BEFB                    >  ifdifi reg,de
    5685   00:BEFB                    ~   ld a,l
    5685   00:BEFB                    ~   di
    5685   00:BEFB                    ~   out (MSX_VDPCW),a
    5685   00:BEFB                    ~   ld a,h
    5685   00:BEFB                    ~  else
    5685   00:BEFB  7B                >   ld a,e
    5685   00:BEFC  F3                >   di
    5685   00:BEFD  D3 BF             >   out (MSX_VDPCW),a
    5685   00:BEFF  7A                >   ld a,d
    5685   00:BF00                    >  endif
    5685   00:BF00  F6 40             >   or $40
    5685   00:BF02  D3 BF             >   out (MSX_VDPCW),a
    5685   00:BF04  FB                >   ei
    5686   00:BF05  01 BE 08            		ld bc,8*256+MSX_VDPDRW
    5687   00:BF08                      .ldirvm0:
    5688   00:BF08  ED A3               		outi
    5689   00:BF0A  C2 08 BF            		jp nz,.ldirvm0		
    5690   00:BF0D  7B                  		ld a,e
    5691   00:BF0E  F3                  		di					; 5
    5692   00:BF0F  D3 BF               		out (MSX_VDPCW),a
    5693   00:BF11  7A                  		ld a,d
    5694   00:BF12  F6 60               		or $60				; color patterns + write
    5695   00:BF14  FB                  		ei	
    5696   00:BF15  D3 BF               		out (MSX_VDPCW),a   ; (51)
    5697   00:BF17  06 08               		ld b,8
    5698   00:BF19                      .loop:
    5699   00:BF19  ED A3               		outi
    5700   00:BF1B  C2 19 BF            		jp nz,.loop
    5701   00:BF1E                      pattrnxt:		
    5702   00:BF1E  21 55 40            		ld hl,dispy         ; x coordinate.
    5703   00:BF21  34                  		inc (hl)            ; move along one.
    5704   00:BF22  C9                  		ret
    5705   00:BF23                      
    5706   00:BF23                      ;----------------------------------------------
    5707   00:BF23                      ; Write block
    5708   00:BF23                      ;----------------------------------------------
    5709   00:BF23                      
    5710   00:BF23                      		if AFLAG
    5711   00:BF23                    ~ wbloc:
    5712   00:BF23                    ~ 		ld de,(pblkptr)
    5713   00:BF23                    ~         ld hl,scno
    5714   00:BF23                    ~         ldi                ; write screen.
    5715   00:BF23                    ~         ld hl,dispx
    5716   00:BF23                    ~         ldi                ; write x position of block.
    5717   00:BF23                    ~         ldi                ; write y position of block.
    5718   00:BF23                    ~         ld (de),a          ; store block number
    5719   00:BF23                    ~         inc de
    5720   00:BF23                    ~ 		
    5721   00:BF23                    ~ 		ld (pblkptr),de
    5722   00:BF23                    ~         ret
    5723   00:BF23                    ~ 		endif
    5724   00:BF23                      	   
    5725   00:BF23                      ; Get room address.
    5726   00:BF23                      
    5727   00:BF23                      groom:
    5728   00:BF23  3A 41 40            		ld a,(scno)         ; screen number.
    5729   00:BF26                      groomx:
    5730   00:BF26  11 00 00            		ld de,0             ; start at zero.
    5731   00:BF29  2A 5E B5            		ld hl,(scrptr)      ; pointer to screens.
    5732   00:BF2C                      groom1:
    5733   00:BF2C  4E                  		ld c,(hl)           ; low byte of screen size.
    5734   00:BF2D  23                  		inc hl              ; point to high byte.
    5735   00:BF2E  46                  		ld b,(hl)           ; high byte of screen size.
    5736   00:BF2F  23                  		inc hl              ; next address.
    5737   00:BF30  A7                  		and a               ; is it the first one?
    5738   00:BF31  28 06               		jr z,groom0         ; no more screens to skip.
    5739   00:BF33  EB                  		ex de,hl            ; put total in hl, pointer in de.
    5740   00:BF34  09                  		add hl,bc           ; skip a screen.
    5741   00:BF35  EB                  		ex de,hl            ; put total in de, pointer in hl.
    5742   00:BF36  3D                  		dec a               ; one less iteration.
    5743   00:BF37  18 F3               		jr groom1           ; loop until we reach the end.
    5744   00:BF39                      groom0:
    5745   00:BF39  2A 5E B5            		ld hl,(scrptr)      ; pointer to screens.
    5746   00:BF3C  19                  		add hl,de           ; add displacement.
    5747   00:BF3D  3A 9B 97            		ld a,(numsc)        ; number of screens.
    5748   00:BF40  16 00               		ld d,0              ; zeroise high byte.
    5749   00:BF42  5F                  		ld e,a              ; displacement in de.
    5750   00:BF43  19                  		add hl,de           ; add double displacement to address.
    5751   00:BF44  19                  		add hl,de
    5752   00:BF45  C9                  		ret
    5753   00:BF46                      
    5754   00:BF46                      ; Draw present room.
    5755   00:BF46                      
    5756   00:BF46                      droom:
    5757   00:BF46  3A 93 40            		ld a,(wintop)       ; window top.
    5758   00:BF49  32 54 40            		ld (dispx),a        ; set x coordinate.
    5759   00:BF4C                      droom2:
    5760   00:BF4C  2A 5A B5            		ld hl,(blkptr)      ; blocks.
    5761   00:BF4F  22 3E 40            		ld (grbase),hl      ; set graphics base.
    5762   00:BF52  CD 23 BF            		call groom          ; get address of current room.
    5763   00:BF55                      
    5764   00:BF55  11 D4 42            		ld de,mapbuf
    5765   00:BF58  CD 58 C8            		call unpack
    5766   00:BF5B                      		; call scunpack	
    5767   00:BF5B                      		
    5768   00:BF5B                      		
    5769   00:BF5B  21 D4 42            		ld hl,mapbuf
    5770   00:BF5E  3A 95 40            		ld a,(winhgt)       ; height of window.
    5771   00:BF61  4F                  		ld c,a
    5772   00:BF62                      droom0:
    5773   00:BF62  3A 94 40            		ld a,(winlft)       ; window left edge.
    5774   00:BF65  32 55 40            		ld (dispy),a        ; set cursor position.
    5775   00:BF68  3A 96 40            		ld a,(winwid)       ; width of window.
    5776   00:BF6B  47                  		ld b,a
    5777   00:BF6C                      droom1:
    5778   00:BF6C  C5                  		push bc             ; store column counter.
    5779   00:BF6D  7E                  		ld a,(hl)
    5780   00:BF6E  23                  		inc hl
    5781   00:BF6F  E5                  		push hl             ; store address of cell.
    5782   00:BF70                      	if MBFLAG
    5783   00:BF70                    ~ 		call drwmeta		; draw metablock
    5784   00:BF70                    ~ 	else
    5785   00:BF70  CD C0 BE            		call pattr2
    5786   00:BF73                      	endif
    5787   00:BF73  E1                  		pop hl              ; restore cell address.
    5788   00:BF74  C1                  		pop bc              ; restore loop counter.
    5789   00:BF75  10 F5               		djnz droom1
    5790   00:BF77  3A 54 40            		ld a,(dispx)        ; y coord.
    5791   00:BF7A  3C                  		inc a               ; move down one line.
    5792   00:BF7B                      	if MBFLAG
    5793   00:BF7B                    ~ 		inc a				; move down one line.
    5794   00:BF7B                    ~ 	endif		
    5795   00:BF7B  32 54 40            		ld (dispx),a        ; set new position.
    5796   00:BF7E  0D                  		dec c
    5797   00:BF7F  20 E1               		jr nz,droom0
    5798   00:BF81  C3 03 C3            		jp enascreen
    5799   00:BF84                      
    5800   00:BF84                      /*
    5801   00:BF84                    ~ ; HL = pointer to packed screen data
    5802   00:BF84                    ~ ; BC = lenght of packed screen data
    5803   00:BF84                    ~ scunpack:
    5804   00:BF84                    ~ 		xor a               ; zero in accumulator.
    5805   00:BF84                    ~ 		ld (comcnt),a       ; reset compression counter.	
    5806   00:BF84                    ~ 		ex de,hl	
    5807   00:BF84                    ~ 		ld bc,MAPSIZE		
    5808   00:BF84                    ~ .nxtbyte:		
    5809   00:BF84                    ~ 		ld a,(comcnt)       ; compression counter.
    5810   00:BF84                    ~ 		and a               ; any more to decompress?
    5811   00:BF84                    ~ 		jp nz,.flbyt1        ; yes.
    5812   00:BF84                    ~ 		ld a,(de)           ; fetch next byte.
    5813   00:BF84                    ~ 		inc de              ; point to next cell.
    5814   00:BF84                    ~ 		cp 255              ; is this byte a control code?
    5815   00:BF84                    ~ 		jp nz,.nocom         ; no, this byte is uncompressed.
    5816   00:BF84                    ~ 		ld a,(de)           ; fetch byte type.
    5817   00:BF84                    ~ 		ld (combyt),a       ; set up the type.
    5818   00:BF84                    ~ 		inc de              ; point to quantity.
    5819   00:BF84                    ~ 		ld a,(de)           ; get quantity.
    5820   00:BF84                    ~ 		inc de              ; point to next byte.
    5821   00:BF84                    ~ .flbyt1:
    5822   00:BF84                    ~ 		dec a               ; one less.
    5823   00:BF84                    ~ 		ld (comcnt),a       ; store new quantity.
    5824   00:BF84                    ~ 		ld a,(combyt)       ; byte to expand.
    5825   00:BF84                    ~ .nocom:
    5826   00:BF84                    ~ 		ld (hl),a
    5827   00:BF84                    ~ 		cpi
    5828   00:BF84                    ~ 		jp pe,.nxtbyte
    5829   00:BF84                    ~ 		ret
    5830   00:BF84                    ~ */
    5831   00:BF84                      	
    5832   00:BF84                      ; ------------------------------------------------------------------------------------------------------------------------------------------
    5833   00:BF84                      ; Drawing a MetaBlock (4 tiles 8x8 => 16x16)
    5834   00:BF84                      ; param in regA tells the block number to use, if 0 use 0,0,0,0  else use 
    5835   00:BF84                      ; N,N+2 
    5836   00:BF84                      ; N+1,N+3
    5837   00:BF84                      ; ------------------------------------------------------------------------------------------------------------------------------------------
    5838   00:BF84                      	if MBFLAG
    5839   00:BF84                    ~ drwmeta:
    5840   00:BF84                    ~ 		ld b,2
    5841   00:BF84                    ~ drwm01:
    5842   00:BF84                    ~ 		push bc
    5843   00:BF84                    ~ 		push af
    5844   00:BF84                    ~ 		call pattr2		; put block N
    5845   00:BF84                    ~ 		dec (hl)		; decrement X, back to start column
    5846   00:BF84                    ~ 		dec hl
    5847   00:BF84                    ~ 		inc (hl)		; increment y, next line
    5848   00:BF84                    ~ 		pop af
    5849   00:BF84                    ~ 		or a
    5850   00:BF84                    ~ 		jr z, drwm02
    5851   00:BF84                    ~ 		inc a			; put block N+1
    5852   00:BF84                    ~ drwm02:
    5853   00:BF84                    ~ 		push af
    5854   00:BF84                    ~ 		call pattr2
    5855   00:BF84                    ~ 		dec hl			
    5856   00:BF84                    ~ 		dec (hl)		; decrement Y, back to start line
    5857   00:BF84                    ~ 		pop af
    5858   00:BF84                    ~ 		or a
    5859   00:BF84                    ~ 		jr z,drwm03
    5860   00:BF84                    ~ 		inc a			; put block N+2
    5861   00:BF84                    ~ drwm03:
    5862   00:BF84                    ~ 		pop bc
    5863   00:BF84                    ~ 		djnz drwm01
    5864   00:BF84                    ~ 		ret
    5865   00:BF84                    ~ /*
    5866   00:BF84                    ~ 
    5867   00:BF84                    ~ drwmeta:
    5868   00:BF84                    ~ 		ldb	#$02							; columns to be drawn
    5869   00:BF84                    ~ 		pshs	b,a							; [,S]=block number - [1,S]=column counter
    5870   00:BF84                    ~ DrwM01:	
    5871   00:BF84                    ~ 		jsr	PAttr2						; print block number A at dispX,dispY
    5872   00:BF84                    ~ 		inc	<dispY						; point to next line
    5873   00:BF84                    ~ 		dec	<dispX						; back one column
    5874   00:BF84                    ~ 		lda	,s								; get block number
    5875   00:BF84                    ~ 		beq	DrwM02						; is zero?
    5876   00:BF84                    ~ 		inca									; no, get next block number (for row two)
    5877   00:BF84                    ~ 		sta	,s								; update stack variable
    5878   00:BF84                    ~ DrwM02:	
    5879   00:BF84                    ~ 		jsr	PAttr2						; print block number A at dispX,dispY
    5880   00:BF84                    ~ 		dec	<dispY						; point to previous line, column is OK
    5881   00:BF84                    ~ 		lda	,s								; get block number
    5882   00:BF84                    ~ 		beq	DrwM03						; is zero?
    5883   00:BF84                    ~ 		inca									; no, point to next block number: N+2
    5884   00:BF84                    ~ 		sta	,s								; update stack variable
    5885   00:BF84                    ~ DrwM03:	
    5886   00:BF84                    ~ 		dec	1,s							; decrement column counter in stack
    5887   00:BF84                    ~ 		bne	DrwM01						; if not zero, loop for next Column
    5888   00:BF84                    ~ 		puls	a,b,pc						; clean stack and return
    5889   00:BF84                    ~ */
    5890   00:BF84                    ~ 
    5891   00:BF84                    ~ 	endif
    5892   00:BF84                      	
    5893   00:BF84                      	if LFLAG
    5894   00:BF84                    ~ 	
    5895   00:BF84                    ~ ; Ladder down check.
    5896   00:BF84                    ~ 
    5897   00:BF84                    ~ laddd:
    5898   00:BF84                    ~ 		ld l,16
    5899   00:BF84                    ~ 		jr ladd
    5900   00:BF84                    ~ 
    5901   00:BF84                    ~ ; Ladder up check.
    5902   00:BF84                    ~ 
    5903   00:BF84                    ~ laddu:
    5904   00:BF84                    ~ 		ld l,15
    5905   00:BF84                    ~ ladd:
    5906   00:BF84                    ~ 		ld a,(ix+3)         ; y coordinate.
    5907   00:BF84                    ~ 		ld h,(ix+4)         ; x coordinate.
    5908   00:BF84                    ~ 		add a,l            ; look 2 pixels above feet.
    5909   00:BF84                    ~ 		ld l,a              ; coords in hl.
    5910   00:BF84                    ~ 
    5911   00:BF84                    ~ laddv:
    5912   00:BF84                    ~ 		ld (dispx),hl       ; set up test coordinates.
    5913   00:BF84                    ~ 		call tstbl          ; get map address.
    5914   00:BF84                    ~ 		call ldchk          ; standard ladder check.
    5915   00:BF84                    ~ 		ret nz              ; no way through.
    5916   00:BF84                    ~ 		inc hl              ; look right one cell.
    5917   00:BF84                    ~ 		call ldchk          ; do the check.
    5918   00:BF84                    ~ 		ret nz              ; impassable.
    5919   00:BF84                    ~ 		ld a,(dispy)        ; y coordinate.
    5920   00:BF84                    ~ 		and 7               ; position straddling block cells.
    5921   00:BF84                    ~ 		ret z               ; no more checks needed.
    5922   00:BF84                    ~ 		inc hl              ; look to third cell.
    5923   00:BF84                    ~ 	
    5924   00:BF84                    ~ ; Check ladder is available.
    5925   00:BF84                    ~ 
    5926   00:BF84                    ~ ldchk:
    5927   00:BF84                    ~ 		ld a,(hl)           ; fetch cell.
    5928   00:BF84                    ~ 		cp LADDER           ; is it a ladder?
    5929   00:BF84                    ~ 		ret                 ; return with zero flag set accordingly.
    5930   00:BF84                    ~ 
    5931   00:BF84                    ~ 	endif
    5932   00:BF84                      	
    5933   00:BF84                      ; Can go up check.
    5934   00:BF84                      
    5935   00:BF84                      cangu:
    5936   00:BF84  DD 7E 03            		ld a,(ix+3)         ; y coordinate.
    5937   00:BF87  DD 66 04            		ld h,(ix+4)         ; x coordinate.
    5938   00:BF8A  D6 01               		sub 1               ; look up 1 pixels.
    5939   00:BF8C  6F                  		ld l,a              ; coords in hl.
    5940   00:BF8D  22 54 40            		ld (dispx),hl       ; set up test coordinates.
    5941   00:BF90  CD 60 C0            		call tstbl          ; get map address.
    5942   00:BF93  CD 0A C0            		call lrchk          ; standard left/right check.
    5943   00:BF96  C0                  		ret nz              ; no way through.
    5944   00:BF97  23                  		inc hl              ; look right one cell.
    5945   00:BF98  CD 0A C0            		call lrchk          ; do the check.
    5946   00:BF9B  C0                  		ret nz              ; impassable.
    5947   00:BF9C  3A 55 40            		ld a,(dispy)        ; y coordinate.
    5948   00:BF9F  E6 07               		and 7               ; position straddling block cells.
    5949   00:BFA1  C8                  		ret z               ; no more checks needed.
    5950   00:BFA2  23                  		inc hl              ; look to third cell.
    5951   00:BFA3  C3 0A C0            		jp lrchk          ; do the check.
    5952   00:BFA6                      
    5953   00:BFA6                      ; Can go down check.
    5954   00:BFA6                      
    5955   00:BFA6                      cangd:
    5956   00:BFA6  DD 7E 03            		ld a,(ix+3)         ; y coordinate.
    5957   00:BFA9  DD 66 04            		ld h,(ix+4)         ; x coordinate.
    5958   00:BFAC                      numsp3:
    5959   00:BFAC  C6 10               		add a,16            ; look down 16 pixels.
    5960   00:BFAE  6F                  		ld l,a              ; coords in hl.
    5961   00:BFAF  22 54 40            		ld (dispx),hl       ; set up test coordinates.
    5962   00:BFB2  CD 60 C0            		call tstbl          ; get map address.
    5963   00:BFB5  CD C5 BF            		call plchk          ; block, platform check.
    5964   00:BFB8  C0                  		ret nz              ; no way through.
    5965   00:BFB9  23                  		inc hl              ; look right one cell.
    5966   00:BFBA  CD C5 BF            		call plchk          ; block, platform check.
    5967   00:BFBD  C0                  		ret nz              ; impassable.
    5968   00:BFBE  3A 55 40            		ld a,(dispy)        ; y coordinate.
    5969   00:BFC1  E6 07               		and 7               ; position straddling block cells.
    5970   00:BFC3  C8                  		ret z               ; no more checks needed.
    5971   00:BFC4  23                  		inc hl              ; look to third cell.
    5972   00:BFC5                      
    5973   00:BFC5                      ; Check platform or solid item is not in way.
    5974   00:BFC5                      
    5975   00:BFC5                      plchk:
    5976   00:BFC5  7E                  		ld a,(hl)           ; fetch map cell.
    5977   00:BFC6  FE 02               		cp WALL             ; is it passable?
    5978   00:BFC8  28 4B               		jr z,lrchkx         ; no.
    5979   00:BFCA                      	if (PFLAG or DFLAG)
    5980   00:BFCA  FE 04               		cp FODDER           ; fodder has to be dug.
    5981   00:BFCC  28 47               		jr z,lrchkx         ; not passable.
    5982   00:BFCE                      	endif
    5983   00:BFCE  FE 01               		cp PLATFM           ; platform is solid.
    5984   00:BFD0  28 02               		jr z,plchkx         ; not passable.
    5985   00:BFD2                      	if LFLAG
    5986   00:BFD2                    ~ 		cp LADDER           ; is it a ladder?
    5987   00:BFD2                    ~ 		jr z,lrchkx         ; on ladder, deny movement.
    5988   00:BFD2                    ~ 	endif
    5989   00:BFD2                      plchk0:
    5990   00:BFD2  AF                  		xor a               ; report it as okay.
    5991   00:BFD3  C9                  		ret
    5992   00:BFD4                      plchkx:
    5993   00:BFD4  3A 54 40            		ld a,(dispx)        ; x coordinate.
    5994   00:BFD7  E6 07               		and 7               ; position straddling blocks.
    5995   00:BFD9  28 3A               		jr z,lrchkx         ; on platform, deny movement.
    5996   00:BFDB  18 F5               		jr plchk0
    5997   00:BFDD                      
    5998   00:BFDD                      
    5999   00:BFDD                      ; Can go left check.
    6000   00:BFDD                      
    6001   00:BFDD                      cangl:
    6002   00:BFDD  DD 6E 03            		ld l,(ix+3)         ; y coordinate.
    6003   00:BFE0  DD 7E 04            		ld a,(ix+4)         ; x coordinate.
    6004   00:BFE3  D6 01               		sub 1               ; look left 1 pixels.
    6005   00:BFE5  67                  		ld h,a              ; coords in hl.
    6006   00:BFE6  18 09               		jr cangh            ; test if we can go there.
    6007   00:BFE8                      
    6008   00:BFE8                      ; Can go right check.
    6009   00:BFE8                      
    6010   00:BFE8                      cangr:
    6011   00:BFE8  DD 6E 03            		ld l,(ix+3)         ; y coordinate.
    6012   00:BFEB  DD 7E 04            		ld a,(ix+4)         ; x coordinate.
    6013   00:BFEE  C6 10               		add a,16            ; look right 16 pixels.
    6014   00:BFF0  67                  		ld h,a              ; coords in hl.
    6015   00:BFF1                      
    6016   00:BFF1                      cangh:
    6017   00:BFF1  22 54 40            		ld (dispx),hl       ; set up test coordinates.
    6018   00:BFF4                      cangh2:
    6019   00:BFF4  06 03               		ld b,3              ; default rows to write.
    6020   00:BFF6  7D                  		ld a,l              ; x position.
    6021   00:BFF7  E6 07               		and 7               ; does x straddle cells?
    6022   00:BFF9  20 01               		jr nz,cangh0        ; yes, loop counter is good.
    6023   00:BFFB  05                  		dec b               ; one less row to write.
    6024   00:BFFC                      cangh0:
    6025   00:BFFC  CD 60 C0            		call tstbl          ; get map address.
    6026   00:BFFF  11 20 00            		ld de,MSX_MAXCOLS      ; distance to next cell.
    6027   00:C002                      cangh1:
    6028   00:C002  CD 0A C0            		call lrchk          ; standard left/right check.
    6029   00:C005  C0                  		ret nz              ; no way through.
    6030   00:C006  19                  		add hl,de           ; look down.
    6031   00:C007  10 F9               		djnz cangh1
    6032   00:C009  C9                  		ret
    6033   00:C00A                      
    6034   00:C00A                      ; Check left/right movement is okay.
    6035   00:C00A                      
    6036   00:C00A                      lrchk:
    6037   00:C00A  7E                  		ld a,(hl)           ; fetch map cell.
    6038   00:C00B  FE 02               		cp WALL             ; is it passable?
    6039   00:C00D  28 06               		jr z,lrchkx         ; no.
    6040   00:C00F  FE 04               		cp FODDER           ; fodder has to be dug.
    6041   00:C011  28 02               		jr z,lrchkx         ; not passable.
    6042   00:C013                      always:
    6043   00:C013  AF                  		xor a               ; report it as okay.
    6044   00:C014  C9                  		ret
    6045   00:C015                      lrchkx:
    6046   00:C015  AF                  		xor a               ; reset all bits.
    6047   00:C016  3C                  		inc a
    6048   00:C017  C9                  		ret
    6049   00:C018                      
    6050   00:C018                      	
    6051   00:C018                      	if CFLAG
    6052   00:C018                    ~ 	
    6053   00:C018                    ~ ; Get collectables.
    6054   00:C018                    ~ 
    6055   00:C018                    ~ getcol:
    6056   00:C018                    ~ 		ld b,COLECT         ; collectable blocks.
    6057   00:C018                    ~ 		call tded           ; test for collectable blocks.
    6058   00:C018                    ~ 		cp b                ; did we find one?
    6059   00:C018                    ~ 		ret nz              ; none were found, job done.
    6060   00:C018                    ~ 		call gtblk          ; get block.
    6061   00:C018                    ~ 		call evnt20         ; collected block event.
    6062   00:C018                    ~ 		jr getcol           ; repeat until none left.
    6063   00:C018                    ~ 
    6064   00:C018                    ~ ; Get collectable block.
    6065   00:C018                    ~ 
    6066   00:C018                    ~ gtblk:
    6067   00:C018                    ~ 		ld (hl),0           ; make it empty now.
    6068   00:C018                    ~ 		ld de,MAP           ; map address.
    6069   00:C018                    ~ 		and a               ; clear carry.
    6070   00:C018                    ~ 		sbc hl,de           ; find cell number.
    6071   00:C018                    ~ 		ld a,l              ; get low byte of cell number.
    6072   00:C018                    ~ 		and MSX_MAXCOLS-1   ; 0 - 31 is column.
    6073   00:C018                    ~ 		ld d,a              ; store y in d register.
    6074   00:C018                    ~ 		add hl,hl           ; multiply by 8.
    6075   00:C018                    ~ 		add hl,hl
    6076   00:C018                    ~ 		add hl,hl           ; x is now in h.
    6077   00:C018                    ~ 		ld e,h              ; put x in e.
    6078   00:C018                    ~ 		ld (dispx),de       ; set display coordinates.
    6079   00:C018                    ~ 		ld hl,(blkptr)      ; blocks.
    6080   00:C018                    ~ 		ld (grbase),hl      ; set graphics base.
    6081   00:C018                    ~ 		xor a
    6082   00:C018                    ~ 		jp pchr
    6083   00:C018                    ~ 
    6084   00:C018                    ~ 	endif
    6085   00:C018                      	
    6086   00:C018                      ; Touched deadly block check.
    6087   00:C018                      ; Returns with DEADLY (must be non-zero) in accumulator if true.
    6088   00:C018                      
    6089   00:C018                      tded:
    6090   00:C018  DD 6E 03            		ld l,(ix+3)         ; x coordinate.
    6091   00:C01B  DD 66 04            		ld h,(ix+4)         ; y coordinate.
    6092   00:C01E  22 54 40            		ld (dispx),hl       ; set up test coordinates.
    6093   00:C021  CD 60 C0            		call tstbl          ; get map address.
    6094   00:C024  11 1F 00            		ld de,MSX_MAXCOLS-1 ; default distance to next line down.
    6095   00:C027  B8                  		cp b                ; is this the required block?
    6096   00:C028  C8                  		ret z               ; yes.
    6097   00:C029  23                  		inc hl              ; next cell.
    6098   00:C02A  7E                  		ld a,(hl)           ; fetch type.
    6099   00:C02B  B8                  		cp b                ; is this deadly/custom?
    6100   00:C02C  C8                  		ret z               ; yes.
    6101   00:C02D  3A 55 40            		ld a,(dispy)        ; horizontal position.
    6102   00:C030  4F                  		ld c,a              ; store column in c register.
    6103   00:C031  E6 07               		and 7               ; is it straddling cells?
    6104   00:C033  28 05               		jr z,.tded0          ; no.
    6105   00:C035  23                  		inc hl              ; last cell.
    6106   00:C036  7E                  		ld a,(hl)           ; fetch type.
    6107   00:C037  B8                  		cp b                ; is this the block?
    6108   00:C038  C8                  		ret z               ; yes.
    6109   00:C039  1B                  		dec de              ; one less cell to next row down.
    6110   00:C03A                      .tded0:  
    6111   00:C03A  19                  		add hl,de           ; point to next row.
    6112   00:C03B  7E                  		ld a,(hl)           ; fetch left cell block.
    6113   00:C03C  B8                  		cp b                ; is this fatal?
    6114   00:C03D  C8                  		ret z               ; yes.
    6115   00:C03E  23                  		inc hl              ; next cell.
    6116   00:C03F  7E                  		ld a,(hl)           ; fetch type.
    6117   00:C040  B8                  		cp b                ; is this fatal?
    6118   00:C041  C8                  		ret z               ; yes.
    6119   00:C042  79                  		ld a,c              ; horizontal position.
    6120   00:C043  E6 07               		and 7               ; is it straddling cells?
    6121   00:C045  28 04               		jr z,.tded1          ; no.
    6122   00:C047  23                  		inc hl              ; last cell.
    6123   00:C048  7E                  		ld a,(hl)           ; fetch type.
    6124   00:C049  B8                  		cp b                ; is this fatal?
    6125   00:C04A  C8                  		ret z               ; yes.
    6126   00:C04B                      .tded1:
    6127   00:C04B  3A 54 40            		ld a,(dispx)        ; vertical position.
    6128   00:C04E  E6 07               		and 7               ; is it straddling cells?
    6129   00:C050  C8                  		ret z               ; no, job done.
    6130   00:C051  19                  		add hl,de           ; point to next row.
    6131   00:C052  7E                  		ld a,(hl)           ; fetch left cell block.
    6132   00:C053  B8                  		cp b                ; is this fatal?
    6133   00:C054  C8                  		ret z               ; yes.
    6134   00:C055  23                  		inc hl              ; next cell.
    6135   00:C056  7E                  		ld a,(hl)           ; fetch type.
    6136   00:C057  B8                  		cp b                ; is this fatal?
    6137   00:C058  C8                  		ret z               ; yes.
    6138   00:C059  79                  		ld a,c              ; horizontal position.
    6139   00:C05A  E6 07               		and 7               ; is it straddling cells?
    6140   00:C05C  C8                  		ret z               ; no.
    6141   00:C05D  23                  		inc hl              ; last cell.
    6142   00:C05E  7E                  		ld a,(hl)           ; fetch final type.
    6143   00:C05F  C9                  		ret                 ; return with final type in accumulator.
    6144   00:C060                      
    6145   00:C060                      
    6146   00:C060                      ; Fetch block type at (dispx, dispy).
    6147   00:C060                      ; Input:
    6148   00:C060                      ; 	dispx = Y coord (0-191)
    6149   00:C060                      ; 	dispy = X coord (0-255)
    6150   00:C060                      ; Output:
    6151   00:C060                      ;	A = block code at (dispx, dispy)
    6152   00:C060                      ; Modifies:
    6153   00:C060                      ;	A,HL
    6154   00:C060                      tstbl:
    6155   00:C060  3A 54 40            		ld a,(dispx)        ; fetch y coord.
    6156   00:C063  07                  		rlca                ; divide by 8,
    6157   00:C064  07                  		rlca                ; and multiply by 32.
    6158   00:C065  67                  		ld h,a              ; store in d.
    6159   00:C066  E6 E0               		and $E0             ; mask off high bits.
    6160   00:C068  6F                  		ld l,a              ; low byte.
    6161   00:C069  7C                  		ld a,h              ; restore shift result.
    6162   00:C06A  E6 03               		and 3               ; high bits.
    6163   00:C06C  C6 46               		add a,MAP>>8
    6164   00:C06E  67                  		ld h,a              ; got displacement in de.
    6165   00:C06F  3A 55 40            		ld a,(dispy)        ; x coord.
    6166   00:C072  1F                  		rra                 ; divide by 8.
    6167   00:C073  1F                  		rra
    6168   00:C074  1F                  		rra
    6169   00:C075  E6 1F               		and 31              ; only want 0 - 31.
    6170   00:C077  85                  		add a,l             ; add to displacement.
    6171   00:C078  6F                  		ld l,a              ; displacement in hl.
    6172   00:C079  7E                  		ld a,(hl)           ; fetch byte there.
    6173   00:C07A  C9                  		ret
    6174   00:C07B                      
    6175   00:C07B                      
    6176   00:C07B                      ; Jump - if we can.
    6177   00:C07B                      ; Requires initial speed to be set up in accumulator prior to call.
    6178   00:C07B                      
    6179   00:C07B                      jump:
    6180   00:C07B  ED 44               		neg                 ; switch sign so we jump up.
    6181   00:C07D  4F                  		ld c,a              ; store in c register.
    6182   00:C07E                      jump0:
    6183   00:C07E  DD 7E 0D            		ld a,(ix+13)        ; jumping flag.
    6184   00:C081  A7                  		and a               ; is it set?
    6185   00:C082  C0                  		ret nz              ; already in the air.
    6186   00:C083  DD 34 0D            		inc (ix+13)         ; set it.
    6187   00:C086  DD 71 0E            		ld (ix+14),c        ; set jump height.
    6188   00:C089  C9                  		ret
    6189   00:C08A                      
    6190   00:C08A                      hop:   
    6191   00:C08A  DD 7E 0D            		ld a,(ix+13)        ; jumping flag.
    6192   00:C08D  A7                  		and a               ; is it set?
    6193   00:C08E  C0                  		ret nz              ; already in the air.
    6194   00:C08F  DD 36 0D FF         		ld (ix+13),255      ; set it.
    6195   00:C093  DD 36 0E 00         		ld (ix+14),0        ; set jump table displacement.
    6196   00:C097  C9                  		ret
    6197   00:C098                      
    6198   00:C098                      ; Random numbers code.
    6199   00:C098                      ; Pseudo-random number generator, 8-bit.
    6200   00:C098                      
    6201   00:C098                      random:
    6202   00:C098  21 3D 40            		ld hl,seed          ; set up seed pointer.
    6203   00:C09B  7E                  		ld a,(hl)           ; get last random number.
    6204   00:C09C  47                  		ld b,a              ; copy to b register.
    6205   00:C09D  0F                  		rrca                ; multiply by 32.
    6206   00:C09E  0F                  		rrca
    6207   00:C09F  0F                  		rrca
    6208   00:C0A0  EE 1F               		xor 31
    6209   00:C0A2  80                  		add a,b
    6210   00:C0A3  DE FF               		sbc a,255
    6211   00:C0A5  77                  		ld (hl),a           ; store new seed.
    6212   00:C0A6  32 56 40            		ld (varrnd),a       ; return number in variable.
    6213   00:C0A9  C9                  		ret
    6214   00:C0AA                      
    6215   00:C0AA                      ; Keyboard test routine. (returns NC if pressed)
    6216   00:C0AA                      ;
    6217   00:C0AA                      ; Checks if a key is pressed
    6218   00:C0AA                      ;
    6219   00:C0AA                      ; Input:	A=offset
    6220   00:C0AA                      ;		D=mask
    6221   00:C0AA                      ; Output:	Carry=1 if key not pressed
    6222   00:C0AA                      ;		Carry=0 if key is pressed
    6223   00:C0AA                      ; Modifies:	A,C
    6224   00:C0AA                      ;
    6225   00:C0AA                      ktest:
    6226   00:C0AA  C5                  	push bc
    6227   00:C0AB  E5                  	push hl
    6228   00:C0AC  01 00 00            	ld bc,0
    6229   00:C0AF  4A                  	ld c,d
    6230   00:C0B0  21 97 40            	ld hl,CONTROLLER_BUFFER
    6231   00:C0B3  09                  	add hl,bc
    6232   00:C0B4  BE                  	cp (hl)
    6233   00:C0B5  28 04               	jr z,keypressed
    6234   00:C0B7  E1                  	pop hl
    6235   00:C0B8  C1                  	pop bc
    6236   00:C0B9  37                  	scf
    6237   00:C0BA  C9                  	ret
    6238   00:C0BB                      keypressed:
    6239   00:C0BB  E1                  	pop hl
    6240   00:C0BC  C1                  	pop bc
    6241   00:C0BD  A7                  	and a
    6242   00:C0BE  C9                  	ret	
    6243   00:C0BF                      
    6244   00:C0BF                      ;		call MSX_SNSMAT
    6245   00:C0BF                      ;		and d
    6246   00:C0BF                      ;		ret z
    6247   00:C0BF                      ;		scf					; sets C, key NOT pressed
    6248   00:C0BF                      ;		ret
    6249   00:C0BF                      ;
    6250   00:C0BF                      ;chkselect:
    6251   00:C0BF                      ;		ld a,(select)
    6252   00:C0BF                      ;		or a
    6253   00:C0BF                      ;		jr z,.chghz
    6254   00:C0BF                      ;		dec a
    6255   00:C0BF                      ;		ld (select),a
    6256   00:C0BF                      ;		ret nz
    6257   00:C0BF                      ;.chghz:
    6258   00:C0BF                      ;		bit 6,e
    6259   00:C0BF                      ;		ret nz
    6260   00:C0BF                      ;		; SELECT key pressed
    6261   00:C0BF                      ;		call swaphz
    6262   00:C0BF                      ;		; falls through setticks
    6263   00:C0BF                      		
    6264   00:C0BF                      ; Sets the number of frames/sec. based on PAL/NTSC setting
    6265   00:C0BF                      ; Input:
    6266   00:C0BF                      ;	A = (RG9SAV)
    6267   00:C0BF                      ; Output:
    6268   00:C0BF                      ;	(TICKS) = 50/60
    6269   00:C0BF                      ;   (SELECT) = 50/60
    6270   00:C0BF                      ;setticks:
    6271   00:C0BF                      ;		and 2
    6272   00:C0BF                      ;		ld a,50
    6273   00:C0BF                      ;		jr nz,.itspal
    6274   00:C0BF                      ;		ld a,60
    6275   00:C0BF                      ;.itspal:
    6276   00:C0BF                      ;		ld (ticks),a
    6277   00:C0BF                      ;		ld (select),a
    6278   00:C0BF                      ;		ret
    6279   00:C0BF                      ;		
    6280   00:C0BF                      ;
    6281   00:C0BF                      ; Check if STOP key is pressed
    6282   00:C0BF                      ;		
    6283   00:C0BF                      ;stopselect:
    6284   00:C0BF                      ;		ld a,7
    6285   00:C0BF                      ;		call MSX_SNSMAT
    6286   00:C0BF                      ;		ld e,a
    6287   00:C0BF                      ;	ifdef NOBIOS
    6288   00:C0BF                      ;		ld a,(biosvars+MSX_MSXVER)      	; version del MSX
    6289   00:C0BF                      ;	else
    6290   00:C0BF                      ;		ld a,(MSX_MSXVER)      	; version del MSX
    6291   00:C0BF                      ;	endif		
    6292   00:C0BF                      ;		or a
    6293   00:C0BF                      ;		; push de
    6294   00:C0BF                      ;		call nz,chkselect
    6295   00:C0BF                      ;		; pop de
    6296   00:C0BF                      ;		bit 4,e
    6297   00:C0BF                      ;		ret nz
    6298   00:C0BF                      ;.loop1
    6299   00:C0BF                      ;		ld a,7
    6300   00:C0BF                      ;		call MSX_SNSMAT
    6301   00:C0BF                      ;		and $10
    6302   00:C0BF                      ;		jr z,.loop1
    6303   00:C0BF                      ;
    6304   00:C0BF                      ;.loop2
    6305   00:C0BF                      ;		ld a,7
    6306   00:C0BF                      ;		call MSX_SNSMAT
    6307   00:C0BF                      ;		and $10
    6308   00:C0BF                      ;		jr nz,.loop2
    6309   00:C0BF                      ;.loop3
    6310   00:C0BF                      ;		ld a,7
    6311   00:C0BF                      ;		call MSX_SNSMAT
    6312   00:C0BF                      ;		and $10
    6313   00:C0BF                      ;		jr z,.loop3
    6314   00:C0BF                      ;		ret
    6315   00:C0BF                      	
    6316   00:C0BF                      ; Joystick and keyboard reading routines.
    6317   00:C0BF                      ; A/E/joyval = result bits: 0,fire3,fire2,fire,up,down,left,right
    6318   00:C0BF                      
    6319   00:C0BF                      joykey:
    6320   00:C0BF                      ;		call stopselect
    6321   00:C0BF                      
    6322   00:C0BF                      		ifdef DEBUG
    6323   00:C0BF                    ~ 		BORDER 7
    6324   00:C0BF                    ~ 		endif
    6325   00:C0BF                      
    6326   00:C0BF  3A 34 40            		ld a,(contrl)       ; control flag.
    6327   00:C0C2  3D                  		dec a               ; is it the keyboard?
    6328   00:C0C3  28 08               		jr z,joyjoy1        ; no, it's joystick 1
    6329   00:C0C5  3D                  		dec a               ; joystick 2?
    6330   00:C0C6  28 0A               		jr z,joyjoy2        ; read joystick 2
    6331   00:C0C8                      
    6332   00:C0C8                      ; Control was keyboard (CONTROL=0)
    6333   00:C0C8                      
    6334   00:C0C8  21 8A 40            		ld hl,keys+13       ; address of last key.
    6335   00:C0CB  18 08               		jr readkeys
    6336   00:C0CD                      
    6337   00:C0CD                      ; Control was joystick 1 (CONTROL=1)
    6338   00:C0CD                      
    6339   00:C0CD                      joyjoy1:
    6340   00:C0CD  21 F7 C0            		ld hl,joykey1+13    ; address of last key.
    6341   00:C0D0  18 03               		jr readkeys
    6342   00:C0D2                      
    6343   00:C0D2                      ; Control was joystick 2 (CONTROL=2)
    6344   00:C0D2                      
    6345   00:C0D2                      joyjoy2:
    6346   00:C0D2  21 05 C1            		ld hl,joykey2+13    ; address of last key.
    6347   00:C0D5                      
    6348   00:C0D5                      readkeys:
    6349   00:C0D5  1E 00               		ld e,0              ; zero reading.
    6350   00:C0D7  06 07               		ld b,7              ; keys to read.
    6351   00:C0D9                      .loop:
    6352   00:C0D9  56                  		ld d,(hl)           ; get key from table.
    6353   00:C0DA  2B                  		dec hl
    6354   00:C0DB  7E                  		ld a,(hl)	    ; get row
    6355   00:C0DC  2B                  		dec hl
    6356   00:C0DD  CD AA C0            		call ktest          ; is key pressed (C=0)?
    6357   00:C0E0  3F                  		ccf                 ; complement the result (0=not pressed,1=pressed).
    6358   00:C0E1  CB 13               		rl e                ; rotate into reading.
    6359   00:C0E3  10 F4               		djnz .loop          ; repeat for all keys.
    6360   00:C0E5                      
    6361   00:C0E5  7B                  		ld a,e              ; copy e register to accumulator.
    6362   00:C0E6  32 40 40            		ld (joyval),a       ; remember value.
    6363   00:C0E9                      
    6364   00:C0E9                      		ifdef DEBUG
    6365   00:C0E9                    ~ 		BORDER 14
    6366   00:C0E9                    ~ 		endif
    6367   00:C0E9                      
    6368   00:C0E9  C9                  		ret
    6369   00:C0EA                      
    6370   00:C0EA                      joykey1:
    6371   00:C0EA                      	dw $0302,$0308,$0304,$0301	; Direction buttons
    6371   00:C0EA  02 03 08 03 04 03 01 03 
    6372   00:C0F2  40 02 40 05 0B 06   	dw $0240,$0540,$060b		; Fire buttons
    6373   00:C0F8                      
    6374   00:C0F8                      joykey2:
    6375   00:C0F8                      	dw $0802,$0808,$0804,$0801	; Direction buttons
    6375   00:C0F8  02 08 08 08 04 08 01 08 
    6376   00:C100  40 07 40 0A 0B 0B   	dw $0740,$0a40,$0b0b		; Fire buttons
    6377   00:C106                      
    6378   00:C106                      
    6379   00:C106                      ; Display message.
    6380   00:C106                      
    6381   00:C106                      dmsg:	
    6382   00:C106  21 D0 91            		ld hl,msgdat        ; pointer to messages.
    6383   00:C109  CD 76 C2            		call getwrd         ; get message number.
    6384   00:C10C                      dmsg3:
    6385   00:C10C  CD 66 C2            		call preprt         ; pre-printing stuff.
    6386   00:C10F  CD 89 BD            		call checkx         ; make sure we're in a printable range.
    6387   00:C112                      		
    6388   00:C112  EB                  		ex de,hl
    6389   00:C113  CD 54 BE            		call pradd			; find scrmap pointer from dispx,dispy
    6390   00:C116  E5                  		push hl				; preserves buffer pointer
    6391   00:C117  EB                  		ex de,hl
    6392   00:C118  E5                  		push hl				; preserves start of string
    6393   00:C119                      		
    6394   00:C119  3A 38 40            		ld a,(prtmod)       ; print mode.
    6395   00:C11C  A7                  		and a               ; standard size?
    6396   00:C11D  C2 91 C1            		jp nz,bmsg1         ; no, double-height text.
    6397   00:C120                      dmsg0:	
    6398   00:C120  E5                  		push hl             ; store string pointer.
    6399   00:C121  7E                  		ld a,(hl)           ; fetch byte to display.
    6400   00:C122  E6 7F               		and 127             ; remove any end marker.
    6401   00:C124  FE 0D               		cp 13               ; newline character?
    6402   00:C126  28 59               		jr z,dmsg1
    6403   00:C128  CD 88 BE            		call ptxt           ; display character.		
    6404   00:C12B                      		
    6405   00:C12B  CD 54 C2            		call nexpos         ; display position.
    6406   00:C12E  20 03               		jr nz,dmsg2         ; not on a new line.
    6407   00:C130                      		
    6408   00:C130  CD 5E C2            		call nexlin         ; next line down.
    6409   00:C133                      dmsg2:	
    6410   00:C133  E1                  		pop hl				
    6411   00:C134  7E                  		ld a,(hl)           ; fetch last character.
    6412   00:C135  17                  		rla                 ; was it the end?
    6413   00:C136  D2 7D C1            		jp nc,.nxtchr
    6414   00:C139                      
    6415   00:C139  D1                  		pop de				; restores start of string
    6416   00:C13A  B7                  		or a
    6417   00:C13B  ED 52               		sbc hl,de			
    6418   00:C13D  20 0A               		jr nz,.btzero
    6419   00:C13F  21 00 4A            		ld hl,scrmap
    6420   00:C142  D1                  		pop de				; restores scrmap buffer pointer
    6421   00:C143  19                  		add hl,de			; start of string in scrmap
    6422   00:C144  36 FF               		ld (hl),255                     ; mark as dirty in scrmap
    6423   00:C146  C3 B1 BD            		jp dscor2
    6424   00:C149                      .btzero:
    6425   00:C149                      
    6426   00:C149  44                  		ld b,h
    6427   00:C14A  4D                  		ld c,l				; get string lenght in BC
    6428   00:C14B  D1                  		pop de				; restores scrmap buffer pointer
    6429   00:C14C  19                  		add hl,de
    6430   00:C14D  7C                  		ld a,h
    6431   00:C14E  FE 03               		cp 3				; check if end of string is higher than length of map
    6432   00:C150  30 0E               		jr nc,.wrapped
    6433   00:C152                      .strseg:
    6434   00:C152  21 00 4A            		ld hl,scrmap
    6435   00:C155  19                  		add hl,de			; start of string in scrmap
    6436   00:C156  54                  		ld d,h
    6437   00:C157  5D                  		ld e,l
    6438   00:C158  1C                  		inc e
    6439   00:C159  36 FF               		ld (hl),255                     ; mark as dirty in scrmap
    6440   00:C15B  ED B0               		ldir		
    6441   00:C15D  C3 B1 BD            		jp dscor2         	; job done.
    6442   00:C160                      .wrapped:	; half of the message is in the bottom and the rest wraps to coord 0,0
    6443   00:C160                      		; upper segment
    6444   00:C160  7D                  		ld a,l
    6445   00:C161  B7                  		or a
    6446   00:C162  28 11               		jr z,.bottom
    6447   00:C164  E5                  		push hl
    6448   00:C165  D5                  		push de
    6449   00:C166  C5                  		push bc
    6450   00:C167  4D                  		ld c,l
    6451   00:C168  21 00 4A            		ld hl,scrmap
    6452   00:C16B  11 01 4A            		ld de,scrmap+1
    6453   00:C16E  36 FF               		ld (hl),255                     ; mark as dirty in scrmap
    6454   00:C170  ED B0               		ldir	
    6455   00:C172  C1                  		pop bc
    6456   00:C173  D1                  		pop de
    6457   00:C174  E1                  		pop hl
    6458   00:C175                      .bottom:
    6459   00:C175                      		; bottom segment
    6460   00:C175  79                  		ld a,c
    6461   00:C176  95                  		sub l
    6462   00:C177  4F                  		ld c,a
    6463   00:C178  1C                  		inc e
    6464   00:C179  0D                  		dec c
    6465   00:C17A  0D                  		dec c
    6466   00:C17B  18 D5               		jr .strseg
    6467   00:C17D                      		
    6468   00:C17D                      .nxtchr:
    6469   00:C17D  23                  		inc hl              ; next character to display.
    6470   00:C17E  C3 20 C1            		jp dmsg0
    6471   00:C181                      dmsg1:
    6472   00:C181  21 54 40            		ld hl,dispx         ; y coordinate.
    6473   00:C184  34                  		inc (hl)            ; newline.
    6474   00:C185  7E                  		ld a,(hl)           ; fetch position.
    6475   00:C186  FE 18               		cp MSX_MAXROWS		; past screen edge?
    6476   00:C188  38 02               		jr c,dmsg4          ; no, it's okay.
    6477   00:C18A  36 00               		ld (hl),0           ; restart at top.
    6478   00:C18C  23                  dmsg4:	inc hl              ; x coordinate.
    6479   00:C18D  36 00               		ld (hl),0           ; carriage return.
    6480   00:C18F  18 A2               		jr dmsg2
    6481   00:C191                      	   
    6482   00:C191                      
    6483   00:C191                      
    6484   00:C191                      ; Display message in big text.
    6485   00:C191                      
    6486   00:C191                      bmsg1:
    6487   00:C191  7E                  		ld a,(hl)           ; get character to display.
    6488   00:C192  E5                  		push hl             ; store pointer to message.
    6489   00:C193  E6 7F               		and 127             ; only want 7 bits.
    6490   00:C195  FE 0D               		cp 13               ; newline character?
    6491   00:C197  28 3B               		jr z,.bmsg2
    6492   00:C199  CD E5 C1            		call bchar          ; display big char.
    6493   00:C19C                      .bmsg3:
    6494   00:C19C  E1                  		pop hl              ; retrieve message pointer.
    6495   00:C19D  7E                  		ld a,(hl)           ; look at last character.
    6496   00:C19E  23                  		inc hl              ; next character in list.
    6497   00:C19F  17                  		rla                 ; was terminator flag set?
    6498   00:C1A0  30 EF               		jr nc,bmsg1         ; no, keep going.
    6499   00:C1A2                      
    6500   00:C1A2  D1                  		pop de				; restores start of string
    6501   00:C1A3  B7                  		or a
    6502   00:C1A4  ED 52               		sbc hl,de			
    6503   00:C1A6  20 0E               		jr nz,.btzero
    6504   00:C1A8  21 00 4A            		ld hl,scrmap
    6505   00:C1AB  D1                  		pop de				; restores scrmap buffer pointer
    6506   00:C1AC  19                  		add hl,de			; start of string in scrmap
    6507   00:C1AD  36 FF               		ld (hl),255			; 1st half
    6508   00:C1AF  11 20 00            		ld de,32
    6509   00:C1B2  19                  		add hl,de
    6510   00:C1B3  36 FF               		ld (hl),255			; 2nd half
    6511   00:C1B5  C9                  		ret
    6512   00:C1B6                      .btzero:
    6513   00:C1B6                      		; upper half
    6514   00:C1B6  44                  		ld b,h
    6515   00:C1B7  4D                  		ld c,l				; get string lenght in BC
    6516   00:C1B8  21 00 4A            		ld hl,scrmap
    6517   00:C1BB  D1                  		pop de				; restores scrmap buffer pointer
    6518   00:C1BC  19                  		add hl,de			; start of string in scrmap
    6519   00:C1BD  54                  		ld d,h
    6520   00:C1BE  5D                  		ld e,l
    6521   00:C1BF  13                  		inc de
    6522   00:C1C0  36 FF               		ld (hl),255
    6523   00:C1C2  E5                  		push hl
    6524   00:C1C3  C5                  		push bc
    6525   00:C1C4  ED B0               		ldir
    6526   00:C1C6                      		; bottom half
    6527   00:C1C6  C1                  		pop bc
    6528   00:C1C7  E1                  		pop hl
    6529   00:C1C8  11 20 00            		ld de,32
    6530   00:C1CB  19                  		add hl,de
    6531   00:C1CC  54                  		ld d,h
    6532   00:C1CD  5D                  		ld e,l
    6533   00:C1CE  13                  		inc de
    6534   00:C1CF  36 FF               		ld (hl),255
    6535   00:C1D1  ED B0               		ldir
    6536   00:C1D3  C9                  		ret
    6537   00:C1D4                      .bmsg2:
    6538   00:C1D4  21 35 40            		ld hl,charx         ; y coordinate.
    6539   00:C1D7  34                  		inc (hl)            ; newline.
    6540   00:C1D8  34                  		inc (hl)            ; newline.
    6541   00:C1D9  7E                  		ld a,(hl)           ; fetch position.
    6542   00:C1DA  FE 17               		cp MSX_MAXROWS-1		; past screen edge?
    6543   00:C1DC  38 BE               		jr c,.bmsg3          ; no, it's okay.
    6544   00:C1DE  36 00               		ld (hl),0           ; restart at top.
    6545   00:C1E0  23                  		inc hl              ; y coordinate.
    6546   00:C1E1  36 00               		ld (hl),0           ; carriage return.
    6547   00:C1E3  18 B7               		jr .bmsg3
    6548   00:C1E5                      
    6549   00:C1E5                      
    6550   00:C1E5                      ; Big character display.
    6551   00:C1E5                      
    6552   00:C1E5                      bchar:
    6553   00:C1E5  07                  		rlca                ; multiply char by 8.
    6554   00:C1E6  07                  		rlca
    6555   00:C1E7  07                  		rlca
    6556   00:C1E8  5F                  		ld e,a              ; store shift in e.
    6557   00:C1E9  E6 07               		and 7               ; only want high byte bits.
    6558   00:C1EB  57                  		ld d,a              ; store in d.
    6559   00:C1EC  7B                  		ld a,e              ; restore shifted value.
    6560   00:C1ED  E6 F8               		and $F8             ; only want low byte bits.
    6561   00:C1EF  5F                  		ld e,a              ; that's the low byte. DE=CHAR*8
    6562   00:C1F0  2A 3E 40            		ld hl,(grbase)      ; address of graphics.
    6563   00:C1F3  19                  		add hl,de           ; add displacement.
    6564   00:C1F4  CD 49 BE            		call gprad          ; get screen address (in DE)
    6565   00:C1F7                      
    6566   00:C1F7                      /*		
    6567   00:C1F7                    ~ 		dec d	
    6568   00:C1F7                    ~ 		ld b,2
    6569   00:C1F7                    ~ .nxtchar:		
    6570   00:C1F7                    ~ 		inc d
    6571   00:C1F7                    ~ 		SETWRT de
    6572   00:C1F7                    ~ 		ld c,4
    6573   00:C1F7                    ~ .nxtrow:
    6574   00:C1F7                    ~ 		ld a,(hl)
    6575   00:C1F7                    ~ 		out (MSX_VDPDRW),a
    6576   00:C1F7                    ~ 		inc hl
    6577   00:C1F7                    ~ 		dec c
    6578   00:C1F7                    ~ 		nop					; VDP slowdown		
    6579   00:C1F7                    ~ 		out (MSX_VDPDRW),a
    6580   00:C1F7                    ~ 		jr nz,.nxtrow
    6581   00:C1F7                    ~ 		djnz .nxtchar
    6582   00:C1F7                    ~ */
    6583   00:C1F7                      
    6584   00:C1F7  06 02               		ld b,2
    6585   00:C1F9                      .nxtchar:		
    6586   00:C1F9                      
    6587   00:C1F9  7B                  		ld a,e
    6588   00:C1FA  F3                  		di
    6589   00:C1FB  D3 BF               		out (MSX_VDPCW),a
    6590   00:C1FD  7A                  		ld a,d
    6591   00:C1FE  F6 40               		or $40
    6592   00:C200  D3 BF               		out (MSX_VDPCW),a
    6593   00:C202  FB                  		ei	
    6594   00:C203                      
    6595   00:C203  0E 04               		ld c,4
    6596   00:C205                      .nxtrow:
    6597   00:C205  7E                  		ld a,(hl)
    6598   00:C206  D3 BE               		out (MSX_VDPDRW),a
    6599   00:C208  23                  		inc hl
    6600   00:C209  0D                  		dec c
    6601   00:C20A  00                  		nop					; VDP slowdown		
    6602   00:C20B  D3 BE               		out (MSX_VDPDRW),a
    6603   00:C20D  20 F6               		jr nz,.nxtrow
    6604   00:C20F  14                  		inc d
    6605   00:C210  10 E7               		djnz .nxtchar
    6606   00:C212                      		
    6607   00:C212  15                  		dec d
    6608   00:C213  15                  		dec d
    6609   00:C214  7A                  		ld a,d
    6610   00:C215  F6 60               		or $60
    6611   00:C217  57                  		ld d,a
    6612   00:C218                      
    6613   00:C218  3A 39 40            		ld a,(clratt)
    6614   00:C21B  0E BF               		ld c,MSX_VDPCW
    6615   00:C21D  2E 02               		ld l,2
    6616   00:C21F                      nxtchar2:		
    6617   00:C21F  F3                          di
    6618   00:C220  ED 59                       out (c),e
    6619   00:C222  FB                          ei		
    6620   00:C223  ED 51                       out (c),d
    6621   00:C225  06 08               		ld b,8
    6622   00:C227                      nxtfile2:
    6623   00:C227  D3 BE               		out (MSX_VDPDRW),a
    6624   00:C229  10 FC               		djnz nxtfile2
    6625   00:C22B  14                  		inc d
    6626   00:C22C  2D                  		dec l
    6627   00:C22D  20 F0               		jr nz,nxtchar2
    6628   00:C22F                      
    6629   00:C22F                      /*
    6630   00:C22F                    ~ 		ld b,2
    6631   00:C22F                    ~ nxtchar2:		
    6632   00:C22F                    ~ 
    6633   00:C22F                    ~ 		ld a,e
    6634   00:C22F                    ~         di
    6635   00:C22F                    ~         out (MSX_VDPCW),a
    6636   00:C22F                    ~         ld a,d
    6637   00:C22F                    ~ 		ld c,8
    6638   00:C22F                    ~         or 64       		;for write, set bit 6 high
    6639   00:C22F                    ~         out (MSX_VDPCW),a
    6640   00:C22F                    ~         ei		
    6641   00:C22F                    ~ 
    6642   00:C22F                    ~ 		ld a,(clratt)
    6643   00:C22F                    ~ nxtfile2:
    6644   00:C22F                    ~ 		out (MSX_VDPDRW),a
    6645   00:C22F                    ~ 		dec c
    6646   00:C22F                    ~ 		jr nz,nxtfile2
    6647   00:C22F                    ~ 		inc d
    6648   00:C22F                    ~ 		djnz nxtchar2	
    6649   00:C22F                    ~ */
    6650   00:C22F                      
    6651   00:C22F                      		
    6652   00:C22F  CD 54 C2            bchar1 call nexpos         ; display position.
    6653   00:C232  C2 39 C2                   jp nz,bchar2        ; not on a new line.
    6654   00:C235  34                  bchar3 inc (hl)            ; newline.
    6655   00:C236  CD 5E C2                   call nexlin         ; next line check.
    6656   00:C239  C3 B1 BD            bchar2 jp dscor2           ; tidy up line and column variables.
    6657   00:C23C                      
    6658   00:C23C                      ; Display a character. (MSX:OK)
    6659   00:C23C                      
    6660   00:C23C                      achar:
    6661   00:C23C  47                  		ld b,a              ; copy to b.
    6662   00:C23D  CD 66 C2            		call preprt         ; get ready to print.
    6663   00:C240  3A 38 40            		ld a,(prtmod)       ; print mode.
    6664   00:C243  A7                  		and a               ; standard size?
    6665   00:C244  78                  		ld a,b              ; character in accumulator.
    6666   00:C245  C2 E5 C1            		jp nz,bchar         ; no, double-height text.
    6667   00:C248  CD 88 BE            		call ptxt           ; display character.
    6668   00:C24B                      	   
    6669   00:C24B  CD 54 C2            		call nexpos         ; display position.
    6670   00:C24E  CA 35 C2            		jp z,bchar3         ; next line down.
    6671   00:C251  C3 39 C2            		jp bchar2           ; tidy up.
    6672   00:C254                      
    6673   00:C254                      ; Get next print column position.(MSX:OK)
    6674   00:C254                      
    6675   00:C254                      nexpos:
    6676   00:C254  21 55 40            		ld hl,dispy         ; X display position.
    6677   00:C257  7E                  		ld a,(hl)           ; get coordinate.
    6678   00:C258  3C                  		inc a               ; move along one position.
    6679   00:C259  E6 1F               		and MSX_MAXCOLS-1   ; reached edge of screen?
    6680   00:C25B                      		
    6681   00:C25B  77                  		ld (hl),a           ; set new position.
    6682   00:C25C  2B                  		dec hl              ; point to y now.
    6683   00:C25D  C9                  		ret                 ; return with status in zero flag.
    6684   00:C25E                      
    6685   00:C25E                      ; Get next print line position. (MSX:OK)
    6686   00:C25E                      
    6687   00:C25E  34                  nexlin inc (hl)            ; newline.
    6688   00:C25F  7E                         ld a,(hl)           ; vertical position.
    6689   00:C260  FE 18                      cp MSX_MAXROWS      ; past screen edge?
    6690   00:C262  D8                         ret c               ; no, still okay.
    6691   00:C263  36 00                      ld (hl),0           ; restart at top.
    6692   00:C265  C9                         ret
    6693   00:C266                      
    6694   00:C266                      ; Pre-print preliminaries.
    6695   00:C266                      
    6696   00:C266                      preprt: 
    6697   00:C266  11 D8 B0            		ld de,font-256		; font pointer, skipping first 32 ASCII codes
    6698   00:C269  ED 53 3E 40         		ld (grbase),de      ; set up graphics base.
    6699   00:C26D                      prescr:
    6700   00:C26D  ED 5B 35 40         		ld de,(charx)       ; display coordinates.
    6701   00:C271  ED 53 54 40         		ld (dispx),de       ; set up general coordinates.
    6702   00:C275  C9                  		ret
    6703   00:C276                      
    6704   00:C276                      ; On entry: hl points to word list
    6705   00:C276                      ;           a contains word number.
    6706   00:C276                      ; Modifies: b,a,hl
    6707   00:C276                      
    6708   00:C276                      getwrd:	; (MSX:OK)
    6709   00:C276  A7                  		and a               ; first word in list?
    6710   00:C277  C8                  		ret z               ; yep, don't search.
    6711   00:C278  47                  		ld b,a
    6712   00:C279                      getwd0:
    6713   00:C279  7E                  		ld a,(hl)
    6714   00:C27A  23                  		inc hl
    6715   00:C27B  FE 80               		cp 128              ; found end?
    6716   00:C27D  38 FA               		jr c,getwd0         ; no, carry on.
    6717   00:C27F  10 F8               		djnz getwd0         ; until we have right number.
    6718   00:C281  C9                  		ret
    6719   00:C282                      
    6720   00:C282                      ; Process sprites.
    6721   00:C282                      		
    6722   00:C282                      pspr:
    6723   00:C282  3A 4B 40            		ld a,(highslot)
    6724   00:C285  A7                  		and a
    6725   00:C286  C8                  		ret z				; no sprites, nothing to do
    6726   00:C287                      		ifdef DEBUG
    6727   00:C287                    ~ 		BORDER 6
    6728   00:C287                    ~ 		endif
    6729   00:C287  47                  		ld b,a
    6730   00:C288  DD 21 B4 40         		ld ix,sprtab        ; sprite table.
    6731   00:C28C                      .loop:
    6732   00:C28C  C5                  		push bc
    6733   00:C28D  DD 7E 00            		ld a,(ix+0)         ; fetch sprite type.
    6734   00:C290  FE 09               		cp 9                ; within range of sprite types?
    6735   00:C292  DC 9E C2            		call c,pspr2        ; yes, process this one.
    6736   00:C295  11 11 00            		ld de,TABSIZ        ; distance to next odd/even entry.
    6737   00:C298  DD 19               		add ix,de           ; next sprite.
    6738   00:C29A  C1                  		pop bc
    6739   00:C29B  10 EF               		djnz .loop
    6740   00:C29D                      		ifdef DEBUG
    6741   00:C29D                    ~ 		BORDER 9
    6742   00:C29D                    ~ 		endif
    6743   00:C29D  C9                  		ret
    6744   00:C29E                      pspr2:
    6745   00:C29E  DD 22 42 40         		ld (ogptr),ix       ; store original sprite pointer.
    6746   00:C2A2  67                  		ld h,a
    6747   00:C2A3  DD 7E 03            		ld a,(ix+3)			; saves sprite coordinates as backup
    6748   00:C2A6  DD 77 08            		ld (ix+8),a
    6749   00:C2A9  DD 7E 04            		ld a,(ix+4)
    6750   00:C2AC  DD 77 09            		ld (ix+9),a
    6751   00:C2AF  7C                  		ld a,h
    6752   00:C2B0  CD B8 C2            		call pspr3          ; do the routine.
    6753   00:C2B3                      ; rtorg:
    6754   00:C2B3  DD 2A 42 40         		ld ix,(ogptr)       ; restore original pointer to sprite.
    6755   00:C2B7                      ; rtorg0:
    6756   00:C2B7  C9                  		ret
    6757   00:C2B8                      pspr3:
    6758   00:C2B8  21 C6 C2            		ld hl,evtyp0        ; sprite type events list.
    6759   00:C2BB                      pspr4:
    6760   00:C2BB  87                  		add a,a             ; double accumulator.
    6761   00:C2BC                      		ADD_HL_A
    6761   00:C2BC  85                >   add a,l
    6761   00:C2BD  6F                >   ld l,a
    6761   00:C2BE  8C                >   adc a,h
    6761   00:C2BF  95                >   sub l
    6761   00:C2C0  67                >   ld h,a
    6762   00:C2C1                      ;
    6763   00:C2C1                      ; Makes an indirect jump based on the contents of HL
    6764   00:C2C1                      ;
    6765   00:C2C1                      jumphl:	
    6766   00:C2C1  7E                  		ld a,(hl)
    6767   00:C2C2  23                  		inc hl
    6768   00:C2C3  66                  		ld h,(hl)
    6769   00:C2C4  6F                  		ld l,a
    6770   00:C2C5  E9                  		jp (hl)
    6771   00:C2C6                      
    6772   00:C2C6                      ; Address of each sprite type's routine.
    6773   00:C2C6                      
    6774   00:C2C6  A8 80               evtyp0:	dw evnt00
    6775   00:C2C8  63 83               evtyp1:	dw evnt01
    6776   00:C2CA  1A 84               evtyp2:	dw evnt02
    6777   00:C2CC  4C 84               evtyp3:	dw evnt03
    6778   00:C2CE  8C 84               evtyp4:	dw evnt04
    6779   00:C2D0  D7 84               evtyp5:	dw evnt05
    6780   00:C2D2  23 85               evtyp6:	dw evnt06
    6781   00:C2D4  5D 85               evtyp7:	dw evnt07
    6782   00:C2D6  23 8A               evtyp8:	dw evnt08
    6783   00:C2D8                      
    6784   00:C2D8                      ; Look for sprites not mapped yet and map them
    6785   00:C2D8                      ; Input:
    6786   00:C2D8                      ;	None
    6787   00:C2D8                      ; Output:
    6788   00:C2D8                      ;	None. Sprites mapped
    6789   00:C2D8                      ;
    6790   00:C2D8                      chkimg:
    6791   00:C2D8  3A 4B 40            		ld a,(highslot)
    6792   00:C2DB  A7                  		and a
    6793   00:C2DC  C8                  		ret z				; no sprites, nothing to do
    6794   00:C2DD                      		ifdef DEBUG
    6795   00:C2DD                    ~ 		BORDER 3
    6796   00:C2DD                    ~ 		endif
    6797   00:C2DD  47                  		ld b,a
    6798   00:C2DE  11 11 00            		ld de,TABSIZ				
    6799   00:C2E1                      .loop:		
    6800   00:C2E1  DD 7E 00            		ld a,(ix+0)			; get sprite type
    6801   00:C2E4  3C                  		inc a
    6802   00:C2E5  28 14               		jr z,.nxtspr		; is the sprite active?		
    6803   00:C2E7  DD 7E 01            		ld a,(ix+1)		
    6804   00:C2EA  4F                   		ld c,a
    6805   00:C2EB  CD 29 C6            		call gfrm
    6806   00:C2EE  6E                  		ld l,(hl)
    6807   00:C2EF  26 4D               		ld h,mapspr>>8		
    6808   00:C2F1  7E                  		ld a,(hl)
    6809   00:C2F2  3C                  		inc a				; has already been mapped?
    6810   00:C2F3  20 06               		jr nz,.nxtspr
    6811   00:C2F5  79                  		ld a,c
    6812   00:C2F6  EB                  		ex de,hl
    6813   00:C2F7  CD FF C6             		call mapsprite		; the sprite has not been mapped ($FF), do it now
    6814   00:C2FA  EB                  		ex de,hl
    6815   00:C2FB                      .nxtspr:		
    6816   00:C2FB  DD 19               		add ix,de           ; next sprite.
    6817   00:C2FD  10 E2               		djnz .loop          ; repeat for remaining sprites.
    6818   00:C2FF                      		ifdef DEBUG
    6819   00:C2FF                    ~ 		BORDER 14
    6820   00:C2FF                    ~ 		endif
    6821   00:C2FF  C9                  		ret
    6822   00:C300                       
    6823   00:C300                      disscreen:
    6824   00:C300  C3 41 00            		jp MSX_DISSCR
    6825   00:C303                      
    6826   00:C303                      enascreen:
    6827   00:C303  C3 44 00            		jp MSX_ENASCR
    6828   00:C306                      		
    6829   00:C306                      dissprs:
    6830   00:C306  3E D0               		ld a,MSX_HIDE_SPRITES	; disable all sprites
    6831   00:C308  21 00 1B            		ld hl,MSX_SPRATR
    6832   00:C30B  C3 A3 CB            		jp MSX_WRTVRM
    6833   00:C30E                      
    6834   00:C30E                      ;
    6835   00:C30E                      ; Copy data from RAM to VRAM
    6836   00:C30E                      ; Input:
    6837   00:C30E                      ; 	HL: Source in RAM
    6838   00:C30E                      ; 	DE: VRAM address to copy to
    6839   00:C30E                      ;	B: bytes to copy (0-255, 0 is 256 bytes)
    6840   00:C30E                      ; Output:
    6841   00:C30E                      ;	None. 
    6842   00:C30E                      
    6843   00:C30E                      
    6844   00:C30E                      ;		 
    6845   00:C30E                      ram2vram:
    6846   00:C30E  0E BF               		ld c,MSX_VDPCW
    6847   00:C310  F3                          di
    6848   00:C311  ED 59                       out (c),e
    6849   00:C313  CB F2                       set 6,d			; high byte set for write
    6850   00:C315  FB                          ei	
    6851   00:C316  ED 51                       out (c),d
    6852   00:C318  0D                  		dec c 
    6853   00:C319                      .loop:		
    6854   00:C319                      		[8] outi
    6854   00:C319  ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 
    6855   00:C329  C2 19 C3            		jp nz,.loop
    6856   00:C32C  C9                  		ret
    6857   00:C32D                      
    6858   00:C32D                      ;
    6859   00:C32D                      ; Copy data from RAM to VRAM
    6860   00:C32D                      ; Input:
    6861   00:C32D                      ; 	HL: Source in RAM
    6862   00:C32D                      ; 	DE: VRAM address to copy to
    6863   00:C32D                      ;	B: bytes to copy (0-255, 0 is 256 bytes)
    6864   00:C32D                      ; Output:
    6865   00:C32D                      ;	None. 
    6866   00:C32D                      ;		 
    6867   00:C32D                      ram2vram_slow:
    6868   00:C32D  0E BF               		ld c,MSX_VDPCW
    6869   00:C32F  F3                          di
    6870   00:C330  ED 59                       out (c),e
    6871   00:C332  CB F2                       set 6,d			; high byte set for write
    6872   00:C334  FB                          ei	
    6873   00:C335  ED 51                       out (c),d
    6874   00:C337  0D                  		dec c 
    6875   00:C338                      .loop:		
    6876   00:C338  ED A3               		outi
    6877   00:C33A  C2 38 C3            		jp nz,.loop
    6878   00:C33D  C9                  		ret
    6879   00:C33E                      
    6880   00:C33E                       
    6881   00:C33E                      buildspr:
    6882   00:C33E  3A 4B 40            		ld a,(highslot)		; max number of sprites being instantiated
    6883   00:C341  A7                  		and a
    6884   00:C342  C8                  		ret z				; no sprites, nothing to do
    6885   00:C343                      		ifdef DEBUG
    6886   00:C343                    ~ 		BORDER 12
    6887   00:C343                    ~ 		endif
    6888   00:C343  DD 21 B4 40         		ld ix,sprtab
    6889   00:C347  47                  		ld b,a
    6890   00:C348  21 80 45            		ld hl,spratr
    6891   00:C34B  22 76 40            		ld (sprptr),hl
    6892   00:C34E                      .loop:		
    6893   00:C34E  DD 7E 00            		ld a,(ix+0)			; get sprite type
    6894   00:C351  3C                  		inc a
    6895   00:C352  20 08               		jr nz,.ison			; is the sprite active?
    6896   00:C354  3E D1               		ld a,MSX_HIDE_SPRITE	; not active
    6897   00:C356  77                  		ld (hl),a			; Y
    6898   00:C357  2C                  		inc l
    6899   00:C358  2C                  		inc l
    6900   00:C359  2C                  		inc l
    6901   00:C35A  18 22               		jr .nxtspr		
    6902   00:C35C                      .ison:		
    6903   00:C35C  DD 7E 03            		ld a,(ix+3)			
    6904   00:C35F  3D                  		dec a				; corrects y MSX sprite coordinate		
    6905   00:C360  77                  		ld (hl),a			; Y
    6906   00:C361  2C                  		inc l		
    6907   00:C362                      		
    6908   00:C362  DD 7E 04            		ld a,(ix+4)				
    6909   00:C365  77                  		ld (hl),a			; X	
    6910   00:C366  2C                  		inc l
    6911   00:C367                      
    6912   00:C367  EB                  		ex de,hl
    6913   00:C368  DD 7E 01            		ld a,(ix+1)
    6914   00:C36B  CD 29 C6            		call gfrm
    6915   00:C36E  6E                  		ld l,(hl)
    6916   00:C36F  26 4D               		ld h,mapspr>>8				
    6917   00:C371  7E                  		ld a,(hl)			; gets real frame from mapspr table
    6918   00:C372  DD 86 02            		add a,(ix+2)
    6919   00:C375  87                  		add a,a
    6920   00:C376  87                  		add a,a
    6921   00:C377  EB                  		ex de,hl
    6922   00:C378  77                  		ld (hl),a			; image number * 4
    6923   00:C379  2C                  		inc l
    6924   00:C37A                      		
    6925   00:C37A  DD 7E 05            		ld a,(ix+5)
    6926   00:C37D  77                  		ld (hl),a
    6927   00:C37E                      .nxtspr:
    6928   00:C37E  2C                  		inc l		
    6929   00:C37F  11 11 00            		ld de,TABSIZ		
    6930   00:C382  DD 19               		add ix,de           ; next sprite.
    6931   00:C384  10 C8               		djnz .loop          ; repeat for remaining sprites.
    6932   00:C386  3E D0               		ld a,MSX_HIDE_SPRITES	; no more sprite from here
    6933   00:C388  77                  		ld (hl),a
    6934   00:C389                      
    6935   00:C389                      ; ----------------------------------
    6936   00:C389                      
    6937   00:C389                      sprflick:	
    6938   00:C389  21 80 45            		ld hl,spratr
    6939   00:C38C  3A E7 53            		ld a,(MSX_STATFL)
    6940   00:C38F  CB 77               		bit 6,a
    6941   00:C391  20 07               		jr nz,.flick
    6942   00:C393  3E 80               		ld a,colltab&$FF
    6943   00:C395  32 5A 40            		ld (offset),a
    6944   00:C398  18 72               		jr .no5th
    6945   00:C39A                      .flick:
    6946   00:C39A                      		; sort sprites into two separate lists (aligned with 5th & not aligned)
    6947   00:C39A  E6 1F               		and 31				; get 5th sprite plane number
    6948   00:C39C  5F                  		ld e,a
    6949   00:C39D  3A 4B 40            		ld a,(highslot)
    6950   00:C3A0  BB                  		cp e
    6951   00:C3A1  38 69               		jr c,.no5th			; 5th has been removed?, no flicker then...
    6952   00:C3A3                      		;
    6953   00:C3A3  08                  		ex af,af			; save number of sprites in screen
    6954   00:C3A4  7B                  		ld a,e
    6955   00:C3A5  11 00 45            		ld de,spratr2		; new sprite attribute table
    6956   00:C3A8  D5                  		push de
    6957   00:C3A9  54                  		ld d,h
    6958   00:C3AA  5D                  		ld e,l
    6959   00:C3AB  87                  		add a,a
    6960   00:C3AC  87                  		add a,a				; 5th sprite plane * 4
    6961   00:C3AD  83                  		add a,e				; DE now points to 5th sprite plane attributes
    6962   00:C3AE  5F                  		ld e,a
    6963   00:C3AF                      		;
    6964   00:C3AF  08                  		ex af,af			; restores number of sprites in screen
    6965   00:C3B0  47                  		ld b,a				; number of sprites to check
    6966   00:C3B1  1A                  		ld a,(de)			; 
    6967   00:C3B2  4F                  		ld c,a				; get C=Y-coord of 5th sprite
    6968   00:C3B3  11 80 4D            		ld de,colltab		; aligned with 5th list
    6969   00:C3B6                      .lp:
    6970   00:C3B6  7E                  		ld a,(hl)			; get Y coord of sprite from master sprite attribute table
    6971   00:C3B7  91                  		sub c				 
    6972   00:C3B8  30 02               		jr nc,.bottom		; compare both Y coords
    6973   00:C3BA  ED 44               		neg					; if 5th Y coord is greater, negate the difference
    6974   00:C3BC                      .bottom:		
    6975   00:C3BC  FE 10               		cp MSX_SPRVS		; compare the difference with sprite vertical size
    6976   00:C3BE  30 0C               		jr nc,.noovlp		; if diff > sprite vertical size, there's no vertical overlapping
    6977   00:C3C0  C5                  		push bc					
    6978   00:C3C1  ED A0               		ldi
    6979   00:C3C3  ED A0               		ldi
    6980   00:C3C5  ED A0               		ldi
    6981   00:C3C7  ED A0               		ldi					; store sprite attributes in colltab
    6982   00:C3C9  C1                  		pop bc
    6983   00:C3CA  18 10               		jr .nxt
    6984   00:C3CC                      .noovlp:
    6985   00:C3CC                      		EX_SP_DE			; swaps lists colltab<>spratr2
    6985   00:C3CC  EB                >   ex de,hl
    6985   00:C3CD  E3                >   ex (sp),hl
    6985   00:C3CE  EB                >   ex de,hl
    6986   00:C3CF  C5                  		push bc
    6987   00:C3D0  ED A0               		ldi
    6988   00:C3D2  ED A0               		ldi
    6989   00:C3D4  ED A0               		ldi
    6990   00:C3D6  ED A0               		ldi					; now store sprite attributes in spratr2
    6991   00:C3D8  C1                  		pop bc
    6992   00:C3D9                      		EX_SP_DE			; restores lists pointers
    6992   00:C3D9  EB                >   ex de,hl
    6992   00:C3DA  E3                >   ex (sp),hl
    6992   00:C3DB  EB                >   ex de,hl
    6993   00:C3DC                      .nxt:
    6994   00:C3DC  10 D8               		djnz .lp
    6995   00:C3DE                      		; rotate SAT segments (only 5th related sprites)
    6996   00:C3DE  4B                  		ld c,e
    6997   00:C3DF  3A 5A 40            		ld a,(offset)
    6998   00:C3E2  C6 10               		add a,16
    6999   00:C3E4  B9                  		cp c
    7000   00:C3E5  38 09               		jr c,.noreset 
    7001   00:C3E7  3E 80               		ld a,colltab&$FF
    7002   00:C3E9  32 5A 40            		ld (offset),a		; store offset to split SAT
    7003   00:C3EC  7B                  		ld a,e
    7004   00:C3ED  D1                  		pop de
    7005   00:C3EE  18 0E               		jr .fullsat			; SAT is not splitted, only one copy needed		
    7006   00:C3F0                      .noreset:		
    7007   00:C3F0  32 5A 40            		ld (offset),a		; store offset to split SAT
    7008   00:C3F3  62                  		ld h,d
    7009   00:C3F4  6F                  		ld l,a
    7010   00:C3F5  79                  		ld a,c
    7011   00:C3F6  95                  		sub l
    7012   00:C3F7  4F                  		ld c,a
    7013   00:C3F8  D1                  		pop de
    7014   00:C3F9  ED B0               		ldir				; copy first half 
    7015   00:C3FB  3A 5A 40            		ld a,(offset)
    7016   00:C3FE                      .fullsat:
    7017   00:C3FE  D6 80               		sub colltab&$FF
    7018   00:C400  4F                  		ld c,a
    7019   00:C401  21 80 4D            		ld hl,colltab
    7020   00:C404  ED B0               		ldir				; copy 2nd half
    7021   00:C406  3E D0               		ld a,MSX_HIDE_SPRITES	; no more sprite from here
    7022   00:C408  12                  		ld (de),a
    7023   00:C409  21 00 45            		ld hl,spratr2
    7024   00:C40C                      .no5th:
    7025   00:C40C  22 76 40            		ld (sprptr),hl
    7026   00:C40F                      
    7027   00:C40F                      		ifdef DEBUG
    7028   00:C40F                    ~ 		BORDER 14
    7029   00:C40F                    ~ 		endif
    7030   00:C40F                      
    7031   00:C40F  C9                  		ret
    7032   00:C410                      
    7033   00:C410                      
    7034   00:C410                      /*
    7035   00:C410                    ~  ; Could be reworked
    7036   00:C410                    ~ 		ld hl,spratr
    7037   00:C410                    ~ 		ld a,(MSX_STATFL)
    7038   00:C410                    ~ 		bit 6,a
    7039   00:C410                    ~ 		jp z,.NO5TH
    7040   00:C410                    ~ 		
    7041   00:C410                    ~ 		ld e,a
    7042   00:C410                    ~ 		ld a,(offset)
    7043   00:C410                    ~ 		or a
    7044   00:C410                    ~ 		jr z,.NOLDIR
    7045   00:C410                    ~ 		cp 255
    7046   00:C410                    ~ 		jr nz,.NOINIT
    7047   00:C410                    ~ 		ld a,e
    7048   00:C410                    ~ 		and $3C
    7049   00:C410                    ~ 		add a,a
    7050   00:C410                    ~ 		add a,a		
    7051   00:C410                    ~ .NOINIT:	
    7052   00:C410                    ~ 		ld b,0
    7053   00:C410                    ~ 		ld c,a
    7054   00:C410                    ~ 		ld de,spratr2
    7055   00:C410                    ~ 		ldir
    7056   00:C410                    ~ .NOLDIR:	
    7057   00:C410                    ~ 		add a,16
    7058   00:C410                    ~ 		and $3F
    7059   00:C410                    ~ 		jp .NORESET
    7060   00:C410                    ~ 		
    7061   00:C410                    ~ .NO5TH:	
    7062   00:C410                    ~ 		ld a,255
    7063   00:C410                    ~ .NORESET:	
    7064   00:C410                    ~ 		ld (offset),a
    7065   00:C410                    ~ 		ld (sprptr),hl
    7066   00:C410                    ~ */
    7067   00:C410                      
    7068   00:C410                      dumpspr:
    7069   00:C410  3A 4B 40            		ld a,(highslot)
    7070   00:C413  A7                  		and a
    7071   00:C414  C8                  		ret z				; no sprites, nothing to do
    7072   00:C415                      		ifdef DEBUG
    7073   00:C415                    ~ 		BORDER 10
    7074   00:C415                    ~ 		endif		
    7075   00:C415  87                  		add a,a
    7076   00:C416  87                  		add a,a		
    7077   00:C417  C6 08               		add a,8
    7078   00:C419  E6 F8               		and $F8				; only send to VRAM multiples of 8 
    7079   00:C41B  47                  		ld b,a
    7080   00:C41C  2A 76 40            		ld hl,(sprptr)
    7081   00:C41F  11 00 1B            		ld de,MSX_SPRATR
    7082   00:C422                      		ifdef FASTVRAMDUMP
    7083   00:C422                    ~ 		call ram2vram
    7084   00:C422                    ~ 		else
    7085   00:C422  CD 2D C3            		call ram2vram_slow
    7086   00:C425                      		endif
    7087   00:C425                      		ifdef DEBUG
    7088   00:C425                    ~ 		BORDER 14
    7089   00:C425                    ~ 		endif
    7090   00:C425  C9                  		ret
    7091   00:C426                      		
    7092   00:C426                      ; Drop into screen address routine. (MSX:OK)
    7093   00:C426                      ; This routine returns in HL a screen address for (dispx, dispy). Must not modify DE
    7094   00:C426                      
    7095   00:C426                      scadd:
    7096   00:C426  3A 54 40            		ld a,(dispx)	; 14
    7097   00:C429  6F                  		ld l,a			; 5
    7098   00:C42A  E6 F8               		and $F8			; 7
    7099   00:C42C  0F                  		rrca			; 5
    7100   00:C42D  0F                  		rrca			; 5
    7101   00:C42E  0F                  		rrca			; 5
    7102   00:C42F  67                  		ld h,a			; 5
    7103   00:C430  7D                  		ld a,l			; 5
    7104   00:C431  E6 07               		and $07			; 7
    7105   00:C433  6F                  		ld l,a			; 5 HL= ((y/8)*256+y%8)
    7106   00:C434  3A 55 40            		ld a,(dispy)	; 14
    7107   00:C437  E6 F8               		and $F8			; 7 A = (x/8)*8
    7108   00:C439                      		ADD_HL_A		; 25
    7108   00:C439  85                >   add a,l
    7108   00:C43A  6F                >   ld l,a
    7108   00:C43B  8C                >   adc a,h
    7108   00:C43C  95                >   sub l
    7108   00:C43D  67                >   ld h,a
    7109   00:C43E  C9                  		ret	
    7110   00:C43F                      		
    7111   00:C43F                      		
    7112   00:C43F                      ; Animates a sprite.
    7113   00:C43F                      
    7114   00:C43F                      animsp:
    7115   00:C43F  21 4D 40            		ld hl,frmno         ; game frame.
    7116   00:C442  A6                  		and (hl)            ; is it time to change the frame?
    7117   00:C443  C0                  		ret nz              ; not this frame.
    7118   00:C444  DD 7E 01            		ld a,(ix+1)         ; sprite image.
    7119   00:C447  CD 29 C6            		call gfrm           ; get frame data.
    7120   00:C44A  23                  		inc hl              ; point to frames.
    7121   00:C44B  DD 7E 02            		ld a,(ix+2)         ; sprite frame.
    7122   00:C44E  3C                  		inc a               ; next one along.
    7123   00:C44F  BE                  		cp (hl)             ; reached the last frame?
    7124   00:C450  38 01               		jr c,anims0         ; no, not yet.
    7125   00:C452  AF                  		xor a               ; start at first frame.
    7126   00:C453                      anims0:
    7127   00:C453  DD 77 02            		ld (ix+2),a         ; new frame.
    7128   00:C456  C9                  		ret
    7129   00:C457                      animbk:
    7130   00:C457  21 4D 40            		ld hl,frmno         ; game frame.
    7131   00:C45A  A6                  		and (hl)            ; is it time to change the frame?
    7132   00:C45B  C0                  		ret nz              ; not this frame.
    7133   00:C45C  DD 7E 01            		ld a,(ix+1)         ; sprite image.
    7134   00:C45F  CD 29 C6            		call gfrm           ; get frame data.
    7135   00:C462  23                  		inc hl              ; point to frames.
    7136   00:C463  DD 7E 02            		ld a,(ix+2)         ; sprite frame.
    7137   00:C466  A7                  		and a               ; first one?
    7138   00:C467  20 01               		jr nz,.rtanb0        ; yes, start at end.
    7139   00:C469  7E                  		ld a,(hl)           ; last sprite.
    7140   00:C46A                      .rtanb0:
    7141   00:C46A  3D                  		dec a               ; next one along.
    7142   00:C46B  18 E6               		jr anims0           ; set new frame.
    7143   00:C46D                      
    7144   00:C46D                      ; Check for collision with other sprite, strict enforcement.
    7145   00:C46D                      ; Input:
    7146   00:C46D                      ;	C = NUmber of sprite to check for collision
    7147   00:C46D                      sktyp:  
    7148   00:C46D  3A 4B 40            		ld a,(highslot)
    7149   00:C470  A7                  		and a
    7150   00:C471  C8                  		ret z				; no sprites, nothing to do
    7151   00:C472                      		ifdef DEBUG
    7152   00:C472                    ~ 		BORDER 4
    7153   00:C472                    ~ 		endif
    7154   00:C472                      	
    7155   00:C472                      	if HCFLAG=1
    7156   00:C472                    ~ 		ld a,(MSX_STATFL)
    7157   00:C472                    ~ 		and 00100000b		; check hardware sprites collision
    7158   00:C472                    ~ 		jr z,.nocoll		; no collisions, skip routine
    7159   00:C472                    ~ 	endif
    7160   00:C472                      	
    7161   00:C472                      		; There's a collision, find it
    7162   00:C472                      		
    7163   00:C472  21 B4 40            		ld hl,sprtab        ; sprite table.
    7164   00:C475                      .loop: 
    7165   00:C475  08                  		ex af,af            ; store loop counter.
    7166   00:C476  22 49 40            		ld (skptr),hl       ; store pointer to sprite.
    7167   00:C479  7E                  		ld a,(hl)           ; get sprite type.
    7168   00:C47A  B9                  		cp c                ; is it the type we seek?
    7169   00:C47B  28 14               		jr z,coltyp         ; yes, we can use this one.
    7170   00:C47D                      .sktyp1: 
    7171   00:C47D  2A 49 40            		ld hl,(skptr)       ; retrieve sprite pointer.
    7172   00:C480                      		
    7173   00:C480  11 11 00            		ld de,TABSIZ        ; size of each entry.
    7174   00:C483  19                  		add hl,de           ; point to next sprite in table.
    7175   00:C484                      		
    7176   00:C484  08                  		ex af,af           ; restore loop counter.
    7177   00:C485  3D                  		dec a               ; one less iteration.
    7178   00:C486  C2 75 C4            		jp nz,.loop        ; keep going until we find a slot.
    7179   00:C489                      		
    7180   00:C489  21 00 00            		ld hl,0             ; default to ROM address - no sprite.
    7181   00:C48C  22 49 40            		ld (skptr),hl       ; store pointer to sprite.
    7182   00:C48F  B4                  		or h                ; don't return with zero flag set.
    7183   00:C490                      .nocoll:
    7184   00:C490                      		ifdef DEBUG
    7185   00:C490                    ~ 		BORDER 6
    7186   00:C490                    ~ 		endif
    7187   00:C490  C9                  		ret                 ; didn't find one.
    7188   00:C491                      
    7189   00:C491                      coltyp:
    7190   00:C491  DD 7E 00            		ld a,(ix+0)         ; current sprite type.
    7191   00:C494  B9                  		cp c                ; seeking sprite of same type?
    7192   00:C495  28 27               		jr z,.colty1        ; yes, need to check we're not detecting ourselves.
    7193   00:C497                      .colty0:
    7194   00:C497  11 03 00            		ld de,X             ; distance to x position in table.
    7195   00:C49A  19                  		add hl,de           ; point to coords.
    7196   00:C49B                      		
    7197   00:C49B  5E                  		ld e,(hl)           ; fetch x coordinate.
    7198   00:C49C  23                  		inc hl              ; now point to y.
    7199   00:C49D  56                  		ld d,(hl)           ; that's y coordinate.
    7200   00:C49E                      
    7201   00:C49E                      ; Drop into collision detection.
    7202   00:C49E                      ;colc16:
    7203   00:C49E  DD 7E 03            		ld a,(ix+X)         ; x coord.
    7204   00:C4A1  93                  		sub e               ; subtract x.
    7205   00:C4A2  30 02               		jr nc,.colc1a        ; result is positive.
    7206   00:C4A4  ED 44               		neg                 ; make negative positive.
    7207   00:C4A6                      .colc1a:
    7208   00:C4A6  FE 10               		cp 16               ; within x range?
    7209   00:C4A8  30 D3               		jr nc,sktyp.sktyp1        ; no - they've missed.
    7210   00:C4AA  4F                  		ld c,a              ; store difference.
    7211   00:C4AB  DD 7E 04            		ld a,(ix+Y)         ; y coord.
    7212   00:C4AE  92                  		sub d               ; subtract y.
    7213   00:C4AF  30 02               		jr nc,.colc1b        ; result is positive.
    7214   00:C4B1  ED 44               		neg                 ; make negative positive.
    7215   00:C4B3                      .colc1b:
    7216   00:C4B3  FE 10               		cp 16               ; within y range?
    7217   00:C4B5  30 C6               		jr nc,sktyp.sktyp1        ; no - they've missed.
    7218   00:C4B7  81                  		add a,c             ; add x difference.
    7219   00:C4B8  FE 1A               		cp 26               ; only 5 corner pixels touching?
    7220   00:C4BA  D8                  		ret c               ; carry set if there's a collision.
    7221   00:C4BB  C3 7D C4            		jp sktyp.sktyp1           ; try next sprite in table.
    7222   00:C4BE                      .colty1:
    7223   00:C4BE  DD E5               		push ix             ; base sprite address onto stack.
    7224   00:C4C0  D1                  		pop de              ; pop it into de.
    7225   00:C4C1  EB                  		ex de,hl            ; flip hl into de.
    7226   00:C4C2  ED 52               		sbc hl,de           ; compare the two.
    7227   00:C4C4  EB                  		ex de,hl            ; restore hl.
    7228   00:C4C5  28 B6               		jr z,sktyp.sktyp1   ; addresses are identical.
    7229   00:C4C7  C3 97 C4            		jp .colty0
    7230   00:C4CA                      
    7231   00:C4CA                      ; Display number.
    7232   00:C4CA                      ;
    7233   00:C4CA                      disply:
    7234   00:C4CA  01 12 40            		ld bc,displ0        ; display workspace.
    7235   00:C4CD  CD 26 BB            		call num2ch         ; convert accumulator to string.
    7236   00:C4D0                      displ1:
    7237   00:C4D0  0B                  		dec bc              ; back one character.
    7238   00:C4D1  0A                  		ld a,(bc)           ; fetch digit.
    7239   00:C4D2  F6 80               		or 128              ; insert end marker.
    7240   00:C4D4  02                  		ld (bc),a           ; new value.
    7241   00:C4D5  21 12 40            		ld hl,displ0        ; display space.
    7242   00:C4D8  C3 0C C1            		jp dmsg3            ; display the string.
    7243   00:C4DB                      
    7244   00:C4DB                      ; Initialise screen.
    7245   00:C4DB                      ;
    7246   00:C4DB                      initsc:
    7247   00:C4DB  3A 4C 40            		ld a,(roomtb)       ; whereabouts in the map are we?
    7248   00:C4DE  CD E8 C4            		call tstsc          ; find displacement.
    7249   00:C4E1  FE FF               		cp 255              ; is it valid?
    7250   00:C4E3  C8                  		ret z               ; no, it's rubbish.
    7251   00:C4E4  32 41 40            		ld (scno),a         ; store new room number.
    7252   00:C4E7  C9                  		ret
    7253   00:C4E8                      
    7254   00:C4E8                      ; Test screen.
    7255   00:C4E8                      ;
    7256   00:C4E8                      tstsc:
    7257   00:C4E8  21 73 80                   ld hl,mapdat-MAPWID ; start of map data, subtract width for negative.
    7258   00:C4EB  47                         ld b,a              ; store room in b for now.
    7259   00:C4EC  C6 0D                      add a,MAPWID        ; add width in case we're negative.
    7260   00:C4EE  5F                         ld e,a              ; screen into e.
    7261   00:C4EF  16 00                      ld d,0              ; zeroise d.
    7262   00:C4F1  19                         add hl,de           ; add displacement to map data.
    7263   00:C4F2  7E                         ld a,(hl)           ; find room number there.
    7264   00:C4F3  C9                         ret
    7265   00:C4F4                      
    7266   00:C4F4                      ; Screen left.
    7267   00:C4F4                      ;
    7268   00:C4F4                      scrl:
    7269   00:C4F4  3A 4C 40            		ld a,(roomtb)       ; present room table pointer.
    7270   00:C4F7  3D                  		dec a               ; room left.
    7271   00:C4F8                      scrl0:
    7272   00:C4F8  CD E8 C4            		call tstsc          ; test screen.
    7273   00:C4FB  3C                  		inc a               ; is there a screen this way?
    7274   00:C4FC  C8                  		ret z               ; no, return to loop.
    7275   00:C4FD  78                  		ld a,b              ; restore room displacement.
    7276   00:C4FE  32 4C 40            		ld (roomtb),a       ; new room table position.
    7277   00:C501                      scrl1:
    7278   00:C501  CD DB C4            		call initsc         ; set new screen.
    7279   00:C504  21 51 40            		ld hl,restfl        ; restart screen flag.
    7280   00:C507  36 02               		ld (hl),2           ; set it.
    7281   00:C509  C9                  		ret
    7282   00:C50A                      scrr:
    7283   00:C50A  3A 4C 40            		ld a,(roomtb)       ; room table pointer.
    7284   00:C50D  3C                  		inc a               ; room right.
    7285   00:C50E  18 E8               		jr scrl0
    7286   00:C510                      scru:
    7287   00:C510  3A 4C 40            		ld a,(roomtb)       ; room table pointer.
    7288   00:C513  D6 0D               		sub MAPWID          ; room up.
    7289   00:C515  18 E1               		jr scrl0
    7290   00:C517                      scrd:
    7291   00:C517  3A 4C 40            		ld a,(roomtb)       ; room table pointer.
    7292   00:C51A  C6 0D               		add a,MAPWID        ; room down.
    7293   00:C51C  18 DA               		jr scrl0
    7294   00:C51E                      		
    7295   00:C51E                      ; Jump to new screen.
    7296   00:C51E                      ;
    7297   00:C51E                      nwscr:
    7298   00:C51E  21 80 80            		ld hl,mapdat        ; start of map data.
    7299   00:C521  01 00 50            		ld bc,256*80        ; zero room count, 80 to search.
    7300   00:C524                      nwscr0:
    7301   00:C524  BE                  		cp (hl)             ; have we found a match for screen?
    7302   00:C525  28 05               		jr z,nwscr1         ; yes, set new point in map.
    7303   00:C527  23                  		inc hl              ; next room.
    7304   00:C528  0C                  		inc c               ; count rooms.
    7305   00:C529  10 F9               		djnz nwscr0         ; keep looking.
    7306   00:C52B  C9                  		ret
    7307   00:C52C                      nwscr1:
    7308   00:C52C  79                  		ld a,c              ; room displacement.
    7309   00:C52D  32 4C 40            		ld (roomtb),a       ; set the map position.
    7310   00:C530  18 CF               		jr scrl1            ; draw new room.
    7311   00:C532                      
    7312   00:C532                      
    7313   00:C532                      ; Gravity processing.
    7314   00:C532                      ;
    7315   00:C532                      grav:
    7316   00:C532  3A 4D 40             		ld a,(frmno)
    7317   00:C535  0F                  		rrca
    7318   00:C536  D8                  		ret c				; only 1/2 of frames		
    7319   00:C537  DD 7E 0D            		ld a,(ix+13)        ; in-air flag.
    7320   00:C53A  A7                  		and a               ; are we in the air?
    7321   00:C53B  C8                  		ret z               ; no we are not.
    7322   00:C53C  3C                  		inc a               ; increment it.
    7323   00:C53D  CA 87 C5            		jp z,ogrv           ; set to 255, use old gravity.
    7324   00:C540  DD 77 0D            		ld (ix+13),a        ; write new setting.
    7325   00:C543  1F                  		rra                 ; every other frame.
    7326   00:C544  30 0A               		jr nc,grav0         ; don't apply gravity this time.
    7327   00:C546  DD 7E 0E            		ld a,(ix+14)        ; pixels to move.
    7328   00:C549  FE 10               		cp 16               ; reached maximum?
    7329   00:C54B  28 03               		jr z,grav0          ; yes, continue.
    7330   00:C54D  DD 34 0E            		inc (ix+14)         ; slow down ascent/speed up fall.
    7331   00:C550                      grav0:
    7332   00:C550  DD 7E 0E            		ld a,(ix+14)        ; get distance to move.
    7333   00:C553  CB 2F               		sra a               ; divide by 2.
    7334   00:C555  A7                  		and a               ; any movement required?
    7335   00:C556  C8                  		ret z               ; no, not this time.
    7336   00:C557  FE 80               		cp 128              ; is it up or down?
    7337   00:C559  30 0C               		jr nc,gravu         ; it's up.
    7338   00:C55B                      gravd:
    7339   00:C55B  47                  		ld b,a              ; set pixels to move.
    7340   00:C55C                      gravd0:
    7341   00:C55C  CD A6 BF            		call cangd          ; can we go down?
    7342   00:C55F  20 15               		jr nz,gravst        ; can't move down, so stop.
    7343   00:C561  DD 34 03            		inc (ix+3)          ; adjust new y coord.
    7344   00:C564  10 F6               		djnz gravd0
    7345   00:C566  C9                  		ret
    7346   00:C567                      gravu:
    7347   00:C567  ED 44               		neg                 ; flip the sign so it's positive.
    7348   00:C569  47                  		ld b,a              ; set pixels to move.
    7349   00:C56A                      gravu0:
    7350   00:C56A  CD 84 BF            		call cangu          ; can we go up?
    7351   00:C56D  C2 0E C6            		jp nz,ifalls        ; can't move up, go down next.
    7352   00:C570  DD 35 03            		dec (ix+3)          ; adjust new y coord.
    7353   00:C573  10 F5               		djnz gravu0
    7354   00:C575  C9                  		ret
    7355   00:C576                      gravst:
    7356   00:C576  DD 7E 0E            		ld a,(ix+14)        ; jump pointer high.
    7357   00:C579  DD 36 0D 00         		ld (ix+13),0        ; reset falling flag.
    7358   00:C57D  DD 36 0E 00         		ld (ix+14),0        ; store new speed.
    7359   00:C581  FE 08               		cp 8                ; was speed the maximum?
    7360   00:C583                      evftf:
    7361   00:C583  CA 3F 91            		jp z,evnt15         ; yes, fallen too far.
    7362   00:C586  C9                  		ret
    7363   00:C587                      
    7364   00:C587                      ; Old gravity processing for compatibility with 4.6 and 4.7.
    7365   00:C587                      ;
    7366   00:C587                      ogrv:   
    7367   00:C587  DD 5E 0E            		ld e,(ix+14)        ; get index to table.
    7368   00:C58A  16 00               		ld d,0              ; no high byte.
    7369   00:C58C  21 D8 B4            		ld hl,jtab          ; jump table.
    7370   00:C58F  19                  		add hl,de           ; hl points to jump value.
    7371   00:C590  7E                  		ld a,(hl)           ; pixels to move.
    7372   00:C591  FE 63               		cp 99               ; reached the end?
    7373   00:C593  20 04               		jr nz,ogrv0         ; no, continue.
    7374   00:C595  2B                  		dec hl              ; go back to previous value.
    7375   00:C596  7E                  		ld a,(hl)           ; fetch that from table.
    7376   00:C597  18 03               		jr ogrv1
    7377   00:C599  DD 34 0E            ogrv0  inc (ix+14)         ; point to next table entry.
    7378   00:C59C  A7                  ogrv1  and a               ; any movement required?
    7379   00:C59D  C8                         ret z               ; no, not this time.
    7380   00:C59E  FE 80                      cp 128              ; is it up or down?
    7381   00:C5A0  30 0C                      jr nc,ogrvu         ; bigger than 128, it's up.	   
    7382   00:C5A2  47                  ogrvd  ld b,a              ; less than 128, go down. Set pixels to move.
    7383   00:C5A3  CD A6 BF            ogrvd0 call cangd          ; can we go down?
    7384   00:C5A6  20 14                      jr nz,ogrvst        ; can't move down, so stop.
    7385   00:C5A8  DD 34 03                   inc (ix+3)          ; adjust new y coord.
    7386   00:C5AB  10 F6                      djnz ogrvd0
    7387   00:C5AD  C9                         ret	   
    7388   00:C5AE  ED 44               ogrvu  neg                 ; flip the sign so it's positive.
    7389   00:C5B0  47                         ld b,a              ; set pixels to move.
    7390   00:C5B1  CD 84 BF            ogrvu0 call cangu          ; can we go up?
    7391   00:C5B4  20 1D                      jr nz,ogrv2         ; can't move up, go down next.
    7392   00:C5B6  DD 35 03                   dec (ix+3)          ; adjust new y coord.
    7393   00:C5B9  10 F6                      djnz ogrvu0
    7394   00:C5BB  C9                         ret	   
    7395   00:C5BC  DD 5E 0E            ogrvst ld e,(ix+14)        ; get index to table.
    7396   00:C5BF  16 00                      ld d,0              ; no high byte.
    7397   00:C5C1  21 D8 B4                   ld hl,jtab          ; jump table.
    7398   00:C5C4  19                         add hl,de           ; hl points to jump value.
    7399   00:C5C5  7E                         ld a,(hl)           ; fetch byte from table.
    7400   00:C5C6  FE 63                      cp 99               ; is it the end marker?
    7401   00:C5C8  DD 36 0D 00                ld (ix+13),0        ; reset jump flag.
    7402   00:C5CC  DD 36 0E 00                ld (ix+14),0        ; reset pointer.
    7403   00:C5D0  C3 83 C5                   jp evftf	   
    7404   00:C5D3  21 D8 B4            ogrv2  ld hl,jtab          ; jump table.
    7405   00:C5D6  06 00                      ld b,0              ; offset into table.
    7406   00:C5D8  7E                  ogrv4  ld a,(hl)           ; fetch table byte.
    7407   00:C5D9  FE 64                      cp 100              ; hit end or downward move?
    7408   00:C5DB  38 04                      jr c,ogrv3          ; yes.
    7409   00:C5DD  23                         inc hl              ; next byte of table.
    7410   00:C5DE  04                         inc b               ; next offset.
    7411   00:C5DF  18 F7                      jr ogrv4            ; keep going until we find crest/end of table.
    7412   00:C5E1  DD 70 0E            ogrv3  ld (ix+14),b        ; set next table offset.
    7413   00:C5E4  C9                         ret
    7414   00:C5E5                      
    7415   00:C5E5                      ; Initiate fall check.
    7416   00:C5E5                      ;
    7417   00:C5E5                      ifall:
    7418   00:C5E5  DD 7E 0D            		ld a,(ix+13)        ; jump pointer flag.
    7419   00:C5E8  A7                  		and a               ; are we in the air?
    7420   00:C5E9  C0                  		ret nz              ; if set, we're already in the air.
    7421   00:C5EA  DD 66 04            		ld h,(ix+4)         ; y coordinate.
    7422   00:C5ED  3E 10               		ld a,16             ; look down 16 pixels.
    7423   00:C5EF  DD 86 03            		add a,(ix+3)        ; add x coordinate.
    7424   00:C5F2  6F                  		ld l,a              ; coords in hl.
    7425   00:C5F3  22 54 40            		ld (dispx),hl       ; set up test coordinates.
    7426   00:C5F6  CD 60 C0            		call tstbl          ; get map address.
    7427   00:C5F9  CD C5 BF            		call plchk          ; block, platform check.
    7428   00:C5FC  C0                  		ret nz              ; it's solid, don't fall.
    7429   00:C5FD  23                  		inc hl              ; look right one cell.
    7430   00:C5FE  CD C5 BF            		call plchk          ; block, platform check.
    7431   00:C601  C0                  		ret nz              ; it's solid, don't fall.
    7432   00:C602  3A 55 40            		ld a,(dispy)        ; x coordinate.
    7433   00:C605  E6 07               		and 7               ; position straddling block cells.
    7434   00:C607  28 05               		jr z,ifalls         ; no more checks needed.
    7435   00:C609  23                  		inc hl              ; look to third cell.
    7436   00:C60A  CD C5 BF            		call plchk          ; block, platform check.
    7437   00:C60D  C0                  		ret nz              ; it's solid, don't fall.
    7438   00:C60E                      ifalls:
    7439   00:C60E  DD 34 0D            		inc (ix+13)         ; set in air flag.
    7440   00:C611  DD 36 0E 00         		ld (ix+14),0        ; initial speed = 0.
    7441   00:C615  C9                  		ret
    7442   00:C616                      
    7443   00:C616                      tfall:
    7444   00:C616  DD 7E 0D            		ld a,(ix+13)        ; jump pointer flag.
    7445   00:C619  A7                  		and a               ; are we in the air?
    7446   00:C61A  C0                  		ret nz              ; if set, we're already in the air.
    7447   00:C61B  CD E5 C5            		call ifall          ; do fall test.
    7448   00:C61E  DD 7E 0D            		ld a,(ix+13)        ; get falling flag.
    7449   00:C621  A7                  		and a               ; is it set?
    7450   00:C622  C8                  		ret z               ; no.
    7451   00:C623  DD 36 0D FF         		ld (ix+13),255      ; we're using the table.
    7452   00:C627  18 AA               		jr ogrv2            ; find position in table.
    7453   00:C629                      
    7454   00:C629                      
    7455   00:C629                      ; Get frame data for a particular sprite.
    7456   00:C629                      ;
    7457   00:C629                      gfrm:
    7458   00:C629  07                  		rlca                ; multiple of 2.
    7459   00:C62A  2A 58 B5            		ld hl,(frmptr)      ; table of sprite frames used by game.
    7460   00:C62D                      		ADD_HL_A
    7460   00:C62D  85                >   add a,l
    7460   00:C62E  6F                >   ld l,a
    7460   00:C62F  8C                >   adc a,h
    7460   00:C630  95                >   sub l
    7460   00:C631  67                >   ld h,a
    7461   00:C632  C9                  		ret
    7462   00:C633                      
    7463   00:C633                      ; Find sprite list for current room.
    7464   00:C633                      ;
    7465   00:C633                      sprlst:
    7466   00:C633  3A 41 40            		ld a,(scno)         ; screen number.
    7467   00:C636  2A 60 B5            		ld hl,(nmeptr)      ; pointer to enemies.
    7468   00:C639  47                  		ld b,a              ; loop counter in b register.
    7469   00:C63A  A7                  		and a               ; is it the first screen?
    7470   00:C63B  C8                  		ret z               ; yes, don't need to search data.
    7471   00:C63C  11 05 00            		ld de,NMESIZ        ; bytes to skip.
    7472   00:C63F                      .loop:
    7473   00:C63F  7E                  		ld a,(hl)           ; fetch type of sprite.
    7474   00:C640  3C                  		inc a               ; is it an end marker?
    7475   00:C641  28 03               		jr z,.nxtscr        ; yes, end of this room.
    7476   00:C643  19                  		add hl,de           ; point to next sprite in list.
    7477   00:C644  18 F9               		jr .loop            ; continue until end of room.
    7478   00:C646                      .nxtscr:
    7479   00:C646  23                  		inc hl              ; point to start of next screen.
    7480   00:C647  10 F6               		djnz .loop          ; continue until room found.
    7481   00:C649  C9                  		ret
    7482   00:C64A                      
    7483   00:C64A                      ; Clear all but a single player sprite.
    7484   00:C64A                      ;
    7485   00:C64A                      nspr:
    7486   00:C64A  06 20               		ld b,NUMSPR         ; sprite slots in table.
    7487   00:C64C  DD 21 B4 40         		ld ix,sprtab        ; sprite table.
    7488   00:C650  11 11 00            		ld de,TABSIZ        ; distance to next odd/even entry.
    7489   00:C653                      .loop:
    7490   00:C653  DD 7E 00            		ld a,(ix+0)         ; fetch sprite type.
    7491   00:C656  A7                  		and a               ; is it a player?
    7492   00:C657  28 04               		jr z,.loop1         ; yes, keep this one.
    7493   00:C659  DD 36 00 FF         		ld (ix+0),255       ; remove next type.
    7494   00:C65D                      .loop1:
    7495   00:C65D  DD 19               		add ix,de           ; next sprite.
    7496   00:C65F  10 F2               		djnz .loop          ; one less space in the table.
    7497   00:C661  C9                  		ret
    7498   00:C662                      		
    7499   00:C662                      ; Two initialisation routines.
    7500   00:C662                      
    7501   00:C662                      ; HL is already pointing to start of sprites for this screen (nmedat / SPRITEPOSITIONS)
    7502   00:C662                      ; Initialise sprites - copy everything from list to table.
    7503   00:C662                      ;
    7504   00:C662                      ispr:	
    7505   00:C662  AF                  		xor a
    7506   00:C663  32 44 40            		ld (nsprite),a		; reset first sprite frame number in VRAM
    7507   00:C666  06 20               		ld b,NUMSPR         ; sprite slots in table.
    7508   00:C668  DD 21 B4 40         		ld ix,sprtab        ; sprite table.
    7509   00:C66C                      .loop2:
    7510   00:C66C  7E                  		ld a,(hl)
    7511   00:C66D  3C                  		inc a
    7512   00:C66E  28 14               		jr z,.exit
    7513   00:C670                      .loop1:  
    7514   00:C670  DD 7E 00            		ld a,(ix+0)         ; next type.
    7515   00:C673  3C                  		inc a
    7516   00:C674  28 09               		jr z,.copyspr       ; no, process this one.
    7517   00:C676  11 11 00            		ld de,TABSIZ        ; distance to next entry.
    7518   00:C679  DD 19               		add ix,de           ; next sprite.
    7519   00:C67B  10 F3               		djnz .loop1         ; repeat for remaining sprites.
    7520   00:C67D  18 05               		jr .exit
    7521   00:C67F                      .copyspr:
    7522   00:C67F  CD C1 C6            		call cpsp           ; initialise a sprite.
    7523   00:C682  10 E8               		djnz .loop2         ; one less space in the table.
    7524   00:C684                      .exit:
    7525   00:C684  C3 74 BD            		jp hslot
    7526   00:C687                      
    7527   00:C687                      ; HL is already pointing to start of sprites for this screen (nmedat)		
    7528   00:C687                      ; Initialise sprites - but not player, we're keeping the old one.
    7529   00:C687                      ;
    7530   00:C687                      kspr:	
    7531   00:C687  AF                  		xor a
    7532   00:C688  32 44 40            		ld (nsprite),a		; reset first sprite frame number in VRAM		
    7533   00:C68B  EB                  		ex de,hl
    7534   00:C68C  CD 06 C3            		call dissprs		; hide all sprites
    7535   00:C68F  EB                  		ex de,hl		
    7536   00:C690  06 20               		ld b,NUMSPR         ; sprite slots in table.
    7537   00:C692  DD 21 B4 40         		ld ix,sprtab        ; sprite table.
    7538   00:C696                      .loop2:  
    7539   00:C696  7E                  		ld a,(hl)           ; fetch byte.
    7540   00:C697  FE FF               		cp 255              ; is it an end marker?
    7541   00:C699  28 23               		jr z,.exit          ; yes, no more to do.
    7542   00:C69B  A7                  		and a               ; is it a player sprite?
    7543   00:C69C  20 0C               		jr nz,.loop1        ; no, add to table as normal.		
    7544   00:C69E  23                  		inc hl
    7545   00:C69F  7E                  		ld a,(hl)			; sprite image number from SPRITEPOSITIONS
    7546   00:C6A0  CD FF C6            		call mapsprite		; no player set but sprite pattern mapped to VRAM
    7547   00:C6A3  2B                  		dec hl		
    7548   00:C6A4  11 05 00            		ld de,NMESIZ        ; distance to next item in list.
    7549   00:C6A7  19                  		add hl,de           ; point to next one.
    7550   00:C6A8  18 EC               		jr .loop2
    7551   00:C6AA                      .loop1:
    7552   00:C6AA  DD 7E 00            		ld a,(ix+0)         ; next type.
    7553   00:C6AD  3C                  		inc a               ; is it enabled yet?
    7554   00:C6AE  28 09               		jr z,.copyspr       ; no, process this one.
    7555   00:C6B0  11 11 00            		ld de,TABSIZ        ; distance to next odd/even entry.
    7556   00:C6B3  DD 19               		add ix,de           ; next sprite.
    7557   00:C6B5  10 F3               		djnz .loop1         ; repeat for remaining sprites.
    7558   00:C6B7  18 05               		jr .exit            ; no more room in table.
    7559   00:C6B9                      .copyspr:
    7560   00:C6B9  CD C1 C6            		call cpsp           ; copy sprite to table.
    7561   00:C6BC  10 D8               		djnz .loop2         ; one less space in the table.
    7562   00:C6BE                      .exit:
    7563   00:C6BE  C3 74 BD            		jp hslot
    7564   00:C6C1                      
    7565   00:C6C1                      ; Copy sprite from list to table.
    7566   00:C6C1                      
    7567   00:C6C1                      cpsp:
    7568   00:C6C1  7E                  		ld a,(hl)           ; fetch byte from table.
    7569   00:C6C2  DD 77 00            		ld (ix+0),a         ; set up type.
    7570   00:C6C5  23                  		inc hl              ; move to next byte.
    7571   00:C6C6  7E                  		ld a,(hl)           ; fetch byte from table.
    7572   00:C6C7  DD 77 01            		ld (ix+1),a         ; set up sprite number.		
    7573   00:C6CA  23                  		inc hl              ; move to next byte.
    7574   00:C6CB  CD FF C6            		call mapsprite		; remaps RAM sprite number in A to a new VRAM sprite
    7575   00:C6CE  7E                  		ld a,(hl)           ; fetch byte from table (color).
    7576   00:C6CF  DD 77 05            		ld (ix+5),a         ; set up color.
    7577   00:C6D2  23                  		inc hl              ; move to next byte.
    7578   00:C6D3  7E                  		ld a,(hl)           ; fetch byte from table.
    7579   00:C6D4  DD 77 03            		ld (ix+3),a         ; set up coordinate.
    7580   00:C6D7  23                  		inc hl              ; move to next byte.
    7581   00:C6D8  7E                  		ld a,(hl)           ; fetch byte from table.
    7582   00:C6D9  DD 77 04            		ld (ix+4),a         ; set up coordinate.
    7583   00:C6DC  23                  		inc hl		
    7584   00:C6DD  AF                  		xor a               ; zeroes in accumulator.
    7585   00:C6DE  DD 77 02            		ld (ix+2),a         ; reset frame number.
    7586   00:C6E1  DD 77 0A            		ld (ix+10),a        ; reset direction.
    7587   00:C6E4  DD 77 0D            		ld (ix+13),a        ; reset jump pointer low.
    7588   00:C6E7  DD 77 0E            		ld (ix+14),a        ; reset jump pointer high.
    7589   00:C6EA  DD 36 10 FF         		ld (ix+16),255      ; reset data pointer to auto-restore.
    7590   00:C6EE  DD E5               		push ix             ; store ix pair.
    7591   00:C6F0  E5                  		push hl             ; store hl pair.
    7592   00:C6F1  C5                  		push bc
    7593   00:C6F2  CD 86 8D            		call evnt09         ; perform event.
    7594   00:C6F5  C1                  		pop bc
    7595   00:C6F6  E1                  		pop hl              ; restore hl.
    7596   00:C6F7  DD E1               		pop ix              ; restore ix.
    7597   00:C6F9  11 11 00            		ld de,TABSIZ        ; distance to next entry.
    7598   00:C6FC  DD 19               		add ix,de           ; next sprite.
    7599   00:C6FE  C9                  		ret
    7600   00:C6FF                      
    7601   00:C6FF                      		; A=image number from SPRITEPOSITION
    7602   00:C6FF                      mapsprite:					; initialize mapspr table
    7603   00:C6FF  E5                  		push hl
    7604   00:C700  C5                  		push bc
    7605   00:C701  CD 29 C6            		call gfrm			; HL = real sprite frames pointer in RAM for sprite number A
    7606   00:C704  7E                  		ld a,(hl)			; get real frame in RAM
    7607   00:C705  E6 7F               		and 127				; maximum 128 frames in RAM (correct?)
    7608   00:C707  5F                  		ld e,a
    7609   00:C708  16 4D               		ld d,mapspr>>8		
    7610   00:C70A  1A                  		ld a,(de)
    7611   00:C70B  3C                  		inc a
    7612   00:C70C  20 19               		jr nz,nomap
    7613   00:C70E  3A 44 40            		ld a,(nsprite)		; gets available sprite frame pointer
    7614   00:C711  12                  		ld (de),a			; maps this to the old image from SPRITEPOSITION
    7615   00:C712  23                  		inc hl
    7616   00:C713  86                  		add a,(hl)			; next sprite frame available after adding frames size
    7617   00:C714  32 44 40            		ld (nsprite),a		; stores it as new available sprite frame
    7618   00:C717  2B                  		dec hl				; restore HL pointer to start of frmlst
    7619   00:C718  CD 2A C7            		call spradr			; HL = sprite frame list position, DE = pointer to actual sprite frame in VRAM, BC = lenght of data		
    7620   00:C71B  CD 96 CB            		call MSX_SETWRT
    7621   00:C71E  EB                  		ex de,hl			; HL = sprite RAM data address, DE = spriVte RAM data address, BC = lenght of data
    7622   00:C71F                      nxtsprbyt:		
    7623   00:C71F  7E                  		ld a,(hl)
    7624   00:C720  D3 BE               		out (MSX_VDPDRW),a
    7625   00:C722  ED A1               		cpi					; 18
    7626   00:C724  EA 1F C7            		jp pe,nxtsprbyt		; 11 = 29
    7627   00:C727                      nomap:		
    7628   00:C727  C1                  		pop bc
    7629   00:C728  E1                  		pop hl
    7630   00:C729  C9                  		ret
    7631   00:C72A                      		
    7632   00:C72A                      ; Inputs
    7633   00:C72A                      ; HL = sprite frame list position
    7634   00:C72A                      ; DE = pointer to actual sprite frame in VRAM
    7635   00:C72A                      spradr:
    7636   00:C72A  7E                  		ld a,(hl)			; get initial image frame in RAM
    7637   00:C72B  CD 3F C7            		call mult32			; BC= A * 32
    7638   00:C72E  23                  		inc hl				; next frmlst position (num framesS)
    7639   00:C72F  7E                  		ld a,(hl)			; get num frames		
    7640   00:C730  08                  		ex af,af			; saves num frames
    7641   00:C731  21 EB 9D            		ld hl,sprgfx
    7642   00:C734  09                  		add hl,bc			; HL = sprite RAM data address
    7643   00:C735  1A                  		ld a,(de)			; gets destination VRAM sprite frame
    7644   00:C736  EB                  		ex de,hl			; DE = now sprite RAM source data address
    7645   00:C737  CD 3F C7            		call mult32		
    7646   00:C73A  21 00 38            		ld hl,MSX_SPRTBL
    7647   00:C73D  09                  		add hl,bc			; HL = sprite VRAM destination data address
    7648   00:C73E  08                  		ex af,af			; restore num frames		
    7649   00:C73F                      mult32:		
    7650   00:C73F  0F                  		rrca                
    7651   00:C740  0F                  		rrca
    7652   00:C741  0F                  		rrca
    7653   00:C742  4F                  		ld c,a              
    7654   00:C743  E6 1F               		and $1F              
    7655   00:C745  47                  		ld b,a              
    7656   00:C746  79                  		ld a,c              
    7657   00:C747  E6 E0               		and $E0             
    7658   00:C749  4F                  		ld c,a				; BC = A * 32		
    7659   00:C74A  C9                  		ret
    7660   00:C74B                      
    7661   00:C74B                      	if OFLAG
    7662   00:C74B                      	
    7663   00:C74B                      clrobjlst:
    7664   00:C74B  21 00 49            		ld hl,objlist
    7665   00:C74E  0E 01               		ld c,1     			; 1 * 256 bytes
    7666   00:C750  3E FF               		ld a,255			; fill value
    7667   00:C752  C3 5C C7            		jp fastfill
    7668   00:C755                      	
    7669   00:C755                      	endif
    7670   00:C755                      		
    7671   00:C755                      clrscrmap:
    7672   00:C755  21 00 4A            		ld hl,scrmap
    7673   00:C758  0E 03               		ld c,3     			; 3 * 256 bytes
    7674   00:C75A  3E FF               		ld a,255			; fill value
    7675   00:C75C                      ;
    7676   00:C75C                      ; fast fills RAM areas starting in addresses multiple of 4 
    7677   00:C75C                      ; Input:	C=number of 256 bytes blocks to fill
    7678   00:C75C                      ;			HL=starting address
    7679   00:C75C                      ;			A=byte for fill			
    7680   00:C75C                      ;
    7681   00:C75C                      fastfill:
    7682   00:C75C  06 40               		ld b,64              ;set B to 64 (64 * 4 sets = 256 bytes initiaized)
    7683   00:C75E                      .loop1:
    7684   00:C75E  77                  		ld (hl), a           ;set byte to 255
    7685   00:C75F  2C                  		inc l                ;move to the next byte
    7686   00:C760  77                  		ld (hl), a
    7687   00:C761  2C                  		inc l
    7688   00:C762  77                  		ld (hl), a
    7689   00:C763  2C                  		inc l
    7690   00:C764  77                  		ld (hl), a
    7691   00:C765  23                  		inc hl               ;this time we are not sure that inc l will not cause overflow
    7692   00:C766  10 F6               		djnz .loop1          ;repeat for next 4 bytes
    7693   00:C768  0D                  		dec c
    7694   00:C769  20 F1               		jr nz,fastfill       ;outer loop. repeat for next c*256 bytes.
    7695   00:C76B  C9                  		ret		
    7696   00:C76C                      	 
    7697   00:C76C                      ; Clear the play area window.
    7698   00:C76C                      
    7699   00:C76C                      clw:
    7700   00:C76C                      	if PFLAG
    7701   00:C76C                      	
    7702   00:C76C  CD E8 B9            		call inishr
    7703   00:C76F                      		
    7704   00:C76F                      	endif
    7705   00:C76F                      	
    7706   00:C76F  2A 93 40            		ld hl,(wintop)
    7707   00:C772  22 54 40            		ld (dispx),hl
    7708   00:C775  CD 49 BE            		call gprad          ; get print address in DE.
    7709   00:C778  EB                  		ex de,hl
    7710   00:C779  3A 95 40            		ld a,(winhgt)       ; height of window.
    7711   00:C77C  47                  		ld b,a
    7712   00:C77D  3A 96 40            		ld a,(winwid)
    7713   00:C780  87                  		add a,a
    7714   00:C781  87                  		add a,a
    7715   00:C782  87                  		add a,a
    7716   00:C783  4F                  		ld c,a
    7717   00:C784                      .loop3   
    7718   00:C784  CD 96 CB            		call MSX_SETWRT
    7719   00:C787  C5                  		push bc
    7720   00:C788  AF                  		xor a
    7721   00:C789                      .loop1:
    7722   00:C789  D3 BE               		out (MSX_VDPDRW),a
    7723   00:C78B  0D                  		dec c
    7724   00:C78C  20 FB               		jr nz,.loop1
    7725   00:C78E  CB EC               		set 5,h
    7726   00:C790  CD 96 CB            		call MSX_SETWRT
    7727   00:C793  C1                  		pop bc
    7728   00:C794  C5                  		push bc
    7729   00:C795  3A 39 40            		ld a,(clratt)
    7730   00:C798                      .loop2:
    7731   00:C798  D3 BE               		out (MSX_VDPDRW),a
    7732   00:C79A  0D                  		dec c
    7733   00:C79B  20 FB               		jr nz,.loop2
    7734   00:C79D  C1                  		pop bc
    7735   00:C79E  CB AC               		res 5,h
    7736   00:C7A0  24                  		inc h
    7737   00:C7A1  10 E1               		djnz .loop3
    7738   00:C7A3  2A 93 40            		ld hl,(wintop)      ; get coordinates of window.
    7739   00:C7A6  22 35 40            		ld (charx),hl       ; put into display position.
    7740   00:C7A9  CD 55 C7            		call clrscrmap
    7741   00:C7AC  C3 06 C3            		jp dissprs
    7742   00:C7AF                      
    7743   00:C7AF                      
    7744   00:C7AF                      	if SFLAG
    7745   00:C7AF                    ~ 	
    7746   00:C7AF                    ~ ; Effects code.
    7747   00:C7AF                    ~ ; Ticker routine is called 25 times per second (MSX:50fps).
    7748   00:C7AF                    ~ 
    7749   00:C7AF                    ~ scrly:
    7750   00:C7AF                    ~  	ifdef DEBUG
    7751   00:C7AF                    ~ 		BORDER 7
    7752   00:C7AF                    ~ 	endif
    7753   00:C7AF                    ~ 		ld a,(scrlyoff)
    7754   00:C7AF                    ~ 		or a
    7755   00:C7AF                    ~ 		ret nz
    7756   00:C7AF                    ~ 		ld hl,scrbuf
    7757   00:C7AF                    ~ 		ld de,(txtbeg)         ; get screen address.
    7758   00:C7AF                    ~ 		ld a,(txtwid)       
    7759   00:C7AF                    ~ 		add a,a
    7760   00:C7AF                    ~ 		add a,a
    7761   00:C7AF                    ~ 		add a,a					; characters*8 wide.
    7762   00:C7AF                    ~ 		ld b,a
    7763   00:C7AF                    ~ 		ifdef FASTVRAMDUMP
    7764   00:C7AF                    ~ 		call ram2vram
    7765   00:C7AF                    ~ 		else
    7766   00:C7AF                    ~ 		call ram2vram_slow
    7767   00:C7AF                    ~ 		endif
    7768   00:C7AF                    ~  	ifdef DEBUG
    7769   00:C7AF                    ~ 		BORDER 14
    7770   00:C7AF                    ~ 	endif
    7771   00:C7AF                    ~ 		ret
    7772   00:C7AF                    ~ 		
    7773   00:C7AF                    ~ scrltxt:
    7774   00:C7AF                    ~  	ifdef DEBUG
    7775   00:C7AF                    ~ 		BORDER 2
    7776   00:C7AF                    ~ 	endif
    7777   00:C7AF                    ~ 		ld a,(scrlyoff)
    7778   00:C7AF                    ~ 		or a
    7779   00:C7AF                    ~ 		ret nz
    7780   00:C7AF                    ~ 		
    7781   00:C7AF                    ~ 		ld a,(txtbit)
    7782   00:C7AF                    ~ 		rlca
    7783   00:C7AF                    ~ 		jr nc,.nonewchr
    7784   00:C7AF                    ~ 		
    7785   00:C7AF                    ~ 		ld hl,(txtpos)      ; get text pointer.
    7786   00:C7AF                    ~ 		ld a,(hl)           ; find character we're displaying.
    7787   00:C7AF                    ~ 		push hl
    7788   00:C7AF                    ~ 		and 127             ; remove end marker bit if applicable.
    7789   00:C7AF                    ~ 		cp 13               ; is it newline?
    7790   00:C7AF                    ~ 		jr nz,.scrly5       ; no, it's okay.
    7791   00:C7AF                    ~ 		ld a,32             ; convert to a space instead.
    7792   00:C7AF                    ~ .scrly5:
    7793   00:C7AF                    ~ 		rlca
    7794   00:C7AF                    ~ 		rlca
    7795   00:C7AF                    ~ 		rlca                ; multiply by 8 to find char.
    7796   00:C7AF                    ~ 		ld b,a              ; store shift in b.
    7797   00:C7AF                    ~ 		and 3               ; keep within 768-byte range of font.
    7798   00:C7AF                    ~ 		ld d,a              ; that's our high byte.
    7799   00:C7AF                    ~ 		ld a,b              ; restore the shift.
    7800   00:C7AF                    ~ 		and 248
    7801   00:C7AF                    ~ 		ld e,a
    7802   00:C7AF                    ~ 		ld hl,font-256      ; font.
    7803   00:C7AF                    ~ 		add hl,de           ; point to image of character.
    7804   00:C7AF                    ~ 		ld de,(txtend)
    7805   00:C7AF                    ~ 		ld bc,8
    7806   00:C7AF                    ~ 		ldir
    7807   00:C7AF                    ~ 		pop hl
    7808   00:C7AF                    ~ 		ld a,(hl)
    7809   00:C7AF                    ~ 		inc hl
    7810   00:C7AF                    ~ 		rla
    7811   00:C7AF                    ~ 		jr nc,.scrly6        ; not yet - continue.
    7812   00:C7AF                    ~ .scrly4:
    7813   00:C7AF                    ~ 		ld hl,(txtini)      ; start of scrolling message.		
    7814   00:C7AF                    ~ .scrly6:
    7815   00:C7AF                    ~ 		ld (txtpos),hl      ; new text pointer position.
    7816   00:C7AF                    ~ 		ld a,1
    7817   00:C7AF                    ~ .nonewchr:
    7818   00:C7AF                    ~ 		ld (txtbit),a
    7819   00:C7AF                    ~ 
    7820   00:C7AF                    ~ 		; Scroll a char row
    7821   00:C7AF                    ~ 		ld hl,(txtend)
    7822   00:C7AF                    ~ 		ld d,254
    7823   00:C7AF                    ~ 		ld c,8
    7824   00:C7AF                    ~ 		ld a,(txtwid)       ; characters wide.
    7825   00:C7AF                    ~ 		inc a
    7826   00:C7AF                    ~ 		ld b,a              ; put into the loop counter.
    7827   00:C7AF                    ~ .rowloop:
    7828   00:C7AF                    ~ 		push bc
    7829   00:C7AF                    ~ 		push hl
    7830   00:C7AF                    ~ 		ld c,0
    7831   00:C7AF                    ~ .colloop:	   
    7832   00:C7AF                    ~ 		ld a,(hl)
    7833   00:C7AF                    ~ 		rlca
    7834   00:C7AF                    ~ 		ld e,a
    7835   00:C7AF                    ~ 		and d
    7836   00:C7AF                    ~ 		or c
    7837   00:C7AF                    ~ 		ld (hl),a
    7838   00:C7AF                    ~ 		ld a,e
    7839   00:C7AF                    ~ 		and 1
    7840   00:C7AF                    ~ 		ld c,a
    7841   00:C7AF                    ~ 		
    7842   00:C7AF                    ~ 		ld a,l
    7843   00:C7AF                    ~ 		sub 8
    7844   00:C7AF                    ~ 		jr nc,$+3
    7845   00:C7AF                    ~ 		dec	h
    7846   00:C7AF                    ~ 		ld l,a
    7847   00:C7AF                    ~ 
    7848   00:C7AF                    ~ 		djnz .colloop
    7849   00:C7AF                    ~ 		pop hl
    7850   00:C7AF                    ~ 		inc l
    7851   00:C7AF                    ~ 		pop bc
    7852   00:C7AF                    ~ 		dec c
    7853   00:C7AF                    ~ 		jr nz,.rowloop
    7854   00:C7AF                    ~ 		
    7855   00:C7AF                    ~  		ifdef DEBUG
    7856   00:C7AF                    ~ 		BORDER 14
    7857   00:C7AF                    ~ 		endif
    7858   00:C7AF                    ~ 		ret
    7859   00:C7AF                    ~ 				
    7860   00:C7AF                    ~ 	   ; bc= width*256+msg.number
    7861   00:C7AF                    ~ iscrly: 
    7862   00:C7AF                    ~ 		call prescr         ; set up display position.
    7863   00:C7AF                    ~ 		ld a,b              ; width.
    7864   00:C7AF                    ~ 		dec a               ; subtract one.
    7865   00:C7AF                    ~ 		cp MSX_MAXCOLS      ; is it between 1 and 32?
    7866   00:C7AF                    ~ 		ret nc              ; TODO:no, disable messages.
    7867   00:C7AF                    ~ 		ld d,b
    7868   00:C7AF                    ~ 		ld a,c              ; message number.
    7869   00:C7AF                    ~ 		ld hl,msgdat        ; text messages.
    7870   00:C7AF                    ~ 		call getwrd         ; find message start.
    7871   00:C7AF                    ~ 		ld (txtini),hl      ; set initial text position.
    7872   00:C7AF                    ~ 		ld (txtpos),hl      ; set initial text position.
    7873   00:C7AF                    ~ 		ld a,d
    7874   00:C7AF                    ~ 		ld (txtwid),a
    7875   00:C7AF                    ~ 		add a,a
    7876   00:C7AF                    ~ 		add a,a
    7877   00:C7AF                    ~ 		add a,a				; *8
    7878   00:C7AF                    ~ 		ld c,a
    7879   00:C7AF                    ~ 		ld b,0
    7880   00:C7AF                    ~ 		jr nc,.nocarry
    7881   00:C7AF                    ~ 		inc b
    7882   00:C7AF                    ~ .nocarry:		
    7883   00:C7AF                    ~ 		call gprad          ; get hires print address in DE.
    7884   00:C7AF                    ~ 		ld (txtbeg),de
    7885   00:C7AF                    ~ 		ld hl,scrbuf
    7886   00:C7AF                    ~ 		ex de,hl
    7887   00:C7AF                    ~ 		call MSX_LDIRMV
    7888   00:C7AF                    ~ 		ld (txtend),de      ; set text screen address.
    7889   00:C7AF                    ~         ld a,128
    7890   00:C7AF                    ~         ld (txtbit),a
    7891   00:C7AF                    ~ 		xor a	
    7892   00:C7AF                    ~ 		ld (scrlyoff),a 
    7893   00:C7AF                    ~         ret
    7894   00:C7AF                    ~ 
    7895   00:C7AF                    ~ 	endif
    7896   00:C7AF                      
    7897   00:C7AF                      
    7898   00:C7AF                      	if DFLAG
    7899   00:C7AF                    ~ 
    7900   00:C7AF                    ~ dig:
    7901   00:C7AF                    ~        and 3
    7902   00:C7AF                    ~        jr z,digl
    7903   00:C7AF                    ~        dec a
    7904   00:C7AF                    ~        jr z,digr
    7905   00:C7AF                    ~        dec a
    7906   00:C7AF                    ~        jr z,digu
    7907   00:C7AF                    ~        ld h,(ix+4)
    7908   00:C7AF                    ~        ld a,16
    7909   00:C7AF                    ~        add a,(ix+3)
    7910   00:C7AF                    ~        ld l,a
    7911   00:C7AF                    ~        jr digv
    7912   00:C7AF                    ~ digu   ld a,(ix+3)
    7913   00:C7AF                    ~        ld h,(ix+4)
    7914   00:C7AF                    ~        sub 2
    7915   00:C7AF                    ~        ld l,a
    7916   00:C7AF                    ~ digv   ld (dispx),hl
    7917   00:C7AF                    ~        call tstbl
    7918   00:C7AF                    ~        call fdchk
    7919   00:C7AF                    ~        inc hl
    7920   00:C7AF                    ~        call fdchk
    7921   00:C7AF                    ~        ld a,(dispy)
    7922   00:C7AF                    ~        and 7
    7923   00:C7AF                    ~        ret z
    7924   00:C7AF                    ~        inc hl
    7925   00:C7AF                    ~        jp fdchk
    7926   00:C7AF                    ~ digl   ld l,(ix+3)
    7927   00:C7AF                    ~        ld a,(ix+4)
    7928   00:C7AF                    ~        sub 2
    7929   00:C7AF                    ~        ld h,a
    7930   00:C7AF                    ~ digh   ld (dispx),hl
    7931   00:C7AF                    ~        ld a,l
    7932   00:C7AF                    ~        and 7
    7933   00:C7AF                    ~        ld a,3
    7934   00:C7AF                    ~        jr nz,digh1
    7935   00:C7AF                    ~        dec a
    7936   00:C7AF                    ~ digh1  ld b,a
    7937   00:C7AF                    ~        call tstbl
    7938   00:C7AF                    ~ digh0  push bc
    7939   00:C7AF                    ~        call fdchk
    7940   00:C7AF                    ~        ld de,MSX_MAXCOLS
    7941   00:C7AF                    ~        add hl,de
    7942   00:C7AF                    ~        pop bc
    7943   00:C7AF                    ~        djnz digh0
    7944   00:C7AF                    ~        ret
    7945   00:C7AF                    ~ digr   ld l,(ix+3)
    7946   00:C7AF                    ~        ld a,(ix+4)
    7947   00:C7AF                    ~        add a,16
    7948   00:C7AF                    ~        ld h,a
    7949   00:C7AF                    ~        jr digh 
    7950   00:C7AF                    ~ 
    7951   00:C7AF                    ~ 	endif
    7952   00:C7AF                      
    7953   00:C7AF                      	if CRFLAG
    7954   00:C7AF                    ~ 
    7955   00:C7AF                    ~ ;
    7956   00:C7AF                    ~ ; Crumbling blocks routine
    7957   00:C7AF                    ~ ; Input:	None
    7958   00:C7AF                    ~ ; Output:	None
    7959   00:C7AF                    ~ ; Modifies: AF,BC,HL,DE
    7960   00:C7AF                    ~ ;
    7961   00:C7AF                    ~ 
    7962   00:C7AF                    ~ crumble:	
    7963   00:C7AF                    ~  		ld a,(frmno)
    7964   00:C7AF                    ~ 		and CRUMBLING_SPEED
    7965   00:C7AF                    ~ 		ret nz				; executed only every 1/8 of frames		
    7966   00:C7AF                    ~ 		ld h,(ix+4)			; x coordinate
    7967   00:C7AF                    ~ 		ld a,(ix+3)			; y coordinate
    7968   00:C7AF                    ~ 		add a,16
    7969   00:C7AF                    ~ 		ld l,a
    7970   00:C7AF                    ~ 		ld (dispx),hl		
    7971   00:C7AF                    ~ 		and 6
    7972   00:C7AF                    ~ 		ret nz
    7973   00:C7AF                    ~ 		call gp2tp			; dispx/y now has text coords
    7974   00:C7AF                    ~ 		call pradd
    7975   00:C7AF                    ~ 		ld de,scrmap
    7976   00:C7AF                    ~ 		add hl,de	
    7977   00:C7AF                    ~ 		ex de,hl
    7978   00:C7AF                    ~ 		ld hl,dispy
    7979   00:C7AF                    ~ 		ld a,(de)
    7980   00:C7AF                    ~ 		cp 9
    7981   00:C7AF                    ~ 		call nc,.crumb
    7982   00:C7AF                    ~ 		inc (hl)
    7983   00:C7AF                    ~ 		inc de
    7984   00:C7AF                    ~ 		ld a,(de)
    7985   00:C7AF                    ~ 		cp 9
    7986   00:C7AF                    ~ 		call nc,.crumb
    7987   00:C7AF                    ~ 		inc (hl)
    7988   00:C7AF                    ~ 		inc de
    7989   00:C7AF                    ~ 		ld a,(ix+4)			; get x coord
    7990   00:C7AF                    ~ 		and 7				; multiple of 8?
    7991   00:C7AF                    ~ 		ret z				; return (only two blocks crumb) 
    7992   00:C7AF                    ~ 		ld a,(de)
    7993   00:C7AF                    ~ 		cp 9
    7994   00:C7AF                    ~ 		ret c
    7995   00:C7AF                    ~ .crumb:	
    7996   00:C7AF                    ~ 		push de
    7997   00:C7AF                    ~ 		inc a
    7998   00:C7AF                    ~ 		cp 17
    7999   00:C7AF                    ~ 		jr c,.noblank		; if block < 17, update it 
    8000   00:C7AF                    ~ 		xor a				; else, empty block
    8001   00:C7AF                    ~ .noblank:
    8002   00:C7AF                    ~ 		call pattr
    8003   00:C7AF                    ~ 		dec (hl)			; undo x+1 position
    8004   00:C7AF                    ~ 		pop de
    8005   00:C7AF                    ~ 		ret
    8006   00:C7AF                    ~ 
    8007   00:C7AF                    ~ 	endif
    8008   00:C7AF                      
    8009   00:C7AF                      	if RTFLAG
    8010   00:C7AF                    ~ 	
    8011   00:C7AF                    ~ ; User routine for rotational controls.
    8012   00:C7AF                    ~ ; To use, set up the angle (0-255) of travel in DIRECTION, then call THRUST with a single parameter for speed (eg THRUST 4).
    8013   00:C7AF                    ~ ; This routine uses AIRBORNE and JUMPHEIGHT to store fractional coordinates but leaves SETTINGA and SETTINGB free. 
    8014   00:C7AF                    ~ ; Jonathan Cauldwell, 22nd October 2020.
    8015   00:C7AF                    ~ 
    8016   00:C7AF                    ~ thrust:
    8017   00:C7AF                    ~ 		ld b,a                      ; speed in b for now.
    8018   00:C7AF                    ~ 		ld (usrspd),a               ; store speed.
    8019   00:C7AF                    ~ 		ld l,(ix+13)                ; y fraction.
    8020   00:C7AF                    ~ 		ld h,(ix+14)                ; x fraction.
    8021   00:C7AF                    ~ 		push hl                     ; store old fractions.
    8022   00:C7AF                    ~ 
    8023   00:C7AF                    ~ 		/*
    8024   00:C7AF                    ~ 		ld h,(sintab>>8)&$FF
    8025   00:C7AF                    ~ 		ld l,(ix+10)
    8026   00:C7AF                    ~ 		ld a,(hl)
    8027   00:C7AF                    ~ 		*/
    8028   00:C7AF                    ~ 		
    8029   00:C7AF                    ~ 		ld hl,sintab                ; sine table.
    8030   00:C7AF                    ~ 		ld e,(ix+10)                ; direction.
    8031   00:C7AF                    ~ 		ld d,0                      ; no high byte.
    8032   00:C7AF                    ~ 		add hl,de                   ; point to entry.
    8033   00:C7AF                    ~ 		ld a,(hl)                   ; get the sine.
    8034   00:C7AF                    ~ 
    8035   00:C7AF                    ~ 		ld (usrsgn),a               ; store sign.
    8036   00:C7AF                    ~ 		and 127                     ; remove sign.
    8037   00:C7AF                    ~ 		ld h,a                      ; copy to first multiplier.
    8038   00:C7AF                    ~ 		ld d,b                      ; get speed.
    8039   00:C7AF                    ~ 		call imul                   ; multiply together.
    8040   00:C7AF                    ~ 		ld e,(ix+13)                ; y fraction.
    8041   00:C7AF                    ~ 		ld d,(ix+3)                 ; y integer.
    8042   00:C7AF                    ~ 		ld a,(usrsgn)               ; get sign.
    8043   00:C7AF                    ~ 		rla                         ; is it negative?
    8044   00:C7AF                    ~ 		jr nc,thrust0               ; yes.
    8045   00:C7AF                    ~ 		add hl,de                   ; just add.
    8046   00:C7AF                    ~ 		jr thrust1                  ; skip subtraction.
    8047   00:C7AF                    ~ thrust0:
    8048   00:C7AF                    ~ 		ex de,hl                    ; inertia in hl, force in de.
    8049   00:C7AF                    ~ 		sbc hl,de                   ; subtract force.
    8050   00:C7AF                    ~ thrust1:
    8051   00:C7AF                    ~ 		ld (ix+3),h                 ; set integer.
    8052   00:C7AF                    ~ 		ld (ix+13),l                ; set fraction.
    8053   00:C7AF                    ~ 		ld a,(ix+10)                ; direction.
    8054   00:C7AF                    ~ 		add a,64                    ; shift 90 degrees to get cosine.
    8055   00:C7AF                    ~ 		
    8056   00:C7AF                    ~ 		
    8057   00:C7AF                    ~ 		/*
    8058   00:C7AF                    ~ 		ld h,(sintab>>8)&$FF
    8059   00:C7AF                    ~ 		ld l,a
    8060   00:C7AF                    ~ 		ld a,(hl)
    8061   00:C7AF                    ~ 		*/
    8062   00:C7AF                    ~ 		
    8063   00:C7AF                    ~ 		ld e,a                      ; displacement to value.
    8064   00:C7AF                    ~ 		ld d,0                      ; no high byte.
    8065   00:C7AF                    ~ 		ld hl,sintab                ; sine table.
    8066   00:C7AF                    ~ 		add hl,de                   ; point to entry.
    8067   00:C7AF                    ~ 		ld a,(hl)                   ; get the cosine.
    8068   00:C7AF                    ~ 		
    8069   00:C7AF                    ~ 		ld (usrsgn),a               ; store sign.
    8070   00:C7AF                    ~ 		and 127                     ; remove sign.
    8071   00:C7AF                    ~ 		ld h,a                      ; copy to first multiplier.
    8072   00:C7AF                    ~ 		ld a,(usrspd)               ; get speed.
    8073   00:C7AF                    ~ 		ld d,a                      ; second multiplier.
    8074   00:C7AF                    ~ 		call imul                   ; multiply together.
    8075   00:C7AF                    ~ 		ld e,(ix+14)                ; x fraction.
    8076   00:C7AF                    ~ 		ld d,(ix+4)                 ; x integer.
    8077   00:C7AF                    ~ 		ld a,(usrsgn)               ; get sign.
    8078   00:C7AF                    ~ 		rla                         ; is it negative?
    8079   00:C7AF                    ~ 		jr nc,thrust2               ; yes.
    8080   00:C7AF                    ~ 		add hl,de                   ; just add.
    8081   00:C7AF                    ~ 		jr thrust3                  ; skip subtraction.
    8082   00:C7AF                    ~ thrust2:
    8083   00:C7AF                    ~ 		ex de,hl                    ; inertia in hl, force in de.
    8084   00:C7AF                    ~ 		sbc hl,de                   ; subtract force.
    8085   00:C7AF                    ~ thrust3:
    8086   00:C7AF                    ~ 		ld (ix+4),h                 ; x set integer.
    8087   00:C7AF                    ~ 		ld (ix+14),l                ; x set fraction.
    8088   00:C7AF                    ~ 		ld a,4                      ; displacement.
    8089   00:C7AF                    ~ 		add a,h                     ; add to integer.
    8090   00:C7AF                    ~ 		ld h,a                      ; set horizontal.
    8091   00:C7AF                    ~ 		ld a,(ix+3)                 ; get y.
    8092   00:C7AF                    ~ 		add a,4                     ; add displacement.
    8093   00:C7AF                    ~ 		ld l,a                      ; copy to second coordinate register.
    8094   00:C7AF                    ~ 		ld (dispx),hl               ; set coordinates to find.
    8095   00:C7AF                    ~ 		call tstbl                  ; check block.
    8096   00:C7AF                    ~ 		ld b,2                      ; cells to test vertically.
    8097   00:C7AF                    ~ 		ld de,MSX_MAXCOLS-1         ; distance between cell lines minus one.
    8098   00:C7AF                    ~ thrust5:
    8099   00:C7AF                    ~ 		ld a,(hl)                   ; get block there.
    8100   00:C7AF                    ~ 		cp WALL                     ; is it a wall?
    8101   00:C7AF                    ~ 		jr z,thrust4                ; yes, can't move there.
    8102   00:C7AF                    ~ 		inc l                       ; next cell.
    8103   00:C7AF                    ~ 		ld a,(hl)                   ; get block there.
    8104   00:C7AF                    ~ 		cp WALL                     ; is it a wall?
    8105   00:C7AF                    ~ 		jr z,thrust4                ; yes, can't move there.
    8106   00:C7AF                    ~ 		add hl,de                   ; next row down.
    8107   00:C7AF                    ~ 		djnz thrust5                ; repeat for all rows.
    8108   00:C7AF                    ~ 		pop hl                      ; restore old fractions.
    8109   00:C7AF                    ~ 		ret
    8110   00:C7AF                    ~ thrust4:
    8111   00:C7AF                    ~ 		pop hl                      ; restore old fractions.
    8112   00:C7AF                    ~ 		ld (ix+13),l                ; reset y.
    8113   00:C7AF                    ~ 		ld (ix+14),h                ; reset x.
    8114   00:C7AF                    ~ 		ld a,(ix+8)                 ; previous y.
    8115   00:C7AF                    ~ 		ld (ix+3),a                 ; restore it.
    8116   00:C7AF                    ~ 		ld a,(ix+9)                 ; previous x.
    8117   00:C7AF                    ~ 		ld (ix+4),a                 ; restore that too.
    8118   00:C7AF                    ~ 		ret
    8119   00:C7AF                    ~ 	   
    8120   00:C7AF                    ~ sintab:
    8121   00:C7AF                    ~ 		db 0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45
    8122   00:C7AF                    ~ 		db 48,51,54,57,59,62,65,67,70,73,75,78,80,82,85,87
    8123   00:C7AF                    ~ 		db 89,91,94,96,98,100,102,103,105,107,108,110,112,113,114,116
    8124   00:C7AF                    ~ 		db 117,118,119,120,121,122,123,123,124,125,125,126,126,126,126,126
    8125   00:C7AF                    ~ 		db 127,126,126,126,126,126,125,125,124,123,123,122,121,120,119,118
    8126   00:C7AF                    ~ 		db 117,116,114,113,112,110,108,107,105,103,102,100,98,96,94,91
    8127   00:C7AF                    ~ 		db 89,87,85,82,80,78,75,73,70,67,65,62,59,57,54,51
    8128   00:C7AF                    ~ 		db 48,45,42,39,36,33,30,27,24,21,18,15,12,9,6,3
    8129   00:C7AF                    ~ 		db 128,131,134,137,140,143,146,149,152,155,158,161,164,167,170,173
    8130   00:C7AF                    ~ 		db 176,179,182,185,187,190,193,195,198,201,203,206,208,210,213,215
    8131   00:C7AF                    ~ 		db 217,219,222,224,226,228,230,231,233,235,236,238,240,241,242,244
    8132   00:C7AF                    ~ 		db 245,246,247,248,249,250,251,251,252,253,253,254,254,254,254,254
    8133   00:C7AF                    ~ 		db 255,254,254,254,254,254,253,253,252,251,251,250,249,248,247,246
    8134   00:C7AF                    ~ 		db 245,244,242,241,240,238,236,235,233,231,230,228,226,224,222,219
    8135   00:C7AF                    ~ 		db 217,215,213,210,208,206,203,201,198,195,193,190,187,185,182,179
    8136   00:C7AF                    ~ 		db 176,173,170,167,164,161,158,155,152,149,146,143,140,137,134,131
    8137   00:C7AF                    ~ 	
    8138   00:C7AF                    ~ 	endif
    8139   00:C7AF                      	
    8140   00:C7AF                      	if PFLAG
    8141   00:C7AF                      
    8142   00:C7AF                      ; some aligned data (256+88 bytes)
    8143   00:C7AF                      
    8144   00:C7AF  (0051)              	   ALIGN 256
    8145   00:C800                      	
    8146   00:C800                      dots:		db 128,64,32,16,8,4,2,1   
    8146   00:C800  80 40 20 10 08 04 02 01 
    8147   00:C808  4D B8               shrptr:		dw laser          ; laser.
    8148   00:C80A  26 B8               			dw trail          ; vapour trail.
    8149   00:C80C  92 B7               			dw shrap          ; shrapnel from explosion.
    8150   00:C80E  B2 B7               			dw dotl           ; horizontal starfield left.
    8151   00:C810  B6 B7               			dw dotr           ; horizontal starfield right.
    8152   00:C812  BA B7               			dw dotu           ; vertical starfield up.
    8153   00:C814  BE B7               			dw dotd           ; vertical starfield down.
    8154   00:C816  CF 91               			dw ptcusr         ; user particle.			
    8155   00:C818                      shrsin: 	dw 0,1024,391,946,724,724,946,391
    8155   00:C818  00 00 00 04 87 01 B2 03 D4 02 D4 02 B2 03 87 01 
    8156   00:C828                      			dw 1024,0,946,65144,724,64811,391,64589
    8156   00:C828  00 04 00 00 B2 03 78 FE D4 02 2B FD 87 01 4D FC 
    8157   00:C838                      			dw 0,64512,65144,64589,64811,64811,64589,65144
    8157   00:C838  00 00 00 FC 78 FE 4D FC 2B FD 2B FD 4D FC 78 FE 
    8158   00:C848                      			dw 64512,0,64589,391,64811,724,65144,946
    8158   00:C848  00 FC 00 00 4D FC 87 01 2B FD D4 02 78 FE B2 03 
    8159   00:C858                      
    8160   00:C858                      
    8161   00:C858                      	endif
    8162   00:C858                      
    8163   00:C858                      
    8164   00:C858                      ; User routine.  Put your own code inside user.asm file to be called with USER instruction.
    8165   00:C858                      ; if USER has an argument it will be passed in the accumulator.
    8166   00:C858                      	if UFLAG
    8167   00:C858                    ~ 	
    8168   00:C858                    ~ 		include "User.asm"
    8169   00:C858                    ~ 
    8170   00:C858                    ~ 	endif
    8171   00:C858                      	
    8172   00:C858                      	include "Pletter_unpack.asm"
       1.  00:C858                      ; pletter v0.5c msx unpacker
       2.  00:C858                      
       3.  00:C858                      ; call unpack with hl pointing to some pletter5 data, and de pointing to the destination.
       4.  00:C858                      ; changes all registers
       5.  00:C858                      
       6.  00:C858                      ; define lengthindata when the original size is written in the pletter data
       7.  00:C858                      
       8.  00:C858                      ;  define LENGTHINDATA
       9.  00:C858                      
      10.  00:C858                        module pletter
      11.  00:C858                      
      12.  00:C858                        macro GETBIT
      13.  00:C858                    <   add a,a
      14.  00:C858                    <   call z,getbit
      15.  00:C858                    <   endmacro
      16.  00:C858                      
      17.  00:C858                        macro GETBITEXX
      18.  00:C858                    <   add a,a
      19.  00:C858                    <   call z,getbitexx
      20.  00:C858                    <   endmacro
      21.  00:C858                      
      22.  00:C858                      @unpack
      23.  00:C858                      
      24.  00:C858                        ifdef LENGTHINDATA
      25.  00:C858                    ~   inc hl
      26.  00:C858                    ~   inc hl
      27.  00:C858                    ~   endif
      28.  00:C858                      
      29.  00:C858  7E                    ld a,(hl)
      30.  00:C859  23                    inc hl
      31.  00:C85A  D9                    exx
      32.  00:C85B  11 00 00              ld de,0
      33.  00:C85E  87                    add a,a
      34.  00:C85F  3C                    inc a
      35.  00:C860  CB 13                 rl e
      36.  00:C862  87                    add a,a
      37.  00:C863  CB 13                 rl e
      38.  00:C865  87                    add a,a
      39.  00:C866  CB 13                 rl e
      40.  00:C868  CB 13                 rl e
      41.  00:C86A  21 F6 C8              ld hl,modes
      42.  00:C86D  19                    add hl,de
      43.  00:C86E  5E                    ld e,(hl)
      44.  00:C86F  DD 6B                 ld ixl,e
      45.  00:C871  23                    inc hl
      46.  00:C872  5E                    ld e,(hl)
      47.  00:C873  DD 63                 ld ixh,e
      48.  00:C875  1E 01                 ld e,1
      49.  00:C877  D9                    exx
      50.  00:C878  FD 21 7E C8           ld iy,loop
      51.  00:C87C                      literal
      52.  00:C87C  ED A0                 ldi
      53.  00:C87E                      loop
      54.  00:C87E                        GETBIT
      54.  00:C87E  87                >   add a,a
      54.  00:C87F  CC EC C8          >   call z,getbit
      55.  00:C882  30 F8                 jr nc,literal
      56.  00:C884  D9                    exx
      57.  00:C885  62                    ld h,d
      58.  00:C886  6B                    ld l,e
      59.  00:C887                      getlen
      60.  00:C887                        GETBITEXX
      60.  00:C887  87                >   add a,a
      60.  00:C888  CC F0 C8          >   call z,getbitexx
      61.  00:C88B  30 1B                 jr nc,.lenok
      62.  00:C88D                      .lus
      63.  00:C88D                        GETBITEXX
      63.  00:C88D  87                >   add a,a
      63.  00:C88E  CC F0 C8          >   call z,getbitexx
      64.  00:C891  ED 6A                 adc hl,hl
      65.  00:C893  D8                    ret c
      66.  00:C894                        GETBITEXX
      66.  00:C894  87                >   add a,a
      66.  00:C895  CC F0 C8          >   call z,getbitexx
      67.  00:C898  30 0E                 jr nc,.lenok
      68.  00:C89A                        GETBITEXX
      68.  00:C89A  87                >   add a,a
      68.  00:C89B  CC F0 C8          >   call z,getbitexx
      69.  00:C89E  ED 6A                 adc hl,hl
      70.  00:C8A0  D8                    ret c
      71.  00:C8A1                        GETBITEXX
      71.  00:C8A1  87                >   add a,a
      71.  00:C8A2  CC F0 C8          >   call z,getbitexx
      72.  00:C8A5  DA 8D C8              jp c,.lus
      73.  00:C8A8                      .lenok
      74.  00:C8A8  23                    inc hl
      75.  00:C8A9  D9                    exx
      76.  00:C8AA  4E                    ld c,(hl)
      77.  00:C8AB  23                    inc hl
      78.  00:C8AC  06 00                 ld b,0
      79.  00:C8AE  CB 79                 bit 7,c
      80.  00:C8B0  CA DD C8              jp z,offsok
      81.  00:C8B3  DD E9                 jp ix
      82.  00:C8B5                      
      83.  00:C8B5                      mode6
      84.  00:C8B5                        GETBIT
      84.  00:C8B5  87                >   add a,a
      84.  00:C8B6  CC EC C8          >   call z,getbit
      85.  00:C8B9  CB 10                 rl b
      86.  00:C8BB                      mode5
      87.  00:C8BB                        GETBIT
      87.  00:C8BB  87                >   add a,a
      87.  00:C8BC  CC EC C8          >   call z,getbit
      88.  00:C8BF  CB 10                 rl b
      89.  00:C8C1                      mode4
      90.  00:C8C1                        GETBIT
      90.  00:C8C1  87                >   add a,a
      90.  00:C8C2  CC EC C8          >   call z,getbit
      91.  00:C8C5  CB 10                 rl b
      92.  00:C8C7                      mode3
      93.  00:C8C7                        GETBIT
      93.  00:C8C7  87                >   add a,a
      93.  00:C8C8  CC EC C8          >   call z,getbit
      94.  00:C8CB  CB 10                 rl b
      95.  00:C8CD                      mode2
      96.  00:C8CD                        GETBIT
      96.  00:C8CD  87                >   add a,a
      96.  00:C8CE  CC EC C8          >   call z,getbit
      97.  00:C8D1  CB 10                 rl b
      98.  00:C8D3                        GETBIT
      98.  00:C8D3  87                >   add a,a
      98.  00:C8D4  CC EC C8          >   call z,getbit
      99.  00:C8D7  30 04                 jr nc,offsok
     100.  00:C8D9  B7                    or a
     101.  00:C8DA  04                    inc b
     102.  00:C8DB  CB B9                 res 7,c
     103.  00:C8DD                      offsok
     104.  00:C8DD  03                    inc bc
     105.  00:C8DE  E5                    push hl
     106.  00:C8DF  D9                    exx
     107.  00:C8E0  E5                    push hl
     108.  00:C8E1  D9                    exx
     109.  00:C8E2  6B                    ld l,e
     110.  00:C8E3  62                    ld h,d
     111.  00:C8E4  ED 42                 sbc hl,bc
     112.  00:C8E6  C1                    pop bc
     113.  00:C8E7  ED B0                 ldir
     114.  00:C8E9  E1                    pop hl
     115.  00:C8EA  FD E9                 jp iy
     116.  00:C8EC                      
     117.  00:C8EC                      getbit
     118.  00:C8EC  7E                    ld a,(hl)
     119.  00:C8ED  23                    inc hl
     120.  00:C8EE  17                    rla
     121.  00:C8EF  C9                    ret
     122.  00:C8F0                      
     123.  00:C8F0                      getbitexx
     124.  00:C8F0  D9                    exx
     125.  00:C8F1  7E                    ld a,(hl)
     126.  00:C8F2  23                    inc hl
     127.  00:C8F3  D9                    exx
     128.  00:C8F4  17                    rla
     129.  00:C8F5  C9                    ret
     130.  00:C8F6                      
     131.  00:C8F6                      modes
     132.  00:C8F6  DD C8                 word offsok
     133.  00:C8F8  CD C8                 word mode2
     134.  00:C8FA  C7 C8                 word mode3
     135.  00:C8FC  C1 C8                 word mode4
     136.  00:C8FE  BB C8                 word mode5
     137.  00:C900  B5 C8                 word mode6
     138.  00:C902                      
     139.  00:C902                        endmodule
     140.  00:C902                      
     141.  00:C902                      ;eof
    8173   00:C902                      	; Music & SFX routines
    8174   00:C902                      	include "PT3-ROM.asm"
       1.  00:C902                      		; --- PT3 REPLAYER WORKING ON ROM ---
       2.  00:C902                      		; --- Can be assembled with asMSX ---
       3.  00:C902                      		; --- ROM version: MSX-KUN        ---
       4.  00:C902                      		; --- asMSX version: SapphiRe     ---
       5.  00:C902                      		; --- tniasm version: theNestruo  ---
       6.  00:C902                      
       7.  00:C902                      ; Based on MSX version of PT3 by Dioniso
       8.  00:C902                      ;
       9.  00:C902                      ; This version of the replayer uses a fixed volume and note table, if you need a 
      10.  00:C902                      ; different note table you can copy it from TABLES.TXT file, distributed with the
      11.  00:C902                      ; original PT3 distribution. This version also allows the use of PT3 commands.
      12.  00:C902                      ;
      13.  00:C902                      ; PLAY and PSG WRITE routines seperated to allow independent calls
      14.  00:C902                      ;
      15.  00:C902                      ; ROM LENGTH: 1528 bytes
      16.  00:C902                      ; RAM LENGTH:  382 bytes
      17.  00:C902                      
      18.  00:C902                      		; --- CONSTANT VALUES DEFINITION ---
      19.  00:C902                      
      20.  00:C902                      ;ChannelsVars
      21.  00:C902                      ;struc	CHNPRM
      22.  00:C902                      ;reset group
      23.  00:C902  (00:0000)           CHNPRM_PsInOr:	equ 0	;RESB 1
      24.  00:C902  (00:0001)           CHNPRM_PsInSm:	equ 1	;RESB 1
      25.  00:C902  (00:0002)           CHNPRM_CrAmSl:	equ 2	;RESB 1
      26.  00:C902  (00:0003)           CHNPRM_CrNsSl:	equ 3	;RESB 1
      27.  00:C902  (00:0004)           CHNPRM_CrEnSl:	equ 4	;RESB 1
      28.  00:C902  (00:0005)           CHNPRM_TSlCnt:	equ 5	;RESB 1
      29.  00:C902  (00:0006)           CHNPRM_CrTnSl:	equ 6	;RESW 1
      30.  00:C902  (00:0008)           CHNPRM_TnAcc:	equ 8	;RESW 1
      31.  00:C902  (00:000A)           CHNPRM_COnOff:	equ 10	;RESB 1
      32.  00:C902                      ;reset group
      33.  00:C902                      
      34.  00:C902  (00:000B)           CHNPRM_OnOffD:	equ 11	;RESB 1
      35.  00:C902                      
      36.  00:C902                      ;IX for PTDECOD here [+12]
      37.  00:C902  (00:000C)           CHNPRM_OffOnD:	equ 12	;RESB 1
      38.  00:C902  (00:000D)           CHNPRM_OrnPtr:	equ 13	;RESW 1
      39.  00:C902  (00:000F)           CHNPRM_SamPtr:	equ 15	;RESW 1
      40.  00:C902  (00:0011)           CHNPRM_NNtSkp:	equ 17	;RESB 1
      41.  00:C902  (00:0012)           CHNPRM_Note:	equ 18	;RESB 1
      42.  00:C902  (00:0013)           CHNPRM_SlToNt:	equ 19	;RESB 1
      43.  00:C902  (00:0014)           CHNPRM_Env_En:	equ 20	;RESB 1
      44.  00:C902  (00:0015)           CHNPRM_Flags:	equ 21	;RESB 1
      45.  00:C902                       ;Enabled - 0,SimpleGliss - 2
      46.  00:C902  (00:0016)           CHNPRM_TnSlDl:	equ 22	;RESB 1
      47.  00:C902  (00:0017)           CHNPRM_TSlStp:	equ 23	;RESW 1
      48.  00:C902  (00:0019)           CHNPRM_TnDelt:	equ 25	;RESW 1
      49.  00:C902  (00:001B)           CHNPRM_NtSkCn:	equ 27	;RESB 1
      50.  00:C902  (00:001C)           CHNPRM_Volume:	equ 28	;RESB 1
      51.  00:C902  (00:001D)           CHNPRM_Size:	equ 29	;RESB 1
      52.  00:C902                      ;endstruc
      53.  00:C902                      
      54.  00:C902                      ;struc	AR
      55.  00:C902  (00:0000)           AR_TonA:	equ 0	;RESW 1
      56.  00:C902  (00:0002)           AR_TonB:	equ 2	;RESW 1
      57.  00:C902  (00:0004)           AR_TonC:	equ 4	;RESW 1
      58.  00:C902  (00:0006)           AR_Noise:	equ 6	;RESB 1
      59.  00:C902  (00:0007)           AR_Mixer:	equ 7	;RESB 1
      60.  00:C902  (00:0008)           AR_AmplA:	equ 8	;RESB 1
      61.  00:C902  (00:0009)           AR_AmplB:	equ 9	;RESB 1
      62.  00:C902  (00:000A)           AR_AmplC:	equ 10	;RESB 1
      63.  00:C902  (00:000B)           AR_Env:		equ 11	;RESW 1
      64.  00:C902  (00:000D)           AR_EnvTp:	equ 13	;RESB 1
      65.  00:C902                      ;endstruc
      66.  00:C902                      
      67.  00:C902                      		; --- CODE STARTS HERE ---
      68.  00:C902                      
      69.  00:C902                      	if YFLAG
      70.  00:C902                    ~ 
      71.  00:C902                    ~ CHECKLP:	
      72.  00:C902                    ~ 		ld hl,PT3_SETUP
      73.  00:C902                    ~ 		set	7,(hl)
      74.  00:C902                    ~ 		bit	0,(hl)
      75.  00:C902                    ~ 		ret z
      76.  00:C902                    ~ 		pop hl
      77.  00:C902                    ~ 		ld hl,DelyCnt
      78.  00:C902                    ~ 		inc	(hl)
      79.  00:C902                    ~ 		ld hl,ChanA+CHNPRM_NtSkCn
      80.  00:C902                    ~ 		inc	(hl)
      81.  00:C902                    ~ 		jp music_mute
      82.  00:C902                    ~ 
      83.  00:C902                    ~ ; -------------------------------------------------------
      84.  00:C902                    ~ 		
      85.  00:C902                    ~ PT3_INIT:	;HL - AddressOfModule - 100
      86.  00:C902                    ~ 		LD [PT3_MODADDR],HL
      87.  00:C902                    ~ 		PUSH HL
      88.  00:C902                    ~ 		LD DE,100
      89.  00:C902                    ~ 		ADD HL,DE
      90.  00:C902                    ~ 		LD A,[HL]
      91.  00:C902                    ~ 		LD [PT3_Delay],A
      92.  00:C902                    ~ 		PUSH HL
      93.  00:C902                    ~ 		POP IX
      94.  00:C902                    ~ 		ADD HL,DE
      95.  00:C902                    ~ 		LD [PT3_CrPsPtr],HL
      96.  00:C902                    ~ 		LD E,[IX+102-100]
      97.  00:C902                    ~ 		ADD HL,DE
      98.  00:C902                    ~ 		INC HL
      99.  00:C902                    ~ 		LD [PT3_LPosPtr],HL
     100.  00:C902                    ~ 		POP DE
     101.  00:C902                    ~ 		LD L,[IX+103-100]
     102.  00:C902                    ~ 		LD H,[IX+104-100]
     103.  00:C902                    ~ 		ADD HL,DE
     104.  00:C902                    ~ 		LD [PT3_PatsPtr],HL
     105.  00:C902                    ~ 		LD HL,169
     106.  00:C902                    ~ 		ADD HL,DE
     107.  00:C902                    ~ 		LD [PT3_OrnPtrs],HL
     108.  00:C902                    ~ 		LD HL,105
     109.  00:C902                    ~ 		ADD HL,DE
     110.  00:C902                    ~ 		LD [PT3_SAMPTRS],HL
     111.  00:C902                    ~ 		LD HL,PT3_SETUP
     112.  00:C902                    ~ 		RES 7,[HL]
     113.  00:C902                    ~ 
     114.  00:C902                    ~ 		; --- CREATE PT3 VOLUME TABLE (c) Ivan Roshin, adapted by SapphiRe ---
     115.  00:C902                    ~ 		ld	hl,$11
     116.  00:C902                    ~ 		ld	d,h
     117.  00:C902                    ~ 		ld	e,h
     118.  00:C902                    ~ 		ld	IX,VT_+16
     119.  00:C902                    ~ 		ld	b,15
     120.  00:C902                    ~ .INITV1:	push	hl
     121.  00:C902                    ~ 		add	hl,de
     122.  00:C902                    ~ 		ex	de,hl
     123.  00:C902                    ~ 		sbc	hl,hl
     124.  00:C902                    ~ 		ld	c,b
     125.  00:C902                    ~ 		ld	b,16
     126.  00:C902                    ~ .INITV2:	ld	a,l
     127.  00:C902                    ~ 		rla
     128.  00:C902                    ~ 		ld	a,h
     129.  00:C902                    ~ 		adc	a,0
     130.  00:C902                    ~ 		ld	[ix],a
     131.  00:C902                    ~ 		inc	ix
     132.  00:C902                    ~ 		add	hl,de
     133.  00:C902                    ~ 		djnz	.INITV2
     134.  00:C902                    ~ 		pop	hl
     135.  00:C902                    ~ 		ld	a,e
     136.  00:C902                    ~ 		cp	$77
     137.  00:C902                    ~ 		jr	nz,.INITV3
     138.  00:C902                    ~ 		inc	e
     139.  00:C902                    ~ .INITV3:	ld	b,c
     140.  00:C902                    ~ 		djnz	.INITV1
     141.  00:C902                    ~ 
     142.  00:C902                    ~ 		; --- INITIALIZE PT3 VARIABLES ---
     143.  00:C902                    ~ 		XOR A
     144.  00:C902                    ~ 		LD HL,VARS
     145.  00:C902                    ~ 		LD [HL],A
     146.  00:C902                    ~ 		LD DE,VARS+1
     147.  00:C902                    ~ 		LD BC,VAR0END-VARS-1
     148.  00:C902                    ~ 		LDIR
     149.  00:C902                    ~ 
     150.  00:C902                    ~ 		INC A
     151.  00:C902                    ~ 		LD [DelyCnt],A
     152.  00:C902                    ~ 		LD HL,$F001 ;H - CHNPRM_Volume, L - CHNPRM_NtSkCn
     153.  00:C902                    ~ 		LD [ChanA+CHNPRM_NtSkCn],HL
     154.  00:C902                    ~ 		LD [ChanB+CHNPRM_NtSkCn],HL
     155.  00:C902                    ~ 		LD [ChanC+CHNPRM_NtSkCn],HL
     156.  00:C902                    ~ 
     157.  00:C902                    ~ 		LD HL,EMPTYSAMORN
     158.  00:C902                    ~ 		LD [PT3_AdInPtA],HL ;ptr to zero
     159.  00:C902                    ~ 		LD [ChanA+CHNPRM_OrnPtr],HL ;ornament 0 is "0,1,0"
     160.  00:C902                    ~ 		LD [ChanB+CHNPRM_OrnPtr],HL ;in all versions from
     161.  00:C902                    ~ 		LD [ChanC+CHNPRM_OrnPtr],HL ;3.xx to 3.6x and VTII
     162.  00:C902                    ~ 
     163.  00:C902                    ~ 		LD [ChanA+CHNPRM_SamPtr],HL ;S1 There is no default
     164.  00:C902                    ~ 		LD [ChanB+CHNPRM_SamPtr],HL ;S2 sample in PT3, so, you
     165.  00:C902                    ~ 		LD [ChanC+CHNPRM_SamPtr],HL ;S3 can comment S1,2,3; see
     166.  00:C902                    ~ 					    ;also EMPTYSAMORN comment
     167.  00:C902                    ~ 						
     168.  00:C902                    ~ 		RET
     169.  00:C902                    ~ 
     170.  00:C902                    ~ 		;pattern decoder
     171.  00:C902                    ~ PD_OrSm:	LD [IX+(CHNPRM_Env_En-12)],0
     172.  00:C902                    ~ 		CALL SETORN
     173.  00:C902                    ~ 		LD A,[BC]
     174.  00:C902                    ~ 		INC BC
     175.  00:C902                    ~ 		RRCA
     176.  00:C902                    ~ 
     177.  00:C902                    ~ PD_SAM:		ADD A,A
     178.  00:C902                    ~ PD_SAM_:	LD E,A
     179.  00:C902                    ~ 		LD D,0
     180.  00:C902                    ~ 		LD HL,[PT3_SAMPTRS]
     181.  00:C902                    ~ 		ADD HL,DE
     182.  00:C902                    ~ 		LD E,[HL]
     183.  00:C902                    ~ 		INC HL
     184.  00:C902                    ~ 		LD D,[HL]
     185.  00:C902                    ~ 		LD HL,[PT3_MODADDR]
     186.  00:C902                    ~ 		ADD HL,DE
     187.  00:C902                    ~ 		LD [IX+(CHNPRM_SamPtr-12)],L
     188.  00:C902                    ~ 		LD [IX+(CHNPRM_SamPtr+1-12)],H
     189.  00:C902                    ~ 		JR PD_LOOP
     190.  00:C902                    ~ 
     191.  00:C902                    ~ PD_VOL:		RLCA
     192.  00:C902                    ~ 		RLCA
     193.  00:C902                    ~ 		RLCA
     194.  00:C902                    ~ 		RLCA
     195.  00:C902                    ~ 		LD [IX+(CHNPRM_Volume-12)],A
     196.  00:C902                    ~ 		JR PD_LP2
     197.  00:C902                    ~ 	
     198.  00:C902                    ~ PD_EOff:	LD [IX+(CHNPRM_Env_En-12)],A
     199.  00:C902                    ~ 		LD [IX+(CHNPRM_PsInOr-12)],A
     200.  00:C902                    ~ 		JR PD_LP2
     201.  00:C902                    ~ 
     202.  00:C902                    ~ PD_SorE:	DEC A
     203.  00:C902                    ~ 		JR NZ,PD_ENV
     204.  00:C902                    ~ 		LD A,[BC]
     205.  00:C902                    ~ 		INC BC
     206.  00:C902                    ~ 		LD [IX+(CHNPRM_NNtSkp-12)],A
     207.  00:C902                    ~ 		JR PD_LP2
     208.  00:C902                    ~ 
     209.  00:C902                    ~ PD_ENV:		CALL SETENV
     210.  00:C902                    ~ 		JR PD_LP2
     211.  00:C902                    ~ 
     212.  00:C902                    ~ PD_ORN:		CALL SETORN
     213.  00:C902                    ~ 		JR PD_LOOP
     214.  00:C902                    ~        
     215.  00:C902                    ~ PD_ESAM:	LD [IX+(CHNPRM_Env_En-12)],A
     216.  00:C902                    ~ 		LD [IX+(CHNPRM_PsInOr-12)],A
     217.  00:C902                    ~ 		CALL NZ,SETENV
     218.  00:C902                    ~ 		LD A,[BC]
     219.  00:C902                    ~ 		INC BC
     220.  00:C902                    ~ 		JR PD_SAM_
     221.  00:C902                    ~ 
     222.  00:C902                    ~ PTDECOD:	LD A,[IX+(CHNPRM_Note-12)]
     223.  00:C902                    ~ 		LD [PT3_PrNote],A
     224.  00:C902                    ~ 		LD L,[IX+(CHNPRM_CrTnSl-12)]
     225.  00:C902                    ~ 		LD H,[IX+(CHNPRM_CrTnSl+1-12)]
     226.  00:C902                    ~ 		LD [PT3_PrSlide],HL
     227.  00:C902                    ~ 
     228.  00:C902                    ~ PD_LOOP:	LD DE,$2010
     229.  00:C902                    ~ PD_LP2:		LD A,[BC]
     230.  00:C902                    ~ 		INC BC
     231.  00:C902                    ~ 		ADD A,E
     232.  00:C902                    ~ 		JR C,PD_OrSm
     233.  00:C902                    ~ 		ADD A,D
     234.  00:C902                    ~ 		JR Z,PD_FIN
     235.  00:C902                    ~ 		JR C,PD_SAM
     236.  00:C902                    ~ 		ADD A,E
     237.  00:C902                    ~ 		JR Z,PD_REL
     238.  00:C902                    ~ 		JR C,PD_VOL
     239.  00:C902                    ~ 		ADD A,E
     240.  00:C902                    ~ 		JR Z,PD_EOff
     241.  00:C902                    ~ 		JR C,PD_SorE
     242.  00:C902                    ~ 		ADD A,96
     243.  00:C902                    ~ 		JR C,PD_NOTE
     244.  00:C902                    ~ 		ADD A,E
     245.  00:C902                    ~ 		JR C,PD_ORN
     246.  00:C902                    ~ 		ADD A,D
     247.  00:C902                    ~ 		JR C,PD_NOIS
     248.  00:C902                    ~ 		ADD A,E
     249.  00:C902                    ~ 		JR C,PD_ESAM
     250.  00:C902                    ~ 		ADD A,A
     251.  00:C902                    ~ 		LD E,A
     252.  00:C902                    ~ 		LD HL,SPCCOMS.HL_VALUE
     253.  00:C902                    ~ 		ADD HL,DE
     254.  00:C902                    ~ 		LD E,[HL]
     255.  00:C902                    ~ 		INC HL
     256.  00:C902                    ~ 		LD D,[HL]
     257.  00:C902                    ~ 		PUSH DE
     258.  00:C902                    ~ 		JR PD_LOOP
     259.  00:C902                    ~ 
     260.  00:C902                    ~ PD_NOIS:	LD [Ns_Base],A
     261.  00:C902                    ~ 		JR PD_LP2
     262.  00:C902                    ~ 
     263.  00:C902                    ~ PD_REL:		RES 0,[IX+(CHNPRM_Flags-12)]
     264.  00:C902                    ~ 		JR PD_RES
     265.  00:C902                    ~ 	
     266.  00:C902                    ~ PD_NOTE:	LD [IX+(CHNPRM_Note-12)],A
     267.  00:C902                    ~ 		SET 0,[IX+(CHNPRM_Flags-12)]
     268.  00:C902                    ~ 		XOR A
     269.  00:C902                    ~ 
     270.  00:C902                    ~ PD_RES:		LD [PT3_PDSP],SP
     271.  00:C902                    ~ 		LD SP,IX
     272.  00:C902                    ~ 		LD H,A
     273.  00:C902                    ~ 		LD L,A
     274.  00:C902                    ~ 		PUSH HL
     275.  00:C902                    ~ 		PUSH HL
     276.  00:C902                    ~ 		PUSH HL
     277.  00:C902                    ~ 		PUSH HL
     278.  00:C902                    ~ 		PUSH HL
     279.  00:C902                    ~ 		PUSH HL
     280.  00:C902                    ~ 		LD SP,[PT3_PDSP]
     281.  00:C902                    ~ 
     282.  00:C902                    ~ PD_FIN:		LD A,[IX+(CHNPRM_NNtSkp-12)]
     283.  00:C902                    ~ 		LD [IX+(CHNPRM_NtSkCn-12)],A
     284.  00:C902                    ~ 		RET
     285.  00:C902                    ~ 
     286.  00:C902                    ~ C_PORTM:	RES 2,[IX+(CHNPRM_Flags-12)]
     287.  00:C902                    ~ 		LD A,[BC]
     288.  00:C902                    ~ 		INC BC
     289.  00:C902                    ~ 		;SKIP PRECALCULATED TONE DELTA [BECAUSE
     290.  00:C902                    ~ 		;CANNOT BE RIGHT AFTER PT3 COMPILATION]
     291.  00:C902                    ~ 		INC BC
     292.  00:C902                    ~ 		INC BC
     293.  00:C902                    ~ 		LD [IX+(CHNPRM_TnSlDl-12)],A
     294.  00:C902                    ~ 		LD [IX+(CHNPRM_TSlCnt-12)],A
     295.  00:C902                    ~ 		LD DE,NT_
     296.  00:C902                    ~ 		LD A,[IX+(CHNPRM_Note-12)]
     297.  00:C902                    ~ 		LD [IX+(CHNPRM_SlToNt-12)],A
     298.  00:C902                    ~ 		ADD A,A
     299.  00:C902                    ~ 		LD L,A
     300.  00:C902                    ~ 		LD H,0
     301.  00:C902                    ~ 		ADD HL,DE
     302.  00:C902                    ~ 		LD A,[HL]
     303.  00:C902                    ~ 		INC HL
     304.  00:C902                    ~ 		LD H,[HL]
     305.  00:C902                    ~ 		LD L,A
     306.  00:C902                    ~ 		PUSH HL
     307.  00:C902                    ~ 		LD A,[PT3_PrNote]
     308.  00:C902                    ~ 		LD [IX+(CHNPRM_Note-12)],A
     309.  00:C902                    ~ 		ADD A,A
     310.  00:C902                    ~ 		LD L,A
     311.  00:C902                    ~ 		LD H,0
     312.  00:C902                    ~ 		ADD HL,DE
     313.  00:C902                    ~ 		LD E,[HL]
     314.  00:C902                    ~ 		INC HL
     315.  00:C902                    ~ 		LD D,[HL]
     316.  00:C902                    ~ 		POP HL
     317.  00:C902                    ~ 		SBC HL,DE
     318.  00:C902                    ~ 		LD [IX+(CHNPRM_TnDelt-12)],L
     319.  00:C902                    ~ 		LD [IX+(CHNPRM_TnDelt+1-12)],H
     320.  00:C902                    ~ 		LD DE,[PT3_PrSlide]
     321.  00:C902                    ~ 		LD [IX+(CHNPRM_CrTnSl-12)],E
     322.  00:C902                    ~ 		LD [IX+(CHNPRM_CrTnSl+1-12)],D
     323.  00:C902                    ~ 		LD A,[BC] ;SIGNED TONE STEP
     324.  00:C902                    ~ 		INC BC
     325.  00:C902                    ~ 		EX AF,AF
     326.  00:C902                    ~ 		LD A,[BC]
     327.  00:C902                    ~ 		INC BC
     328.  00:C902                    ~ 		AND A
     329.  00:C902                    ~ 		JR Z,.NOSIG
     330.  00:C902                    ~ 		EX DE,HL
     331.  00:C902                    ~ .NOSIG:	SBC HL,DE
     332.  00:C902                    ~ 		JP P,SET_STP
     333.  00:C902                    ~ 		CPL
     334.  00:C902                    ~ 		EX AF,AF
     335.  00:C902                    ~ 		NEG
     336.  00:C902                    ~ 		EX AF,AF
     337.  00:C902                    ~ SET_STP:	LD [IX+(CHNPRM_TSlStp+1-12)],A
     338.  00:C902                    ~ 		EX AF,AF
     339.  00:C902                    ~ 		LD [IX+(CHNPRM_TSlStp-12)],A
     340.  00:C902                    ~ 		LD [IX+(CHNPRM_COnOff-12)],0
     341.  00:C902                    ~ 		RET
     342.  00:C902                    ~ 
     343.  00:C902                    ~ C_GLISS:	SET 2,[IX+(CHNPRM_Flags-12)]
     344.  00:C902                    ~ 		LD A,[BC]
     345.  00:C902                    ~ 		INC BC
     346.  00:C902                    ~ 		LD [IX+(CHNPRM_TnSlDl-12)],A
     347.  00:C902                    ~ 		LD [IX+(CHNPRM_TSlCnt-12)],A
     348.  00:C902                    ~ 		LD A,[BC]
     349.  00:C902                    ~ 		INC BC
     350.  00:C902                    ~ 		EX AF,AF
     351.  00:C902                    ~ 		LD A,[BC]
     352.  00:C902                    ~ 		INC BC
     353.  00:C902                    ~ 		JR SET_STP
     354.  00:C902                    ~ 
     355.  00:C902                    ~ C_SMPOS:	LD A,[BC]
     356.  00:C902                    ~ 		INC BC
     357.  00:C902                    ~ 		LD [IX+(CHNPRM_PsInSm-12)],A
     358.  00:C902                    ~ 		RET
     359.  00:C902                    ~ 
     360.  00:C902                    ~ C_ORPOS:	LD A,[BC]
     361.  00:C902                    ~ 		INC BC
     362.  00:C902                    ~ 		LD [IX+(CHNPRM_PsInOr-12)],A
     363.  00:C902                    ~ 		RET
     364.  00:C902                    ~ 
     365.  00:C902                    ~ C_VIBRT:	LD A,[BC]
     366.  00:C902                    ~ 		INC BC
     367.  00:C902                    ~ 		LD [IX+(CHNPRM_OnOffD-12)],A
     368.  00:C902                    ~ 		LD [IX+(CHNPRM_COnOff-12)],A
     369.  00:C902                    ~ 		LD A,[BC]
     370.  00:C902                    ~ 		INC BC
     371.  00:C902                    ~ 		LD [IX+(CHNPRM_OffOnD-12)],A
     372.  00:C902                    ~ 		XOR A
     373.  00:C902                    ~ 		LD [IX+(CHNPRM_TSlCnt-12)],A
     374.  00:C902                    ~ 		LD [IX+(CHNPRM_CrTnSl-12)],A
     375.  00:C902                    ~ 		LD [IX+(CHNPRM_CrTnSl+1-12)],A
     376.  00:C902                    ~ 		RET
     377.  00:C902                    ~ 
     378.  00:C902                    ~ C_ENGLS:	LD A,[BC]
     379.  00:C902                    ~ 		INC BC
     380.  00:C902                    ~ 		LD [PT3_Env_Del],A
     381.  00:C902                    ~ 		LD [CurEDel],A
     382.  00:C902                    ~ 		LD A,[BC]
     383.  00:C902                    ~ 		INC BC
     384.  00:C902                    ~ 		LD L,A
     385.  00:C902                    ~ 		LD A,[BC]
     386.  00:C902                    ~ 		INC BC
     387.  00:C902                    ~ 		LD H,A
     388.  00:C902                    ~ 		LD [PT3_ESldAdd],HL
     389.  00:C902                    ~ 		RET
     390.  00:C902                    ~ 
     391.  00:C902                    ~ C_DELAY:	LD A,[BC]
     392.  00:C902                    ~ 		INC BC
     393.  00:C902                    ~ 		LD [PT3_Delay],A
     394.  00:C902                    ~ 		RET
     395.  00:C902                    ~ 	
     396.  00:C902                    ~ SETENV:		LD [IX+(CHNPRM_Env_En-12)],E
     397.  00:C902                    ~ 		LD [AYREGS+AR_EnvTp],A
     398.  00:C902                    ~ 		LD A,[BC]
     399.  00:C902                    ~ 		INC BC
     400.  00:C902                    ~ 		LD H,A
     401.  00:C902                    ~ 		LD A,[BC]
     402.  00:C902                    ~ 		INC BC
     403.  00:C902                    ~ 		LD L,A
     404.  00:C902                    ~ 		LD [EnvBase],HL
     405.  00:C902                    ~ 		XOR A
     406.  00:C902                    ~ 		LD [IX+(CHNPRM_PsInOr-12)],A
     407.  00:C902                    ~ 		LD [CurEDel],A
     408.  00:C902                    ~ 		LD H,A
     409.  00:C902                    ~ 		LD L,A
     410.  00:C902                    ~ 		LD [CurESld],HL
     411.  00:C902                    ~ C_NOP:		RET
     412.  00:C902                    ~ 
     413.  00:C902                    ~ SETORN:		ADD A,A
     414.  00:C902                    ~ 		LD E,A
     415.  00:C902                    ~ 		LD D,0
     416.  00:C902                    ~ 		LD [IX+(CHNPRM_PsInOr-12)],D
     417.  00:C902                    ~ 		LD HL,[PT3_OrnPtrs]
     418.  00:C902                    ~ 		ADD HL,DE
     419.  00:C902                    ~ 		LD E,[HL]
     420.  00:C902                    ~ 		INC HL
     421.  00:C902                    ~ 		LD D,[HL]
     422.  00:C902                    ~ 		LD HL,[PT3_MODADDR]
     423.  00:C902                    ~ 		ADD HL,DE
     424.  00:C902                    ~ 		LD [IX+(CHNPRM_OrnPtr-12)],L
     425.  00:C902                    ~ 		LD [IX+(CHNPRM_OrnPtr+1-12)],H
     426.  00:C902                    ~ 		RET
     427.  00:C902                    ~ 
     428.  00:C902                    ~ 		;ALL 16 ADDRESSES TO PROTECT FROM BROKEN PT3 MODULES
     429.  00:C902                    ~ SPCCOMS:	dw C_NOP
     430.  00:C902                    ~ 		dw C_GLISS
     431.  00:C902                    ~ 		dw C_PORTM
     432.  00:C902                    ~ 		dw C_SMPOS
     433.  00:C902                    ~ 		dw C_ORPOS
     434.  00:C902                    ~ 		dw C_VIBRT
     435.  00:C902                    ~ 		dw C_NOP
     436.  00:C902                    ~ 		dw C_NOP
     437.  00:C902                    ~ 		dw C_ENGLS
     438.  00:C902                    ~ 		dw C_DELAY
     439.  00:C902                    ~ 		dw C_NOP
     440.  00:C902                    ~ 		dw C_NOP
     441.  00:C902                    ~ 		dw C_NOP
     442.  00:C902                    ~ 		dw C_NOP
     443.  00:C902                    ~ 		dw C_NOP
     444.  00:C902                    ~ 		dw C_NOP
     445.  00:C902                    ~ .HL_VALUE:	equ (SPCCOMS+$DF20) MOD 65536; Adapted from original Speccy version (saves 6 bytes)
     446.  00:C902                    ~ 
     447.  00:C902                    ~ CHREGS:		XOR A
     448.  00:C902                    ~ 		LD [AYREGS+AR_AmplC],A
     449.  00:C902                    ~ 		BIT 0,[IX+CHNPRM_Flags]
     450.  00:C902                    ~ 		PUSH HL
     451.  00:C902                    ~ 		JP Z,.CH_EXIT
     452.  00:C902                    ~ 		LD [PT3_CSP],SP
     453.  00:C902                    ~ 		LD L,[IX+CHNPRM_OrnPtr]
     454.  00:C902                    ~ 		LD H,[IX+CHNPRM_OrnPtr+1]
     455.  00:C902                    ~ 		LD SP,HL
     456.  00:C902                    ~ 		POP DE
     457.  00:C902                    ~ 		LD H,A
     458.  00:C902                    ~ 		LD A,[IX+CHNPRM_PsInOr]
     459.  00:C902                    ~ 		LD L,A
     460.  00:C902                    ~ 		ADD HL,SP
     461.  00:C902                    ~ 		INC A
     462.  00:C902                    ~ 		CP D
     463.  00:C902                    ~ 		JR C,.CH_ORPS
     464.  00:C902                    ~ 		LD A,E
     465.  00:C902                    ~ .CH_ORPS:	LD [IX+CHNPRM_PsInOr],A
     466.  00:C902                    ~ 		LD A,[IX+CHNPRM_Note]
     467.  00:C902                    ~ 		ADD A,[HL]
     468.  00:C902                    ~ 		JP P,.CH_NTP
     469.  00:C902                    ~ 		XOR A
     470.  00:C902                    ~ .CH_NTP:	CP 96
     471.  00:C902                    ~ 		JR C,.CH_NOK
     472.  00:C902                    ~ 		LD A,95
     473.  00:C902                    ~ .CH_NOK:	ADD A,A
     474.  00:C902                    ~ 		EX AF,AF
     475.  00:C902                    ~ 		LD L,[IX+CHNPRM_SamPtr]
     476.  00:C902                    ~ 		LD H,[IX+CHNPRM_SamPtr+1]
     477.  00:C902                    ~ 		LD SP,HL
     478.  00:C902                    ~ 		POP DE
     479.  00:C902                    ~ 		LD H,0
     480.  00:C902                    ~ 		LD A,[IX+CHNPRM_PsInSm]
     481.  00:C902                    ~ 		LD B,A
     482.  00:C902                    ~ 		ADD A,A
     483.  00:C902                    ~ 		ADD A,A
     484.  00:C902                    ~ 		LD L,A
     485.  00:C902                    ~ 		ADD HL,SP
     486.  00:C902                    ~ 		LD SP,HL
     487.  00:C902                    ~ 		LD A,B
     488.  00:C902                    ~ 		INC A
     489.  00:C902                    ~ 		CP D
     490.  00:C902                    ~ 		JR C,.CH_SMPS
     491.  00:C902                    ~ 		LD A,E
     492.  00:C902                    ~ .CH_SMPS:	LD [IX+CHNPRM_PsInSm],A
     493.  00:C902                    ~ 		POP BC
     494.  00:C902                    ~ 		POP HL
     495.  00:C902                    ~ 		LD E,[IX+CHNPRM_TnAcc]
     496.  00:C902                    ~ 		LD D,[IX+CHNPRM_TnAcc+1]
     497.  00:C902                    ~ 		ADD HL,DE
     498.  00:C902                    ~ 		BIT 6,B
     499.  00:C902                    ~ 		JR Z,.CH_NOAC
     500.  00:C902                    ~ 		LD [IX+CHNPRM_TnAcc],L
     501.  00:C902                    ~ 		LD [IX+CHNPRM_TnAcc+1],H
     502.  00:C902                    ~ .CH_NOAC:	EX DE,HL
     503.  00:C902                    ~ 		EX AF,AF
     504.  00:C902                    ~ 		LD L,A
     505.  00:C902                    ~ 		LD H,0
     506.  00:C902                    ~ 		LD SP,NT_
     507.  00:C902                    ~ 		ADD HL,SP
     508.  00:C902                    ~ 		LD SP,HL
     509.  00:C902                    ~ 		POP HL
     510.  00:C902                    ~ 		ADD HL,DE
     511.  00:C902                    ~ 		LD E,[IX+CHNPRM_CrTnSl]
     512.  00:C902                    ~ 		LD D,[IX+CHNPRM_CrTnSl+1]
     513.  00:C902                    ~ 		ADD HL,DE
     514.  00:C902                    ~ 		LD SP,[PT3_CSP]
     515.  00:C902                    ~ 		EX [SP],HL
     516.  00:C902                    ~ 		XOR A
     517.  00:C902                    ~ 		OR [IX+CHNPRM_TSlCnt]
     518.  00:C902                    ~ 		JR Z,.CH_AMP
     519.  00:C902                    ~ 		DEC [IX+CHNPRM_TSlCnt]
     520.  00:C902                    ~ 		JR NZ,.CH_AMP
     521.  00:C902                    ~ 		LD A,[IX+CHNPRM_TnSlDl]
     522.  00:C902                    ~ 		LD [IX+CHNPRM_TSlCnt],A
     523.  00:C902                    ~ 		LD L,[IX+CHNPRM_TSlStp]
     524.  00:C902                    ~ 		LD H,[IX+CHNPRM_TSlStp+1]
     525.  00:C902                    ~ 		LD A,H
     526.  00:C902                    ~ 		ADD HL,DE
     527.  00:C902                    ~ 		LD [IX+CHNPRM_CrTnSl],L
     528.  00:C902                    ~ 		LD [IX+CHNPRM_CrTnSl+1],H
     529.  00:C902                    ~ 		BIT 2,[IX+CHNPRM_Flags]
     530.  00:C902                    ~ 		JR NZ,.CH_AMP
     531.  00:C902                    ~ 		LD E,[IX+CHNPRM_TnDelt]
     532.  00:C902                    ~ 		LD D,[IX+CHNPRM_TnDelt+1]
     533.  00:C902                    ~ 		AND A
     534.  00:C902                    ~ 		JR Z,.CH_STPP
     535.  00:C902                    ~ 		EX DE,HL
     536.  00:C902                    ~ .CH_STPP:	SBC HL,DE
     537.  00:C902                    ~ 		JP M,.CH_AMP
     538.  00:C902                    ~ 		LD A,[IX+CHNPRM_SlToNt]
     539.  00:C902                    ~ 		LD [IX+CHNPRM_Note],A
     540.  00:C902                    ~ 		XOR A
     541.  00:C902                    ~ 		LD [IX+CHNPRM_TSlCnt],A
     542.  00:C902                    ~ 		LD [IX+CHNPRM_CrTnSl],A
     543.  00:C902                    ~ 		LD [IX+CHNPRM_CrTnSl+1],A
     544.  00:C902                    ~ .CH_AMP:	LD A,[IX+CHNPRM_CrAmSl]
     545.  00:C902                    ~ 		BIT 7,C
     546.  00:C902                    ~ 		JR Z,.CH_NOAM
     547.  00:C902                    ~ 		BIT 6,C
     548.  00:C902                    ~ 		JR Z,.CH_AMIN
     549.  00:C902                    ~ 		CP 15
     550.  00:C902                    ~ 		JR Z,.CH_NOAM
     551.  00:C902                    ~ 		INC A
     552.  00:C902                    ~ 		JR .CH_SVAM
     553.  00:C902                    ~ .CH_AMIN:	CP -15
     554.  00:C902                    ~ 		JR Z,.CH_NOAM
     555.  00:C902                    ~ 		DEC A
     556.  00:C902                    ~ .CH_SVAM:	LD [IX+CHNPRM_CrAmSl],A
     557.  00:C902                    ~ .CH_NOAM:	LD L,A
     558.  00:C902                    ~ 		LD A,B
     559.  00:C902                    ~ 		AND 15
     560.  00:C902                    ~ 		ADD A,L
     561.  00:C902                    ~ 		JP P,.CH_APOS
     562.  00:C902                    ~ 		XOR A
     563.  00:C902                    ~ .CH_APOS:	CP 16
     564.  00:C902                    ~ 		JR C,.CH_VOL
     565.  00:C902                    ~ 		LD A,15
     566.  00:C902                    ~ .CH_VOL:	OR [IX+CHNPRM_Volume]
     567.  00:C902                    ~ 		LD L,A
     568.  00:C902                    ~ 		LD H,0
     569.  00:C902                    ~ 		LD DE,VT_
     570.  00:C902                    ~ 		ADD HL,DE
     571.  00:C902                    ~ 		LD A,[HL]
     572.  00:C902                    ~ .CH_ENV:	BIT 0,C
     573.  00:C902                    ~ 		JR NZ,.CH_NOEN
     574.  00:C902                    ~ 		OR [IX+CHNPRM_Env_En]
     575.  00:C902                    ~ .CH_NOEN:	LD [AYREGS+AR_AmplC],A
     576.  00:C902                    ~ 		BIT 7,B
     577.  00:C902                    ~ 		LD A,C
     578.  00:C902                    ~ 		JR Z,.NO_ENSL
     579.  00:C902                    ~ 		RLA
     580.  00:C902                    ~ 		RLA
     581.  00:C902                    ~ 		SRA A
     582.  00:C902                    ~ 		SRA A
     583.  00:C902                    ~ 		SRA A
     584.  00:C902                    ~ 		ADD A,[IX+CHNPRM_CrEnSl] ;SEE COMMENT BELOW
     585.  00:C902                    ~ 		BIT 5,B
     586.  00:C902                    ~ 		JR Z,.NO_ENAC
     587.  00:C902                    ~ 		LD [IX+CHNPRM_CrEnSl],A
     588.  00:C902                    ~ .NO_ENAC:	LD HL,PT3_AddToEn
     589.  00:C902                    ~ 		ADD A,[HL] ;BUG IN PT3 - NEED WORD HERE.
     590.  00:C902                    ~ 			   ;FIX IT IN NEXT VERSION?
     591.  00:C902                    ~ 		LD [HL],A
     592.  00:C902                    ~ 		JR .CH_MIX
     593.  00:C902                    ~ .NO_ENSL:	RRA
     594.  00:C902                    ~ 		ADD A,[IX+CHNPRM_CrNsSl]
     595.  00:C902                    ~ 		LD [AddToNs],A
     596.  00:C902                    ~ 		BIT 5,B
     597.  00:C902                    ~ 		JR Z,.CH_MIX
     598.  00:C902                    ~ 		LD [IX+CHNPRM_CrNsSl],A
     599.  00:C902                    ~ .CH_MIX:	LD A,B
     600.  00:C902                    ~ 		RRA
     601.  00:C902                    ~ 		AND $48
     602.  00:C902                    ~ .CH_EXIT:	LD HL,AYREGS+AR_Mixer
     603.  00:C902                    ~ 		OR [HL]
     604.  00:C902                    ~ 		RRCA
     605.  00:C902                    ~ 		LD [HL],A
     606.  00:C902                    ~ 		POP HL
     607.  00:C902                    ~ 		XOR A
     608.  00:C902                    ~ 		OR [IX+CHNPRM_COnOff]
     609.  00:C902                    ~ 		RET Z
     610.  00:C902                    ~ 		DEC [IX+CHNPRM_COnOff]
     611.  00:C902                    ~ 		RET NZ
     612.  00:C902                    ~ 		XOR [IX+CHNPRM_Flags]
     613.  00:C902                    ~ 		LD [IX+CHNPRM_Flags],A
     614.  00:C902                    ~ 		RRA
     615.  00:C902                    ~ 		LD A,[IX+CHNPRM_OnOffD]
     616.  00:C902                    ~ 		JR C,.CH_ONDL
     617.  00:C902                    ~ 		LD A,[IX+CHNPRM_OffOnD]
     618.  00:C902                    ~ .CH_ONDL:	LD [IX+CHNPRM_COnOff],A
     619.  00:C902                    ~ 		RET
     620.  00:C902                    ~ 
     621.  00:C902                    ~ PT3_PLAY:
     622.  00:C902                    ~ 		ld a,(mutesong)
     623.  00:C902                    ~ 		or a
     624.  00:C902                    ~ 		ret nz
     625.  00:C902                    ~ 		
     626.  00:C902                    ~ 		LD [PT3_AddToEn],A
     627.  00:C902                    ~ 		LD [AYREGS+AR_Mixer],A
     628.  00:C902                    ~ 		DEC A
     629.  00:C902                    ~ 		LD [AYREGS+AR_EnvTp],A
     630.  00:C902                    ~ 		LD HL,DelyCnt
     631.  00:C902                    ~ 		DEC [HL]
     632.  00:C902                    ~ 		JP NZ,.PL2
     633.  00:C902                    ~ 		LD HL,ChanA+CHNPRM_NtSkCn
     634.  00:C902                    ~ 		DEC [HL]
     635.  00:C902                    ~ 		JR NZ,.PL1B
     636.  00:C902                    ~ 		LD BC,[PT3_AdInPtA]
     637.  00:C902                    ~ 		LD A,[BC]
     638.  00:C902                    ~ 		AND A
     639.  00:C902                    ~ 		JR NZ,.PL1A
     640.  00:C902                    ~ 		LD D,A
     641.  00:C902                    ~ 		LD [Ns_Base],A
     642.  00:C902                    ~ 		LD HL,[PT3_CrPsPtr]
     643.  00:C902                    ~ 		INC HL
     644.  00:C902                    ~ 		LD A,[HL]
     645.  00:C902                    ~ 		INC A
     646.  00:C902                    ~ 		JR NZ,.PLNLP
     647.  00:C902                    ~ 		CALL CHECKLP
     648.  00:C902                    ~ 		LD HL,[PT3_LPosPtr]
     649.  00:C902                    ~ 		LD A,[HL]
     650.  00:C902                    ~ 		INC A
     651.  00:C902                    ~ .PLNLP:	LD [PT3_CrPsPtr],HL
     652.  00:C902                    ~ 		DEC A
     653.  00:C902                    ~ 		ADD A,A
     654.  00:C902                    ~ 		LD E,A
     655.  00:C902                    ~ 		RL D
     656.  00:C902                    ~ 		LD HL,[PT3_PatsPtr]
     657.  00:C902                    ~ 		ADD HL,DE
     658.  00:C902                    ~ 		LD DE,[PT3_MODADDR]
     659.  00:C902                    ~ 		LD [PT3_PSP],SP
     660.  00:C902                    ~ 		LD SP,HL
     661.  00:C902                    ~ 		POP HL
     662.  00:C902                    ~ 		ADD HL,DE
     663.  00:C902                    ~ 		LD B,H
     664.  00:C902                    ~ 		LD C,L
     665.  00:C902                    ~ 		POP HL
     666.  00:C902                    ~ 		ADD HL,DE
     667.  00:C902                    ~ 		LD [PT3_AdInPtB],HL
     668.  00:C902                    ~ 		POP HL
     669.  00:C902                    ~ 		ADD HL,DE
     670.  00:C902                    ~ 		LD [PT3_AdInPtC],HL
     671.  00:C902                    ~ 		LD SP,[PT3_PSP]
     672.  00:C902                    ~ 
     673.  00:C902                    ~ .PL1A:		LD IX,ChanA+12
     674.  00:C902                    ~ 		CALL PTDECOD
     675.  00:C902                    ~ 		LD [PT3_AdInPtA],BC
     676.  00:C902                    ~ 
     677.  00:C902                    ~ .PL1B:		LD HL,ChanB+CHNPRM_NtSkCn
     678.  00:C902                    ~ 		DEC [HL]
     679.  00:C902                    ~ 		JR NZ,.PL1C
     680.  00:C902                    ~ 		LD IX,ChanB+12
     681.  00:C902                    ~ 		LD BC,[PT3_AdInPtB]
     682.  00:C902                    ~ 		CALL PTDECOD
     683.  00:C902                    ~ 		LD [PT3_AdInPtB],BC
     684.  00:C902                    ~ 
     685.  00:C902                    ~ .PL1C:		LD HL,ChanC+CHNPRM_NtSkCn
     686.  00:C902                    ~ 		DEC [HL]
     687.  00:C902                    ~ 		JR NZ,.PL1D
     688.  00:C902                    ~ 		LD IX,ChanC+12
     689.  00:C902                    ~ 		LD BC,[PT3_AdInPtC]
     690.  00:C902                    ~ 		CALL PTDECOD
     691.  00:C902                    ~ 		LD [PT3_AdInPtC],BC
     692.  00:C902                    ~ 
     693.  00:C902                    ~ .PL1D:		LD A,[PT3_Delay]
     694.  00:C902                    ~ 		LD [DelyCnt],A
     695.  00:C902                    ~ 
     696.  00:C902                    ~ .PL2:		LD IX,ChanA
     697.  00:C902                    ~ 		LD HL,[AYREGS+AR_TonA]
     698.  00:C902                    ~ 		CALL CHREGS
     699.  00:C902                    ~ 		LD [AYREGS+AR_TonA],HL
     700.  00:C902                    ~ 		LD A,[AYREGS+AR_AmplC]
     701.  00:C902                    ~ 		LD [AYREGS+AR_AmplA],A
     702.  00:C902                    ~ 		LD IX,ChanB
     703.  00:C902                    ~ 		LD HL,[AYREGS+AR_TonB]
     704.  00:C902                    ~ 		CALL CHREGS
     705.  00:C902                    ~ 		LD [AYREGS+AR_TonB],HL
     706.  00:C902                    ~ 		LD A,[AYREGS+AR_AmplC]
     707.  00:C902                    ~ 		LD [AYREGS+AR_AmplB],A
     708.  00:C902                    ~ 		LD IX,ChanC
     709.  00:C902                    ~ 		LD HL,[AYREGS+AR_TonC]
     710.  00:C902                    ~ 		CALL CHREGS
     711.  00:C902                    ~ 		LD [AYREGS+AR_TonC],HL
     712.  00:C902                    ~ 
     713.  00:C902                    ~ 		LD HL,[Ns_Base_AddToNs]
     714.  00:C902                    ~ 		LD A,H
     715.  00:C902                    ~ 		ADD A,L
     716.  00:C902                    ~ 		LD [AYREGS+AR_Noise],A
     717.  00:C902                    ~ 
     718.  00:C902                    ~ 		LD A,[PT3_AddToEn]
     719.  00:C902                    ~ 		LD E,A
     720.  00:C902                    ~ 		ADD A,A
     721.  00:C902                    ~ 		SBC A,A
     722.  00:C902                    ~ 		LD D,A
     723.  00:C902                    ~ 		LD HL,[EnvBase]
     724.  00:C902                    ~ 		ADD HL,DE
     725.  00:C902                    ~ 		LD DE,[CurESld]
     726.  00:C902                    ~ 		ADD HL,DE
     727.  00:C902                    ~ 		LD [AYREGS+AR_Env],HL
     728.  00:C902                    ~ 
     729.  00:C902                    ~ 		XOR A
     730.  00:C902                    ~ 		LD HL,CurEDel
     731.  00:C902                    ~ 		OR [HL]
     732.  00:C902                    ~ 		RET Z
     733.  00:C902                    ~ 		DEC [HL]
     734.  00:C902                    ~ 		RET NZ
     735.  00:C902                    ~ 		LD A,[PT3_Env_Del]
     736.  00:C902                    ~ 		LD [HL],A
     737.  00:C902                    ~ 		LD HL,[PT3_ESldAdd]
     738.  00:C902                    ~ 		ADD HL,DE
     739.  00:C902                    ~ 		LD [CurESld],HL
     740.  00:C902                    ~ 		RET
     741.  00:C902                    ~ 
     742.  00:C902                    ~ EMPTYSAMORN: 	db 0,1,0,$90 ;delete $90 if you don't need default sample
     743.  00:C902                    ~ 
     744.  00:C902                    ~ NT_:	;Note table 2 [if you use another in Vortex Tracker II copy it and paste
     745.  00:C902                    ~ 	;it from TABLES.TXT]
     746.  00:C902                    ~ 
     747.  00:C902                    ~ 		dw $0D10,$0C55,$0BA4,$0AFC,$0A5F,$09CA,$093D,$08B8,$083B,$07C5,$0755,$06EC
     748.  00:C902                    ~ 		dw $0688,$062A,$05D2,$057E,$052F,$04E5,$049E,$045C,$041D,$03E2,$03AB,$0376
     749.  00:C902                    ~ 		dw $0344,$0315,$02E9,$02BF,$0298,$0272,$024F,$022E,$020F,$01F1,$01D5,$01BB
     750.  00:C902                    ~ 		dw $01A2,$018B,$0174,$0160,$014C,$0139,$0128,$0117,$0107,$00F9,$00EB,$00DD
     751.  00:C902                    ~ 		dw $00D1,$00C5,$00BA,$00B0,$00A6,$009D,$0094,$008C,$0084,$007C,$0075,$006F
     752.  00:C902                    ~ 		dw $0069,$0063,$005D,$0058,$0053,$004E,$004A,$0046,$0042,$003E,$003B,$0037
     753.  00:C902                    ~ 		dw $0034,$0031,$002F,$002C,$0029,$0027,$0025,$0023,$0021,$001F,$001D,$001C
     754.  00:C902                    ~ 		dw $001A,$0019,$0017,$0016,$0015,$0014,$0012,$0011,$0010,$000F,$000E,$000D
     755.  00:C902                    ~ 
     756.  00:C902                    ~ ;
     757.  00:C902                    ~ ; WARNING: This routine must always exist
     758.  00:C902                    ~ ; Enables music looping
     759.  00:C902                    ~ ;	
     760.  00:C902                    ~ music_loopon:
     761.  00:C902                    ~ 		xor a
     762.  00:C902                    ~  		ld (PT3_SETUP),a  ; loop enabled!
     763.  00:C902                    ~ 		ret
     764.  00:C902                    ~ 
     765.  00:C902                    ~ ;
     766.  00:C902                    ~ ; WARNING: This routine must always exist
     767.  00:C902                    ~ ; Disables music looping
     768.  00:C902                    ~ ;	
     769.  00:C902                    ~ music_loopoff:
     770.  00:C902                    ~ 		ld a,1
     771.  00:C902                    ~  		ld (PT3_SETUP),a  ; no loop!
     772.  00:C902                    ~ 		ret
     773.  00:C902                    ~ 		
     774.  00:C902                    ~ ;
     775.  00:C902                    ~ ; WARNING: This routine must always exist
     776.  00:C902                    ~ ; Sets the music to be played
     777.  00:C902                    ~ ;	
     778.  00:C902                    ~ music_set:
     779.  00:C902                    ~ 		or a
     780.  00:C902                    ~ 		jr z,music_mute
     781.  00:C902                    ~ 		dec a
     782.  00:C902                    ~ 		ld hl,songtab
     783.  00:C902                    ~ 		add a,a             ; double accumulator.
     784.  00:C902                    ~ 		add a,l			
     785.  00:C902                    ~ 		ld l,a			
     786.  00:C902                    ~ 		adc a,h			
     787.  00:C902                    ~ 		sub l			
     788.  00:C902                    ~ 		ld h,a			
     789.  00:C902                    ~ 		ld a,(hl)
     790.  00:C902                    ~ 		inc	hl
     791.  00:C902                    ~ 		ld h,(hl)
     792.  00:C902                    ~ 		ld l,a				; HL=song pointer	
     793.  00:C902                    ~ 		xor a
     794.  00:C902                    ~ 		ld (mutesong),a	
     795.  00:C902                    ~ 		jp PT3_INIT
     796.  00:C902                    ~ ;
     797.  00:C902                    ~ ; WARNING: This routine must always exist
     798.  00:C902                    ~ ; Plays a music frame. To be called from an interrupt
     799.  00:C902                    ~ ;	
     800.  00:C902                    ~ music_play:
     801.  00:C902                    ~ 		jp PT3_PLAY
     802.  00:C902                    ~ 
     803.  00:C902                    ~ ;
     804.  00:C902                    ~ ; WARNING: This routine must always exist
     805.  00:C902                    ~ ; Mutes music playing (in this engine it also works as a way to initialize)
     806.  00:C902                    ~ ;
     807.  00:C902                    ~ music_init:	
     808.  00:C902                    ~ music_mute:	
     809.  00:C902                    ~ 		ld a,1
     810.  00:C902                    ~ 		ld (mutesong),a
     811.  00:C902                    ~ 
     812.  00:C902                    ~ resetregs:
     813.  00:C902                    ~ 		ld hl,AYREGS
     814.  00:C902                    ~ 		ld de,AYREGS+1
     815.  00:C902                    ~ 		ld bc,13
     816.  00:C902                    ~ 		ld (hl),0
     817.  00:C902                    ~ 		ldir
     818.  00:C902                    ~ 		ret
     819.  00:C902                    ~ 		; needs to continue with psgrout
     820.  00:C902                    ~ ;
     821.  00:C902                    ~ ; WARNING: This routine must always exist
     822.  00:C902                    ~ ; Dumps buffer content (AYREGS) to PSG registers (0-13)
     823.  00:C902                    ~ ;		
     824.  00:C902                    ~ 		
     825.  00:C902                    ~ psgrout:	
     826.  00:C902                    ~ 		xor a
     827.  00:C902                    ~ ; --- fixes bits 6 and 7 of mixer ---
     828.  00:C902                    ~ 		ld	hl,AYREGS+AR_Mixer
     829.  00:C902                    ~ 		set	7,(hl)
     830.  00:C902                    ~ 		res	6,(hl)
     831.  00:C902                    ~ 
     832.  00:C902                    ~ 		ld c,MSX_PSGDW
     833.  00:C902                    ~ 		ld hl,AYREGS
     834.  00:C902                    ~ .lout:		
     835.  00:C902                    ~ 		out (MSX_PSGLW),a
     836.  00:C902                    ~ 		outi 
     837.  00:C902                    ~ 		inc a
     838.  00:C902                    ~ 		cp 13
     839.  00:C902                    ~ 		jr nz,.lout
     840.  00:C902                    ~ 		out (MSX_PSGLW),a
     841.  00:C902                    ~ 		ld a,(hl)
     842.  00:C902                    ~ 		and a
     843.  00:C902                    ~ 		ret m
     844.  00:C902                    ~ 		out (MSX_PSGDW),a
     845.  00:C902                    ~ 		ret
     846.  00:C902                    ~ 			
     847.  00:C902                    ~ 	endif
     848.  00:C902                      	
    8175   00:C902                      	include "ayFX-ROM.asm"
       1.  00:C902                      		; --- ayFX REPLAYER v1.31 ---
       2.  00:C902                      
       3.  00:C902                      		; --- v1.31	Fixed bug on previous version, only PSG channel C worked
       4.  00:C902                      		; --- v1.3	Fixed volume and Relative volume versions on the same file, conditional compilation
       5.  00:C902                      		; ---		Support for dynamic or fixed channel allocation
       6.  00:C902                      		; --- v1.2f/r	ayFX bank support
       7.  00:C902                      		; --- v1.11f/r	If a frame volume is zero then no AYREGS update
       8.  00:C902                      		; --- v1.1f/r	Fixed volume for all ayFX streams
       9.  00:C902                      		; --- v1.1	Explicit priority (as suggested by AR)
      10.  00:C902                      		; --- v1.0f	Bug fixed (error when using noise)
      11.  00:C902                      		; --- v1.0	Initial release
      12.  00:C902                      
      13.  00:C902                      		; --- DEFINE FX_RELATIVE AS 0 FOR FIXED VOLUME VERSION ---
      14.  00:C902                      		; --- DEFINE FX_RELATIVE AS 1 FOR RELATIVE VOLUME VERSION ---
      15.  00:C902                      		
      16.  00:C902                      		if XFLAG
      17.  00:C902                      
      18.  00:C902                      ;
      19.  00:C902                      ; WARNING: This routine must always exist
      20.  00:C902                      ; Setups the SFX playing routine (if needed)
      21.  00:C902                      ;					
      22.  00:C902                      sfx_init:
      23.  00:C902  21 17 CA            		ld hl,sfxbank
      24.  00:C905  CD 0B C9            		call ayFX_SETUP
      25.  00:C908  C3 EB C9            		jp resetregs
      26.  00:C90B                      
      27.  00:C90B                      ;
      28.  00:C90B                      ; WARNING: This routine must always exist
      29.  00:C90B                      ; Plays a frame of an ayFX stream. To be called from interrupt
      30.  00:C90B                      ;			
      31.  00:C90B  (00:C955)           sfx_play:	equ ayFX_PLAY
      32.  00:C90B                      		
      33.  00:C90B                      ;
      34.  00:C90B                      ; core routines
      35.  00:C90B                      ;
      36.  00:C90B                      ayFX_SETUP:	; ---          ayFX replayer setup          ---
      37.  00:C90B                      		; --- INPUT: HL -> pointer to the ayFX bank ---
      38.  00:C90B  22 5E 40            		ld	[ayFX_BANK],hl			; Current ayFX bank
      39.  00:C90E  3E 00               		ld a,FX_MODE				; a:=0
      40.  00:C910  32 5D 40            		ld	[ayFX_MODE],a			; Initial mode: fixed channel
      41.  00:C913  3E 01               		ld a,FX_CHANNEL				; Starting channel (=1=C)
      42.  00:C915  32 67 40            		ld	[ayFX_CHANNEL],a		; Updated
      43.  00:C918                      
      44.  00:C918                      ;ayFX_END:	; --- End of an ayFX stream ---
      45.  00:C918                      
      46.  00:C918                      ;
      47.  00:C918                      ; WARNING: This routine must always exist
      48.  00:C918                      ; Stops & mute a SFX playing
      49.  00:C918                      ;					
      50.  00:C918                      sfx_mute:
      51.  00:C918  3E FF               		ld	a,255				; Lowest ayFX priority		
      52.  00:C91A  32 60 40            		ld	[ayFX_PRIORITY],a	; Priority saved (not playing ayFX stream)
      53.  00:C91D                      	if ( YFLAG = 0 )	
      54.  00:C91D  C3 EB C9            		jp resetregs
      55.  00:C920                      	else
      56.  00:C920                    ~ 		ld a,(mutesong)
      57.  00:C920                    ~ 		or a
      58.  00:C920                    ~ 		jp nz,resetregs
      59.  00:C920                    ~ 		ld a,(ayFX_MODE)
      60.  00:C920                    ~ 		or a
      61.  00:C920                    ~ 		jp nz,resetregs
      62.  00:C920                    ~ 
      63.  00:C920                    ~ 		ld a,(ayFX_CHANNEL)
      64.  00:C920                    ~ 		ld b,a
      65.  00:C920                    ~ 		ld a,11
      66.  00:C920                    ~ 		sub b
      67.  00:C920                    ~ 		ld c,a
      68.  00:C920                    ~ 		ld hl,AYREGS
      69.  00:C920                    ~ 		ADD_HL_A
      70.  00:C920                    ~ 		ld (hl),0
      71.  00:C920                    ~ 		;
      72.  00:C920                    ~ 		ld b,9
      73.  00:C920                    ~ 		ld a,c
      74.  00:C920                    ~ 		sub 8
      75.  00:C920                    ~ 		ld c,a
      76.  00:C920                    ~ 		or a
      77.  00:C920                    ~ 		jr z,reset
      78.  00:C920                    ~ 		rlc b
      79.  00:C920                    ~ 		dec a
      80.  00:C920                    ~ 		jr z,reset
      81.  00:C920                    ~ 		rlc b
      82.  00:C920                    ~ reset:
      83.  00:C920                    ~ 		ld a,b
      84.  00:C920                    ~ 		ld	[AYREGS+7],a
      85.  00:C920                    ~ 		;
      86.  00:C920                    ~ 		ld hl,AYREGS
      87.  00:C920                    ~ 		ld a,c
      88.  00:C920                    ~ 		add a,a
      89.  00:C920                    ~ 		ADD_HL_A
      90.  00:C920                    ~ 		ld (hl),0
      91.  00:C920                    ~ 		inc hl
      92.  00:C920                    ~ 		ld (hl),0
      93.  00:C920                    ~ 		ret
      94.  00:C920                    ~ 	endif
      95.  00:C920                      
      96.  00:C920                      ;
      97.  00:C920                      ; WARNING: This routine must always exist
      98.  00:C920                      ; Initialize a SFX for playing
      99.  00:C920                      ;			
     100.  00:C920                      sfx_set:
     101.  00:C920                      		; ld c,0				; always maximum priority (no variable supported)
     102.  00:C920                      		
     103.  00:C920                      ayFX_INIT:	; ---     INIT A NEW ayFX STREAM     ---
     104.  00:C920                      		; --- INPUT: A -> sound to be played ---
     105.  00:C920                      		; ---        C -> sound priority     ---
     106.  00:C920  C5                  		push	bc				; Store bc in stack
     107.  00:C921  D5                  		push	de				; Store de in stack
     108.  00:C922  E5                  		push	hl				; Store hl in stack
     109.  00:C923                      		; --- Check if the index is in the bank ---
     110.  00:C923  47                  		ld	b,a					; b:=a (new ayFX stream index)
     111.  00:C924  2A 5E 40            		ld	hl,[ayFX_BANK]			; Current ayFX BANK
     112.  00:C927  7E                  		ld	a,[hl]				; Number of samples in the bank
     113.  00:C928  B7                  		or	a					; If zero (means 256 samples)...
     114.  00:C929  28 06               		jr	z,.CHECK_PRI			; ...goto .CHECK_PRI
     115.  00:C92B                      		; The bank has less than 256 samples
     116.  00:C92B  78                  		ld	a,b					; a:=b (new ayFX stream index)
     117.  00:C92C  BE                  		cp	[hl]				; If new index is not in the bank...
     118.  00:C92D  3E 02               		ld	a,2					; a:=2 (error 2: Sample not in the bank)
     119.  00:C92F  30 20               		jr	nc,.INIT_END			; ...we can't init it
     120.  00:C931                      .CHECK_PRI:	; --- Check if the new priority is lower than the current one ---
     121.  00:C931                      		; ---   Remember: 0 = highest priority, 15 = lowest priority  ---
     122.  00:C931  3A 60 40            		ld	a,[ayFX_PRIORITY]	; a:=Current ayFX stream priority
     123.  00:C934  B9                  		cp	c					; If new ayFX stream priority is lower than current one...
     124.  00:C935  3E 01               		ld	a,1					; a:=1 (error 1: A sample with higher priority is being played)
     125.  00:C937  38 18               		jr	c,.INIT_END			; ...we don't start the new ayFX stream
     126.  00:C939                      		; --- Set new priority ---
     127.  00:C939  79                  		ld	a,c					; a:=New priority
     128.  00:C93A  E6 0F               		and	$0F					; We mask the priority
     129.  00:C93C  32 60 40            		ld	[ayFX_PRIORITY],a	; new ayFX stream priority saved in RAM
     130.  00:C93F                      
     131.  00:C93F                       	if FX_RELATIVE			   
     132.  00:C93F                    ~ 		; --- Volume adjust using PT3 volume table ---
     133.  00:C93F                    ~ 		ld	c,a					; c:=New priority (fixed)
     134.  00:C93F                    ~ 		ld	a,15				; a:=15
     135.  00:C93F                    ~ 		sub	c					; a:=15-New priority = relative volume
     136.  00:C93F                    ~ 		jr	z,.INIT_NOSOUND		; If priority is 15 -> no sound output (volume is zero)
     137.  00:C93F                    ~ 		add	a,a					; a:=a*2
     138.  00:C93F                    ~ 		add	a,a					; a:=a*4
     139.  00:C93F                    ~ 		add	a,a					; a:=a*8
     140.  00:C93F                    ~ 		add	a,a					; a:=a*16
     141.  00:C93F                    ~ 		ld	e,a					; e:=a
     142.  00:C93F                    ~ 		ld	d,0					; de:=a
     143.  00:C93F                    ~ 		ld	hl,VT_				; hl:=PT3 volume table
     144.  00:C93F                    ~ 		add	hl,de				; hl is a pointer to the relative volume table
     145.  00:C93F                    ~ 		ld	[ayFX_VT],hl		; Save pointer
     146.  00:C93F                    ~ 	endif
     147.  00:C93F                      
     148.  00:C93F                      		; --- Calculate the pointer to the new ayFX stream ---
     149.  00:C93F  ED 5B 5E 40         		ld	de,[ayFX_BANK]		; de:=Current ayFX bank
     150.  00:C943  13                  		inc	de					; de points to the increments table of the bank
     151.  00:C944  68                  		ld	l,b					; l:=b (new ayFX stream index)
     152.  00:C945  26 00               		ld	h,0					; hl:=b (new ayFX stream index)
     153.  00:C947  29                  		add	hl,hl				; hl:=hl*2
     154.  00:C948  19                  		add	hl,de				; hl:=hl+de (hl points to the correct increment)
     155.  00:C949  5E                  		ld	e,[hl]				; e:=lower byte of the increment
     156.  00:C94A  23                  		inc	hl					; hl points to the higher byte of the correct increment
     157.  00:C94B  56                  		ld	d,[hl]				; de:=increment
     158.  00:C94C  19                  		add	hl,de				; hl:=hl+de (hl points to the new ayFX stream)		
     159.  00:C94D  22 61 40            		ld	[ayFX_POINTER],hl	; Pointer saved in RAM
     160.  00:C950  AF                  		xor	a					; a:=0 (no errors)
     161.  00:C951  E1                  .INIT_END:	pop	hl				; Retrieve hl from stack
     162.  00:C952  D1                  		pop	de					; Retrieve de from stack
     163.  00:C953  C1                  		pop	bc					; Retrieve bc from stack
     164.  00:C954  C9                  		ret						; Return
     165.  00:C955                      
     166.  00:C955                       	if FX_RELATIVE			   
     167.  00:C955                    ~ .INIT_NOSOUND:	; --- Init a sample with relative volume zero -> no sound output ---
     168.  00:C955                    ~ 		ld	a,255				; Lowest ayFX priority
     169.  00:C955                    ~ 		ld	[ayFX_PRIORITY],a	; Priority saved (not playing ayFX stream)
     170.  00:C955                    ~ 		jr	.INIT_END			; Jumps to .INIT_END
     171.  00:C955                    ~ 	endif
     172.  00:C955                      
     173.  00:C955                      ayFX_PLAY:	; --- PLAY A FRAME OF AN ayFX STREAM ---
     174.  00:C955  3A 60 40            		ld	a,[ayFX_PRIORITY]	; a:=Current ayFX stream priority
     175.  00:C958  B7                  		or	a					; If priority has bit 7 on...
     176.  00:C959  F8                  		ret	m					; ...return
     177.  00:C95A                      		; --- Calculate next ayFX channel (if needed) ---
     178.  00:C95A  3A 5D 40            		ld	a,[ayFX_MODE]		; ayFX mode
     179.  00:C95D  E6 01               		and	1					; If bit0=0 (fixed channel)...
     180.  00:C95F  28 08               		jr	z,.TAKECB			; ...skip channel changing
     181.  00:C961  21 67 40            		ld	hl,ayFX_CHANNEL		; Old ayFX playing channel
     182.  00:C964  35                  		dec	[hl]				; New ayFX playing channel
     183.  00:C965  20 02               		jr	nz,.TAKECB			; If not zero jump to .TAKECB
     184.  00:C967  36 03               		ld	[hl],3				; If zero -> set channel 3
     185.  00:C969                      .TAKECB:	; --- Extract control byte from stream ---
     186.  00:C969  2A 61 40            		ld	hl,[ayFX_POINTER]	; Pointer to the current ayFX stream
     187.  00:C96C  4E                  		ld	c,[hl]				; c:=Control byte
     188.  00:C96D  23                  		inc	hl					; Increment pointer
     189.  00:C96E                      		; --- Check if there's new tone on stream ---
     190.  00:C96E  CB 69               		bit	5,c					; If bit 5 c is off...
     191.  00:C970  28 08               		jr	z,.CHECK_NN			; ...jump to .CHECK_NN (no new tone)
     192.  00:C972                      		; --- Extract new tone from stream ---
     193.  00:C972  5E                  		ld	e,[hl]				; e:=lower byte of new tone
     194.  00:C973  23                  		inc	hl					; Increment pointer
     195.  00:C974  56                  		ld	d,[hl]				; d:=higher byte of new tone
     196.  00:C975  23                  		inc	hl					; Increment pointer
     197.  00:C976  ED 53 63 40         		ld	[ayFX_TONE],de		; ayFX tone updated
     198.  00:C97A                      .CHECK_NN:	; --- Check if there's new noise on stream ---
     199.  00:C97A  CB 71               		bit	6,c					; if bit 6 c is off...
     200.  00:C97C  28 0A               		jr	z,.SETPOINTER		; ...jump to .SETPOINTER (no new noise)
     201.  00:C97E                      		; --- Extract new noise from stream ---
     202.  00:C97E  7E                  		ld	a,[hl]				; a:=New noise
     203.  00:C97F  23                  		inc	hl					; Increment pointer
     204.  00:C980  FE 20               		cp	$20					; If it's an illegal value of noise (used to mark end of stream)...
     205.  00:C982  CA 18 C9            		jp	z,sfx_mute			; ...jump to sfx_mute/ayFX_END
     206.  00:C985  32 65 40            		ld	[ayFX_NOISE],a		; ayFX noise updated
     207.  00:C988                      .SETPOINTER:	; --- Update ayFX pointer ---
     208.  00:C988  22 61 40            		ld	[ayFX_POINTER],hl	; Update ayFX stream pointer
     209.  00:C98B                      		; --- Extract volume ---
     210.  00:C98B  79                  		ld	a,c					; a:=Control byte
     211.  00:C98C  E6 0F               		and	$0F					; lower nibble
     212.  00:C98E                      
     213.  00:C98E                       	if FX_RELATIVE
     214.  00:C98E                    ~ 		; --- Fix the volume using PT3 Volume Table ---
     215.  00:C98E                    ~ 		ld	hl,[ayFX_VT]		; hl:=Pointer to relative volume table
     216.  00:C98E                    ~ 		ld	e,a					; e:=a (ayFX volume)
     217.  00:C98E                    ~ 		ld	d,0					; d:=0
     218.  00:C98E                    ~ 		add	hl,de				; hl:=hl+de (hl points to the relative volume of this frame
     219.  00:C98E                    ~ 		ld	a,[hl]				; a:=ayFX relative volume
     220.  00:C98E                    ~ 		or	a					; If relative volume is zero...
     221.  00:C98E                    ~ 	endif
     222.  00:C98E                      
     223.  00:C98E  32 66 40            		ld	[ayFX_VOLUME],a		; ayFX volume updated
     224.  00:C991  C8                  		ret	z					; ...return (don't copy ayFX values in to AYREGS)
     225.  00:C992                      		; -------------------------------------
     226.  00:C992                      		; --- COPY ayFX VALUES IN TO AYREGS ---
     227.  00:C992                      		; -------------------------------------
     228.  00:C992                      		; --- Set noise channel ---
     229.  00:C992  CB 79               		bit	7,c					; If noise is off...
     230.  00:C994  20 06               		jr	nz,.SETMASKS		; ...jump to .SETMASKS
     231.  00:C996  3A 65 40            		ld	a,[ayFX_NOISE]		; ayFX noise value
     232.  00:C999  32 6E 40            		ld	[AYREGS+6],a		; copied in to AYREGS (noise channel)
     233.  00:C99C                      .SETMASKS:	; --- Set mixer masks ---
     234.  00:C99C  79                  		ld	a,c					; a:=Control byte
     235.  00:C99D  E6 90               		and	$90					; Only bits 7 and 4 (noise and tone mask for psg reg 7)
     236.  00:C99F  FE 90               		cp	$90					; If no noise and no tone...
     237.  00:C9A1  C8                  		ret	z					; ...return (don't copy ayFX values in to AYREGS)
     238.  00:C9A2                      		; --- Copy ayFX values in to ARYREGS ---
     239.  00:C9A2  0F                  		rrca					; Rotate a to the right (1 TIME)
     240.  00:C9A3  0F                  		rrca					; Rotate a to the right (2 TIMES) (OR mask)
     241.  00:C9A4  16 DB               		ld	d,$DB				; d:=Mask for psg mixer (AND mask)
     242.  00:C9A6                      		; --- Dump to correct channel ---
     243.  00:C9A6  21 67 40            		ld	hl,ayFX_CHANNEL		; Next ayFX playing channel
     244.  00:C9A9  46                  		ld	b,[hl]				; Channel counter
     245.  00:C9AA                      .CHK1:		; --- Check if playing channel was 1 ---
     246.  00:C9AA  10 0D               		djnz	.CHK2			; Decrement and jump if channel was not 1
     247.  00:C9AC                      .PLAY_C:	; --- Play ayFX stream on channel C ---
     248.  00:C9AC  CD DB C9            		call	.SETMIXER		; Set PSG mixer value (returning a=ayFX volume and hl=ayFX tone)
     249.  00:C9AF  32 72 40            		ld	[AYREGS+10],a		; Volume copied in to AYREGS (channel C volume)
     250.  00:C9B2  CB 51               		bit	2,c					; If tone is off...
     251.  00:C9B4  C0                  		ret	nz					; ...return
     252.  00:C9B5  22 6C 40            		ld	[AYREGS+4],hl		; copied in to AYREGS (channel C tone)
     253.  00:C9B8  C9                  		ret						; Return
     254.  00:C9B9                      .CHK2:		; --- Check if playing channel was 2 ---
     255.  00:C9B9  CB 0A               		rrc	d					; Rotate right AND mask
     256.  00:C9BB  0F                  		rrca					; Rotate right OR mask
     257.  00:C9BC  10 0D               		djnz	.CHK3			; Decrement and jump if channel was not 2
     258.  00:C9BE                      .PLAY_B:	; --- Play ayFX stream on channel B ---
     259.  00:C9BE  CD DB C9            		call .SETMIXER			; Set PSG mixer value (returning a=ayFX volume and hl=ayFX tone)
     260.  00:C9C1  32 71 40            		ld	[AYREGS+9],a		; Volume copied in to AYREGS (channel B volume)
     261.  00:C9C4  CB 49               		bit	1,c					; If tone is off...
     262.  00:C9C6  C0                  		ret	nz				; ...return
     263.  00:C9C7  22 6A 40            		ld [AYREGS+2],hl		; copied in to AYREGS (channel B tone)
     264.  00:C9CA  C9                  		ret						; Return
     265.  00:C9CB                      .CHK3:		; --- Check if playing channel was 3 ---
     266.  00:C9CB  CB 0A               		rrc	d					; Rotate right AND mask
     267.  00:C9CD  0F                  		rrca					; Rotate right OR mask
     268.  00:C9CE                      .PLAY_A:	; --- Play ayFX stream on channel A ---
     269.  00:C9CE  CD DB C9            		call .SETMIXER			; Set PSG mixer value (returning a=ayFX volume and hl=ayFX tone)
     270.  00:C9D1  32 70 40            		ld	[AYREGS+8],a		; Volume copied in to AYREGS (channel A volume)
     271.  00:C9D4  CB 41               		bit	0,c					; If tone is off...
     272.  00:C9D6  C0                  		ret	nz					; ...return
     273.  00:C9D7  22 68 40            		ld	[AYREGS+0],hl		; copied in to AYREGS (channel A tone)
     274.  00:C9DA  C9                  		ret					; Return
     275.  00:C9DB                      .SETMIXER:	; --- Set PSG mixer value ---
     276.  00:C9DB  4F                  		ld	c,a					; c:=OR mask
     277.  00:C9DC  3A 6F 40            		ld	a,[AYREGS+7]		; a:=PSG mixer value
     278.  00:C9DF  A2                  		and	d					; AND mask
     279.  00:C9E0  B1                  		or	c					; OR mask
     280.  00:C9E1  32 6F 40            		ld	[AYREGS+7],a		; PSG mixer value updated
     281.  00:C9E4  3A 66 40            		ld	a,[ayFX_VOLUME]		; a:=ayFX volume value
     282.  00:C9E7  2A 63 40            		ld	hl,[ayFX_TONE]		; ayFX tone value
     283.  00:C9EA  C9                  		ret						; Return
     284.  00:C9EB                      
     285.  00:C9EB                      
     286.  00:C9EB                      	if ( YFLAG = 0 )	
     287.  00:C9EB                      
     288.  00:C9EB                      	; If there's no PSG player we need to provide these routines
     289.  00:C9EB                      resetregs:
     290.  00:C9EB  21 68 40            		ld hl,AYREGS
     291.  00:C9EE  11 69 40            		ld de,AYREGS+1
     292.  00:C9F1  01 0D 00            		ld bc,13
     293.  00:C9F4  36 00               		ld (hl),0
     294.  00:C9F6  ED B0               		ldir
     295.  00:C9F8  C9                  		ret
     296.  00:C9F9                      psgrout:	
     297.  00:C9F9  AF                  		xor a
     298.  00:C9FA                      ; --- fixes bits 6 and 7 of mixer ---
     299.  00:C9FA  21 6F 40            		ld	hl,AYREGS+AR_Mixer
     300.  00:C9FD  CB FE               		set	7,(hl)
     301.  00:C9FF  CB B6               		res	6,(hl)
     302.  00:CA01                      
     303.  00:CA01  0E A1               		ld c,MSX_PSGDW
     304.  00:CA03  21 68 40            		ld hl,AYREGS
     305.  00:CA06                      .lout:		
     306.  00:CA06  D3 A0               		out (MSX_PSGLW),a
     307.  00:CA08  ED A3               		outi 
     308.  00:CA0A  3C                  		inc a
     309.  00:CA0B  FE 0D               		cp 13
     310.  00:CA0D  20 F7               		jr nz,.lout
     311.  00:CA0F  D3 A0               		out (MSX_PSGLW),a
     312.  00:CA11  7E                  		ld a,(hl)
     313.  00:CA12  A7                  		and a
     314.  00:CA13  F8                  		ret m
     315.  00:CA14  D3 A1               		out (MSX_PSGDW),a
     316.  00:CA16  C9                  		ret
     317.  00:CA17                      		
     318.  00:CA17                      	if FX_RELATIVE
     319.  00:CA17                    ~ 
     320.  00:CA17                    ~ 		; --- UNCOMMENT THIS BLOCK if YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
     321.  00:CA17                    ~ VT_:	db 000h,000h,000h,000h,000h,000h,000h,000h,001h,001h,001h,001h,001h,001h,001h,001h
     322.  00:CA17                    ~ 		db 000h,000h,000h,000h,001h,001h,001h,001h,001h,001h,001h,001h,002h,002h,002h,002h
     323.  00:CA17                    ~ 		db 000h,000h,000h,001h,001h,001h,001h,001h,002h,002h,002h,002h,002h,003h,003h,003h
     324.  00:CA17                    ~ 		db 000h,000h,001h,001h,001h,001h,002h,002h,002h,002h,003h,003h,003h,003h,004h,004h
     325.  00:CA17                    ~ 		db 000h,000h,001h,001h,001h,002h,002h,002h,003h,003h,003h,004h,004h,004h,005h,005h
     326.  00:CA17                    ~ 		db 000h,000h,001h,001h,002h,002h,002h,003h,003h,004h,004h,004h,005h,005h,006h,006h
     327.  00:CA17                    ~ 		db 000h,000h,001h,001h,002h,002h,003h,003h,004h,004h,005h,005h,006h,006h,007h,007h
     328.  00:CA17                    ~ 		db 000h,001h,001h,002h,002h,003h,003h,004h,004h,005h,005h,006h,006h,007h,007h,008h
     329.  00:CA17                    ~ 		db 000h,001h,001h,002h,002h,003h,004h,004h,005h,005h,006h,007h,007h,008h,008h,009h
     330.  00:CA17                    ~ 		db 000h,001h,001h,002h,003h,003h,004h,005h,005h,006h,007h,007h,008h,009h,009h,00Ah
     331.  00:CA17                    ~ 		db 000h,001h,001h,002h,003h,004h,004h,005h,006h,007h,007h,008h,009h,00Ah,00Ah,00Bh
     332.  00:CA17                    ~ 		db 000h,001h,002h,002h,003h,004h,005h,006h,006h,007h,008h,009h,00Ah,00Ah,00Bh,00Ch
     333.  00:CA17                    ~ 		db 000h,001h,002h,003h,003h,004h,005h,006h,007h,008h,009h,00Ah,00Ah,00Bh,00Ch,00Dh
     334.  00:CA17                    ~ 		db 000h,001h,002h,003h,004h,005h,006h,007h,007h,008h,009h,00Ah,00Bh,00Ch,00Dh,00Eh
     335.  00:CA17                    ~ 		db 000h,001h,002h,003h,004h,005h,006h,007h,008h,009h,00Ah,00Bh,00Ch,00Dh,00Eh,00Fh 
     336.  00:CA17                    ~ 		; --- UNCOMMENT THIS if YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
     337.  00:CA17                    ~ 
     338.  00:CA17                    ~ 	endif
     339.  00:CA17                      	
     340.  00:CA17                      	endif
     341.  00:CA17                      
     342.  00:CA17                      	endif
     343.  00:CA17                      		
    8176   00:CA17                      
    8177   00:CA17                      	if XFLAG
    8178   00:CA17                      	
    8179   00:CA17  (0116)              sfxbank:	incbin "..\resources\sfx.afb"
    8180   00:CB2D                      	
    8181   00:CB2D                      	endif	
    8182   00:CB2D                      
    8183   00:CB2D                      ; Game-specific data and events code generated by the compiler ------------------
    8184   00:CB2D                      
    8185   00:CB2D                      ; ======================================================================================
    8186   00:CB2D                      ;
    8187   00:CB2D                      ; BEGINNING OF RAM AREA: The following data needs to be located in RAM!!!
    8188   00:CB2D                      ;
    8189   00:CB2D                      ; ======================================================================================
    8190   00:CB2D                      
    8191   00:CB2D                      ; Variables that NEED to be initialized and when in RAM mode can be autoinitialized for free
    8192   00:CB2D                      
    8193   00:CB2D                      	if DISTYPE!=ROM
    8194   00:CB2D                    ~ 
    8195   00:CB2D                    ~ score:		db "000000" 		; player's score  000000 .
    8196   00:CB2D                    ~ hiscor:		db "000000" 		; high score  000000 .
    8197   00:CB2D                    ~ bonus:		db "000000" 		; bonus  000000 .
    8198   00:CB2D                    ~ displ0:		db 0,0,0,13+128
    8199   00:CB2D                    ~ 
    8200   00:CB2D                    ~ 	if EFLAG
    8201   00:CB2D                    ~ 
    8202   00:CB2D                    ~ sndtyp:		db 0
    8203   00:CB2D                    ~ 
    8204   00:CB2D                    ~ 	endif
    8205   00:CB2D                    ~ 
    8206   00:CB2D                    ~ 	if PFLAG
    8207   00:CB2D                    ~ 
    8208   00:CB2D                    ~ shrplot:	dw prosh1
    8209   00:CB2D                    ~ 
    8210   00:CB2D                    ~ 	endif
    8211   00:CB2D                    ~ 
    8212   00:CB2D                    ~ 	if SFLAG
    8213   00:CB2D                    ~ 	
    8214   00:CB2D                    ~ scrlyoff:	db 1
    8215   00:CB2D                    ~ 	
    8216   00:CB2D                    ~ 	endif
    8217   00:CB2D                    ~ 	
    8218   00:CB2D                    ~ 	if MFLAG
    8219   00:CB2D                    ~ 	
    8220   00:CB2D                    ~ mod0:	db $C3,0,0
    8221   00:CB2D                    ~ mod1:	db $C3,0,0
    8222   00:CB2D                    ~ mod2:	db $C3,0,0
    8223   00:CB2D                    ~ 
    8224   00:CB2D                    ~ 	endif
    8225   00:CB2D                    ~ 
    8226   00:CB2D                    ~ 	ifdef DATA00
    8227   00:CB2D                    ~ rptr00:		dw rdat00
    8228   00:CB2D                    ~ 	endif
    8229   00:CB2D                    ~ 	ifdef DATA01
    8230   00:CB2D                    ~ rptr01:		dw rdat01
    8231   00:CB2D                    ~ 	endif
    8232   00:CB2D                    ~ 	ifdef DATA02
    8233   00:CB2D                    ~ rptr02:		dw rdat02
    8234   00:CB2D                    ~ 	endif
    8235   00:CB2D                    ~ 	ifdef DATA03
    8236   00:CB2D                    ~ rptr03:		dw rdat03
    8237   00:CB2D                    ~ 	endif
    8238   00:CB2D                    ~ 	ifdef DATA04
    8239   00:CB2D                    ~ rptr04:		dw rdat04
    8240   00:CB2D                    ~ 	endif
    8241   00:CB2D                    ~ 	ifdef DATA05
    8242   00:CB2D                    ~ rptr05:		dw rdat05
    8243   00:CB2D                    ~ 	endif
    8244   00:CB2D                    ~ 	ifdef DATA06
    8245   00:CB2D                    ~ rptr06:		dw rdat06
    8246   00:CB2D                    ~ 	endif
    8247   00:CB2D                    ~ 	ifdef DATA07
    8248   00:CB2D                    ~ rptr07:		dw rdat07
    8249   00:CB2D                    ~ 	endif
    8250   00:CB2D                    ~ 	ifdef DATA08
    8251   00:CB2D                    ~ rptr08:		dw rdat08
    8252   00:CB2D                    ~ 	endif
    8253   00:CB2D                    ~ 	ifdef DATA09
    8254   00:CB2D                    ~ rptr09:		dw rdat09
    8255   00:CB2D                    ~ 	endif
    8256   00:CB2D                    ~ 	ifdef DATA10
    8257   00:CB2D                    ~ rptr10:		dw rdat10
    8258   00:CB2D                    ~ 	endif
    8259   00:CB2D                    ~ 	ifdef DATA11
    8260   00:CB2D                    ~ rptr11:		dw rdat11
    8261   00:CB2D                    ~ 	endif
    8262   00:CB2D                    ~ 	ifdef DATA12
    8263   00:CB2D                    ~ rptr12:		dw rdat12
    8264   00:CB2D                    ~ 	endif
    8265   00:CB2D                    ~ 	ifdef DATA13
    8266   00:CB2D                    ~ rptr13:		dw rdat13
    8267   00:CB2D                    ~ 	endif
    8268   00:CB2D                    ~ 	ifdef DATA14
    8269   00:CB2D                    ~ rptr14:		dw rdat14
    8270   00:CB2D                    ~ 	endif
    8271   00:CB2D                    ~ 	ifdef DATA15
    8272   00:CB2D                    ~ rptr15:		dw rdat15
    8273   00:CB2D                    ~ 	endif
    8274   00:CB2D                    ~ 	ifdef DATA16
    8275   00:CB2D                    ~ rptr16:		dw rdat16
    8276   00:CB2D                    ~ 	endif
    8277   00:CB2D                    ~ 	ifdef DATA17
    8278   00:CB2D                    ~ rptr17:		dw rdat17
    8279   00:CB2D                    ~ 	endif
    8280   00:CB2D                    ~ 	ifdef DATA18
    8281   00:CB2D                    ~ rptr18:		dw rdat18
    8282   00:CB2D                    ~ 	endif
    8283   00:CB2D                    ~ 	ifdef DATA19
    8284   00:CB2D                    ~ rptr19:		dw rdat19
    8285   00:CB2D                    ~ 	endif
    8286   00:CB2D                    ~ 	ifdef DATA20
    8287   00:CB2D                    ~ rptr20:		dw rdat20
    8288   00:CB2D                    ~ 	endif
    8289   00:CB2D                    ~ 
    8290   00:CB2D                    ~ ; Don't change the order of these four.  Menu routine relies on winlft following wintop.
    8291   00:CB2D                    ~ 
    8292   00:CB2D                    ~ wintop		db WINDOWTOP		; top of window.
    8293   00:CB2D                    ~ winlft		db WINDOWLFT		; left edge.
    8294   00:CB2D                    ~ winhgt		db WINDOWHGT		; window height.
    8295   00:CB2D                    ~ winwid		db WINDOWWID		; window width.
    8296   00:CB2D                    ~ 
    8297   00:CB2D                    ~ 	endif
    8298   00:CB2D                      
    8299   00:CB2D                      	if DISTYPE=ROM		
    8300   00:CB2D                      
    8301   00:CB2D  (00:CB2D)           endprogram:	equ $
    8302   00:CB2D                      
    8303   00:CB2D                      	else
    8304   00:CB2D                    ~ 	
    8305   00:CB2D                    ~ endprogram:	equ main + ::0
    8306   00:CB2D                    ~ 
    8307   00:CB2D                    ~ 	endif
    8308   00:CB2D                      	
    8309   00:CB2D                      ; Fill the rest of the page
    8310   00:CB2D                      
    8311   00:CB2D                      ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    8312   00:CB2D                      	include "CV_BIOS.asm"
       1.  00:CB2D                      ;-----------------------------------------------------------
       2.  00:CB2D                      ; Colecovision BIOS calls
       3.  00:CB2D                      ;-----------------------------------------------------------
       4.  00:CB2D                      
       5.  00:CB2D  (00:1FD9)           WRITE_REGISTER:		equ $1fd9
       6.  00:CB2D  (00:00C9)           PATSIZE:		equ (sprgfx-chgfx)/8
       7.  00:CB2D  (00:1105)           CONTROLLER_INIT:	equ $1105
       8.  00:CB2D  (00:1FEB)           POLLER:			equ $1feb
       9.  00:CB2D                      
      10.  00:CB2D                      ;-----------------------------------------------------------
      11.  00:CB2D                      ; - Setup Screen 2,2
      12.  00:CB2D                      ; - Interrupts are disabled
      13.  00:CB2D                      ; - Fill screen 3x with chars 0-255
      14.  00:CB2D                      ; - Clear char table
      15.  00:CB2D                      ;-----------------------------------------------------------
      16.  00:CB2D                      
      17.  00:CB2D                      CV_INIGRP:
      18.  00:CB2D  01 02 00            	ld bc,0002h		; Reg 0: Mode 2
      19.  00:CB30  CD D9 1F            	call WRITE_REGISTER
      20.  00:CB33  01 06 02            	ld bc,0206h        	; Name table 1800h
      21.  00:CB36  CD D9 1F            	call WRITE_REGISTER
      22.  00:CB39  01 FF 03            	ld bc,03ffh        	; Colour table 2000h
      23.  00:CB3C  CD D9 1F            	call WRITE_REGISTER
      24.  00:CB3F  01 03 04            	ld bc,0403h        	; Pattern table 0000h
      25.  00:CB42  CD D9 1F            	call WRITE_REGISTER
      26.  00:CB45  01 36 05            	ld bc,0536h        	; Sprite attribute table 1b00h
      27.  00:CB48  CD D9 1F            	call WRITE_REGISTER
      28.  00:CB4B  01 07 06            	ld bc,0607h        	; Sprite pattern table 3800h
      29.  00:CB4E  CD D9 1F            	call WRITE_REGISTER
      30.  00:CB51  01 00 07            	ld bc,0700h        	; Base colours
      31.  00:CB54  CD D9 1F            	call WRITE_REGISTER
      32.  00:CB57  01 E2 01            	ld bc,01e2h		; Reg 1: Mode 2, 16k, no interrupts, 16x16 sprites
      33.  00:CB5A  CD D9 1F            	call WRITE_REGISTER
      34.  00:CB5D                      
      35.  00:CB5D                      ; Fill screen 3x 0-255
      36.  00:CB5D                      
      37.  00:CB5D  21 00 18            	ld hl,MSX_NAMTBL		
      38.  00:CB60  CD 96 CB            	call CV_SETWRT
      39.  00:CB63  AF                          xor a
      40.  00:CB64  06 03               	ld b,3
      41.  00:CB66                      nxtblk:
      42.  00:CB66  D3 BE               	out (MSX_VDPDRW),a
      43.  00:CB68  3C                  	inc a
      44.  00:CB69  20 FB               	jr nz,nxtblk
      45.  00:CB6B  10 F9               	djnz nxtblk
      46.  00:CB6D                      
      47.  00:CB6D                      ; Clear char table
      48.  00:CB6D                      
      49.  00:CB6D  CD 71 CB            	call CV_CLS		
      50.  00:CB70  C9                  	ret
      51.  00:CB71                      
      52.  00:CB71                      ;-----------------------------------------------------------
      53.  00:CB71                      ; Clear the VDP Pattern table (clears screen)
      54.  00:CB71                      ;-----------------------------------------------------------
      55.  00:CB71                      
      56.  00:CB71                      CV_CLS:
      57.  00:CB71  01 00 18            	ld bc,256/8*192
      58.  00:CB74  C5                  	push bc
      59.  00:CB75  21 00 00            	ld hl,MSX_CHRTBL		; Clear char table
      60.  00:CB78  AF                          xor a
      61.  00:CB79  CD 87 CB            	call FILVRM
      62.  00:CB7C                      
      63.  00:CB7C  21 00 20            	ld hl,MSX_CLRTBL		; Clear colour tabel
      64.  00:CB7F  3A EA 53            	ld a,(MSX_BAKCLR)
      65.  00:CB82  C1                  	pop bc
      66.  00:CB83  CD 87 CB            	call FILVRM
      67.  00:CB86                      
      68.  00:CB86  C9                  	ret
      69.  00:CB87                      
      70.  00:CB87                      ;-----------------------------------------------------------
      71.  00:CB87                      ; Fill a section of VRAM with value in A
      72.  00:CB87                      ; HL = VRAM Address
      73.  00:CB87                      ; BC = Length
      74.  00:CB87                      ;-----------------------------------------------------------
      75.  00:CB87                      
      76.  00:CB87                      FILVRM:
      77.  00:CB87  5F                  	ld e,a
      78.  00:CB88  CD 96 CB            	call CV_SETWRT
      79.  00:CB8B                      FLOOP:
      80.  00:CB8B  7B                  	ld a,e
      81.  00:CB8C  D3 BE               	out (MSX_VDPDRW),a
      82.  00:CB8E  0B                  	dec bc
      83.  00:CB8F  79                  	ld a,c
      84.  00:CB90  B0                  	or b
      85.  00:CB91  FE 00               	cp 0
      86.  00:CB93  20 F6               	jr nz,FLOOP
      87.  00:CB95  C9                  	ret
      88.  00:CB96                      
      89.  00:CB96                      ;-----------------------------------------------------------
      90.  00:CB96                      ; Set write to Video Ram
      91.  00:CB96                      ; HL = VRAM Address
      92.  00:CB96                      ;-----------------------------------------------------------
      93.  00:CB96                      
      94.  00:CB96                      CV_SETWRT:
      95.  00:CB96  F3                  	di
      96.  00:CB97  7D                  	ld a,l
      97.  00:CB98  D3 BF               	out (MSX_VDPCW),a
      98.  00:CB9A  7C                  	ld a,h
      99.  00:CB9B  E6 3F               	and 3Fh
     100.  00:CB9D  F6 40               	or 40h
     101.  00:CB9F  D3 BF               	out (MSX_VDPCW),a
     102.  00:CBA1  FB                  	ei
     103.  00:CBA2  C9                  	ret
     104.  00:CBA3                      
     105.  00:CBA3                      ;-----------------------------------------------------------
     106.  00:CBA3                      ; Set data in VRAM
     107.  00:CBA3                      ; HL = VRAM Address
     108.  00:CBA3                      ;-----------------------------------------------------------
     109.  00:CBA3                      
     110.  00:CBA3                      CV_WRTVRM:
     111.  00:CBA3  F5                  	push af
     112.  00:CBA4  CD 96 CB            	call CV_SETWRT
     113.  00:CBA7  F1                  	pop af
     114.  00:CBA8  D3 BE               	out (MSX_VDPDRW),a
     115.  00:CBAA  C9                  	ret
     116.  00:CBAB                      
     117.  00:CBAB                      
    8313   00:CBAB                      ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    8314   00:CBAB                      	
    8315   00:CBAB                      /*
    8316   00:CBAB                    ~ 	if DISTYPE=ROM
    8317   00:CBAB                    ~ 
    8318   00:CBAB                    ~ 	output rom_filler.bin
    8319   00:CBAB                    ~ 
    8320   00:CBAB                    ~ 	org endprogram
    8321   00:CBAB                    ~ 	
    8322   00:CBAB                    ~ 
    8323   00:CBAB                    ~ 		if ($ & $8000)!=0
    8324   00:CBAB                    ~ 			block $4000-($-8000h),255
    8325   00:CBAB                    ~ 		else
    8326   00:CBAB                    ~ 			block $4000-($-4000h),255
    8327   00:CBAB                    ~ 		endif
    8328   00:CBAB                    ~ 		
    8329   00:CBAB                    ~ 	endif
    8330   00:CBAB                    ~ 	*/
    8331   00:CBAB                      ;
    8332   00:CBAB                      ;
    8333   00:CBAB                      ;
    8334   00:CBAB                      	output ram_vars.tmp
    8335   00:0000                      
    8336   00:0000                      ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    8337   00:0000                      ;	defpage 0, $8080	
    8338   00:0000                      ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    8339   00:0000                      		
    8340   00:0000                      	if DISTYPE=ROM	
    8341   00:0000                      
    8342   00:0000  (4000)              		phase $4000 ; ROM model variables that need to be initialized. Minimum 8KB RAM needed
    8343   00:4000                      
    8344   00:4000  (00:4000)           varbegin: equ $	
    8345   00:4000                      
    8346   00:4000                      ; Don't change the order of these 5 variables.
    8347   00:4000  00 (6)              score:		ds 6		; player's score  000000 .
    8348   00:4006  00 (6)              hiscor:		ds 6		; high score  000000 .
    8349   00:400C  00 (6)              bonus:		ds 6		; bonus  000000 .
    8350   00:4012  00 (4)              displ0:		ds 4
    8351   00:4016                      
    8352   00:4016                      	if EFLAG
    8353   00:4016                      
    8354   00:4016  00 (1)              sndtyp:		ds 1		; sound type. don't move!
    8355   00:4017                      
    8356   00:4017                      	endif
    8357   00:4017                      
    8358   00:4017                      	if PFLAG
    8359   00:4017                      
    8360   00:4017  00 (2)              shrplot:	ds 2
    8361   00:4019                      
    8362   00:4019                      	endif
    8363   00:4019                      
    8364   00:4019                      	if SFLAG
    8365   00:4019                    ~ 	
    8366   00:4019                    ~ scrlyoff:	ds 1
    8367   00:4019                    ~ 	
    8368   00:4019                    ~ 	endif
    8369   00:4019                      
    8370   00:4019                      	if MFLAG
    8371   00:4019                    ~ 	
    8372   00:4019                    ~ mod0:	ds 3
    8373   00:4019                    ~ mod1:	ds 3
    8374   00:4019                    ~ mod2:	ds 3
    8375   00:4019                    ~ 
    8376   00:4019                    ~ 	endif
    8377   00:4019                      
    8378   00:4019                      	ifdef DATA00
    8379   00:4019                    ~ rptr00:		ds 2
    8380   00:4019                    ~ 	endif
    8381   00:4019                      	ifdef DATA01
    8382   00:4019                    ~ rptr01:		ds 2
    8383   00:4019                    ~ 	endif
    8384   00:4019                      	ifdef DATA02
    8385   00:4019                    ~ rptr02:		ds 2
    8386   00:4019                    ~ 	endif
    8387   00:4019                      	ifdef DATA03
    8388   00:4019                    ~ rptr03:		ds 2
    8389   00:4019                    ~ 	endif
    8390   00:4019                      	ifdef DATA04
    8391   00:4019                    ~ rptr04:		ds 2
    8392   00:4019                    ~ 	endif
    8393   00:4019                      	ifdef DATA05
    8394   00:4019                    ~ rptr05:		ds 2
    8395   00:4019                    ~ 	endif
    8396   00:4019                      	ifdef DATA06
    8397   00:4019                    ~ rptr06:		ds 2
    8398   00:4019                    ~ 	endif
    8399   00:4019                      	ifdef DATA07
    8400   00:4019                    ~ rptr07:		ds 2
    8401   00:4019                    ~ 	endif
    8402   00:4019                      	ifdef DATA08
    8403   00:4019                    ~ rptr08:		ds 2
    8404   00:4019                    ~ 	endif
    8405   00:4019                      	ifdef DATA09
    8406   00:4019                    ~ rptr09:		ds 2
    8407   00:4019                    ~ 	endif
    8408   00:4019                      	ifdef DATA10
    8409   00:4019                    ~ rptr10:		ds 2
    8410   00:4019                    ~ 	endif
    8411   00:4019                      	ifdef DATA11
    8412   00:4019                    ~ rptr11:		ds 2
    8413   00:4019                    ~ 	endif
    8414   00:4019                      	ifdef DATA12
    8415   00:4019                    ~ rptr12:		ds 2
    8416   00:4019                    ~ 	endif
    8417   00:4019                      	ifdef DATA13
    8418   00:4019                    ~ rptr13:		ds 2
    8419   00:4019                    ~ 	endif
    8420   00:4019                      	ifdef DATA14
    8421   00:4019                    ~ rptr14:		ds 2
    8422   00:4019                    ~ 	endif
    8423   00:4019                      	ifdef DATA15
    8424   00:4019                    ~ rptr15:		ds 2
    8425   00:4019                    ~ 	endif
    8426   00:4019                      	ifdef DATA16
    8427   00:4019                    ~ rptr16:		ds 2
    8428   00:4019                    ~ 	endif
    8429   00:4019                      	ifdef DATA17
    8430   00:4019                    ~ rptr17:		ds 2
    8431   00:4019                    ~ 	endif
    8432   00:4019                      ifdef DATA18
    8433   00:4019                    ~ rptr18:		ds 2
    8434   00:4019                    ~ 	endif
    8435   00:4019                      	ifdef DATA19
    8436   00:4019                    ~ rptr19:		ds 2
    8437   00:4019                    ~ 	endif
    8438   00:4019                      	ifdef DATA20
    8439   00:4019                    ~ rptr20:		ds 2
    8440   00:4019                    ~ 	endif
    8441   00:4019                      
    8442   00:4019                      	else
    8443   00:4019                    ~ 	
    8444   00:4019                    ~ 		phase endprogram ; ; if DISTYPE=ROM RAM model variables	
    8445   00:4019                    ~ 		
    8446   00:4019                    ~ varbegin: equ $	
    8447   00:4019                    ~ 	
    8448   00:4019                    ~ 	endif 
    8449   00:4019                      
    8450   00:4019                      ; RAM variables (initialization not needed)
    8451   00:4019                      
    8452   00:4019  00 (1)              loopa:		ds 1			; loop counter system variable. (23681)
    8453   00:401A  00 (1)              loopb:		ds 1			; loop counter system variable. (23728)
    8454   00:401B  00 (1)              loopc:		ds 1			; loop counter system variable. (23729)	
    8455   00:401C  00 (1)              vara:		ds 1			; general-purpose variable.
    8456   00:401D  00 (1)              varb:		ds 1			; general-purpose variable.
    8457   00:401E  00 (1)              varc:		ds 1			; general-purpose variable.
    8458   00:401F  00 (1)              vard:		ds 1			; general-purpose variable.
    8459   00:4020  00 (1)              vare:		ds 1			; general-purpose variable.
    8460   00:4021  00 (1)              varf:		ds 1			; general-purpose variable.
    8461   00:4022  00 (1)              varg:		ds 1			; general-purpose variable.
    8462   00:4023  00 (1)              varh:		ds 1			; general-purpose variable.
    8463   00:4024  00 (1)              vari:		ds 1			; general-purpose variable.
    8464   00:4025  00 (1)              varj:		ds 1			; general-purpose variable.
    8465   00:4026  00 (1)              vark:		ds 1			; general-purpose variable.
    8466   00:4027  00 (1)              varl:		ds 1			; general-purpose variable.
    8467   00:4028  00 (1)              varm:		ds 1			; general-purpose variable.
    8468   00:4029  00 (1)              varn:		ds 1			; general-purpose variable.
    8469   00:402A  00 (1)              varo:		ds 1			; general-purpose variable.
    8470   00:402B  00 (1)              varp:		ds 1			; general-purpose variable.
    8471   00:402C  00 (1)              varq:		ds 1			; general-purpose variable.
    8472   00:402D  00 (1)              varr:		ds 1			; general-purpose variable.
    8473   00:402E  00 (1)              vars:		ds 1			; general-purpose variable.
    8474   00:402F  00 (1)              vart:		ds 1			; general-purpose variable.
    8475   00:4030  00 (1)              varu:		ds 1			; general-purpose variable.
    8476   00:4031  00 (1)              varv:		ds 1			; general-purpose variable.
    8477   00:4032  00 (1)              varw:		ds 1			; general-purpose variable.
    8478   00:4033  00 (1)              varz:		ds 1			; general-purpose variable.
    8479   00:4034  00 (1)              contrl:		ds 1            ; control, 0 = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
    8480   00:4035  00 (1)              charx:		ds 1            ; cursor y position.
    8481   00:4036  00 (1)              chary:		ds 1            ; cursor x position.
    8482   00:4037  00 (1)              colpat:		ds 1	
    8483   00:4038  00 (1)              prtmod:		ds 1			; print mode, 0 = standard, 1 = double-height.	
    8484   00:4039  00 (1)              clratt:		ds 1			; color attributes
    8485   00:403A                      	
    8486   00:403A                      ; Scrolly text and puzzle variables.
    8487   00:403A                      
    8488   00:403A                      	if SFLAG
    8489   00:403A                    ~ txtbit:		ds 1			; bit to write.
    8490   00:403A                    ~ txtwid:		ds 1			; width of ticker message.
    8491   00:403A                    ~ txtpos:		ds 2			; 
    8492   00:403A                    ~ txtini:		ds 2			; 
    8493   00:403A                    ~ txtend:		ds 2			; 
    8494   00:403A                    ~ txtbeg:		ds 2			; 
    8495   00:403A                    ~ 	endif
    8496   00:403A                      
    8497   00:403A                      ; beeper variable
    8498   00:403A                      	if EFLAG
    8499   00:403A  00 (1)              snddelay:	ds 1
    8500   00:403B                      	endif
    8501   00:403B                      	
    8502   00:403B  00 (2)              spptr:		ds 2			; spawned sprite pointer.
    8503   00:403D  00 (1)              seed:		ds 1			; seed for random numbers.
    8504   00:403E  00 (2)              grbase:		ds 2			; graphics base address.
    8505   00:4040  00 (1)              joyval:		ds 1			; joystick reading.		
    8506   00:4041  00 (1)              scno:		ds 1            ; present screen number.
    8507   00:4042  00 (2)              ogptr:		ds 2            ; original sprite pointer.
    8508   00:4044  00 (1)              nsprite:	ds 1
    8509   00:4045  00 (1)              numlif:		ds 1            ; number of lives.
    8510   00:4046  00 (1)              curobj:		ds 1
    8511   00:4047  00 (2)              dirthig:	ds 2		
    8512   00:4049  00 (2)              skptr:  	ds 2            ; search pointer.
    8513   00:404B  00 (1)              highslot:	ds 1            ; highest free sprite number
    8514   00:404C  00 (1)              roomtb:		ds 1 	        ; room number.
    8515   00:404D                      
    8516   00:404D                      	if MFLAG
    8517   00:404D                    ~ bwid:		ds 1            ; box/menu width.
    8518   00:404D                    ~ blen:		ds 1            ; box/menu height.
    8519   00:404D                    ~ btop:		ds 1            ; box coordinates.
    8520   00:404D                    ~ blft:		ds 1
    8521   00:404D                    ~ 	endif
    8522   00:404D                      	
    8523   00:404D  00 (1)              frmno:		ds 1            ; current game frame.
    8524   00:404E  00 (1)              combyt:		ds 1			; byte type compressed.
    8525   00:404F                      ;comcnt: 	ds 1            ; compression counter.
    8526   00:404F                      
    8527   00:404F  00 (1)              seed3:		ds 1
    8528   00:4050  00 (1)              nexlev:		ds 1			; db 0               next level flag.
    8529   00:4051  00 (1)              restfl:		ds 1			; db 0               restart screen flag.
    8530   00:4052  00 (1)              deadf:		ds 1			; db 0              dead flag.
    8531   00:4053  00 (1)              gamwon:		ds 1			; db 0               game won flag.
    8532   00:4054  00 (1)              dispx:		ds 1			; db 0              cursor y position.
    8533   00:4055  00 (1)              dispy:		ds 1			; db 0              cursor x position.
    8534   00:4056  00 (1)              varrnd:		ds 1			; db 255             last random number.
    8535   00:4057  00 (1)              varobj:		ds 1			; db 254             last object number.
    8536   00:4058  00 (1)              varopt:		ds 1			; db 255             last option chosen from menu.
    8537   00:4059  00 (1)              varblk:		ds 1			; db 255             block type.
    8538   00:405A  00 (1)              offset:		ds 1
    8539   00:405B  00 (1)              select:		ds 1			; frames to wait until next SELECT key is accepted
    8540   00:405C  00 (1)              ticks:		ds 1			; PAL=50, NTSC=60
    8541   00:405D                      ; nohide:		ds 1
    8542   00:405D                      
    8543   00:405D                      	if RTFLAG
    8544   00:405D                    ~ usrsgn:		ds 1            ; sign.
    8545   00:405D                    ~ usrspd:		ds 1            ; speed.
    8546   00:405D                    ~ 	endif
    8547   00:405D                      	
    8548   00:405D  (00:405D)           varend:		equ $
    8549   00:405D                      
    8550   00:405D                      	include "PT3-RAM.asm"
       1.  00:405D                      	if YFLAG
       2.  00:405D                    ~ 	
       3.  00:405D                    ~ 		; --- THIS FILE MUST BE COMPILED IN RAM ---
       4.  00:405D                    ~ 
       5.  00:405D                    ~ 		; --- PT3 WORKAREA [self-modifying code patched] ---
       6.  00:405D                    ~ 
       7.  00:405D                    ~ PT3_MODADDR:	ds 2
       8.  00:405D                    ~ PT3_CrPsPtr:	ds 2
       9.  00:405D                    ~ PT3_SAMPTRS:	ds 2
      10.  00:405D                    ~ PT3_OrnPtrs:	ds 2
      11.  00:405D                    ~ PT3_PDSP:		ds 2
      12.  00:405D                    ~ PT3_CSP:		ds 2
      13.  00:405D                    ~ PT3_PSP:		ds 2
      14.  00:405D                    ~ PT3_PrNote:		ds 1
      15.  00:405D                    ~ PT3_PrSlide:	ds 2
      16.  00:405D                    ~ PT3_AdInPtA:	ds 2
      17.  00:405D                    ~ PT3_AdInPtB:	ds 2
      18.  00:405D                    ~ PT3_AdInPtC:	ds 2
      19.  00:405D                    ~ PT3_LPosPtr:	ds 2
      20.  00:405D                    ~ PT3_PatsPtr:	ds 2
      21.  00:405D                    ~ PT3_Delay:		ds 1
      22.  00:405D                    ~ PT3_AddToEn:	ds 1
      23.  00:405D                    ~ PT3_Env_Del:	ds 1
      24.  00:405D                    ~ PT3_ESldAdd:	ds 2
      25.  00:405D                    ~ 
      26.  00:405D                    ~ mutesong:		ds 1
      27.  00:405D                    ~ 
      28.  00:405D                    ~ PT3_SETUP:		ds 1	;set bit0 to 1, if you want to play without looping
      29.  00:405D                    ~ 						;bit7 is set each time, when loop point is passed
      30.  00:405D                    ~ 
      31.  00:405D                    ~ VARS:
      32.  00:405D                    ~ 
      33.  00:405D                    ~ ChanA:			ds 29			;CHNPRM_Size
      34.  00:405D                    ~ ChanB:			ds 29			;CHNPRM_Size
      35.  00:405D                    ~ ChanC:			ds 29			;CHNPRM_Size
      36.  00:405D                    ~ ;GlobalVars
      37.  00:405D                    ~ DelyCnt:		ds 1
      38.  00:405D                    ~ CurESld:		ds 2
      39.  00:405D                    ~ CurEDel:		ds 1
      40.  00:405D                    ~ Ns_Base_AddToNs:
      41.  00:405D                    ~ Ns_Base:		ds 1
      42.  00:405D                    ~ AddToNs:		ds 1
      43.  00:405D                    ~ 
      44.  00:405D                    ~ AYREGS:
      45.  00:405D                    ~ VT_:			ds 14
      46.  00:405D                    ~ EnvBase:		ds 2
      47.  00:405D                    ~ 
      48.  00:405D                    ~ VAR0END:		ds 240
      49.  00:405D                    ~ 
      50.  00:405D                    ~ 
      51.  00:405D                    ~ 	endif
      52.  00:405D                      	
    8551   00:405D                      	include "ayFX-RAM.asm"
       1.  00:405D                      		; --- ayFX REPLAYER v1.31 ---
       2.  00:405D                      
       3.  00:405D                      		; --- THIS FILE MUST BE COMPILED IN RAM ---
       4.  00:405D                      	if XFLAG
       5.  00:405D                      	
       6.  00:405D  00 (1)              ayFX_MODE:		ds 1			; ayFX mode
       7.  00:405E  00 (2)              ayFX_BANK:		ds 2			; Current ayFX Bank
       8.  00:4060  00 (1)              ayFX_PRIORITY:	ds 1			; Current ayFX stream priotity
       9.  00:4061  00 (2)              ayFX_POINTER:	ds 2			; Pointer to the current ayFX stream
      10.  00:4063  00 (2)              ayFX_TONE:		ds 2			; Current tone of the ayFX stream
      11.  00:4065  00 (1)              ayFX_NOISE:		ds 1			; Current noise of the ayFX stream
      12.  00:4066  00 (1)              ayFX_VOLUME:	ds 1			; Current volume of the ayFX stream
      13.  00:4067  00 (1)              ayFX_CHANNEL:	ds 1			; PSG channel to play the ayFX stream
      14.  00:4068                      
      15.  00:4068                       	if FX_RELATIVE
      16.  00:4068                    ~ 
      17.  00:4068                    ~ ayFX_VT:		ds 2			; ayFX relative volume table pointer
      18.  00:4068                    ~ 
      19.  00:4068                    ~ 	endif
      20.  00:4068                      
      21.  00:4068                      	if ( YFLAG = 0 )	
      22.  00:4068                      		
      23.  00:4068  00 (14)             AYREGS:			ds 14
      24.  00:4076                      
      25.  00:4076                      	endif
      26.  00:4076                      	
      27.  00:4076                      	endif
    8552   00:4076                      
    8553   00:4076  00 (2)              sprptr:		ds 2
    8554   00:4078  00 (2)              pblkptr:	ds 2
    8555   00:407A  00 (2)              stack:		ds 2
    8556   00:407C  00 (1)              time:		ds 1
    8557   00:407D                      
    8558   00:407D                      
    8559   00:407D                      	if DISTYPE=ROM
    8560   00:407D                      
    8561   00:407D  00 (22)             keys:		ds 22
    8562   00:4093                      
    8563   00:4093                      ; Don't change the order of these four.  Menu routine relies on winlft following wintop.
    8564   00:4093  00 (1)              wintop		ds 1		; top of window.
    8565   00:4094  00 (1)              winlft		ds 1		; left edge.
    8566   00:4095  00 (1)              winhgt		ds 1		; window height.
    8567   00:4096  00 (1)              winwid		ds 1		; window width.
    8568   00:4097                      
    8569   00:4097                      	endif
    8570   00:4097                      
    8571   00:4097                      CONTROLLER_BUFFER:
    8572   00:4097  00 (12)             	ds 12
    8573   00:40A3                      	
    8574   00:40A3                      
    8575   00:40A3                      ; Sprite table.
    8576   00:40A3                      ;
    8577   00:40A3                      ; ix+0  = type.	(TYPE)
    8578   00:40A3                      ; ix+1  = sprite image number. (IMAGE)
    8579   00:40A3                      ; ix+2  = frame. (FRAME)
    8580   00:40A3                      ; ix+3  = y coord. (Y)
    8581   00:40A3                      ; ix+4  = x coord. (X)
    8582   00:40A3                      
    8583   00:40A3                      ; ix+5  = color
    8584   00:40A3                      ; ix+6  = Not used
    8585   00:40A3                      ; ix+7  = Not used
    8586   00:40A3                      ; ix+8  = y coord backup
    8587   00:40A3                      ; ix+9  = x coord backup
    8588   00:40A3                      
    8589   00:40A3                      ; ix+10 = direction.
    8590   00:40A3                      ; ix+11 = parameter 1. (SETTINGA)
    8591   00:40A3                      ; ix+12 = parameter 2. (SETTINGB)
    8592   00:40A3                      ; ix+13 = jump pointer low. (AIRBORNE)
    8593   00:40A3                      ; ix+14 = jump pointer high. (JUMPSPEED)
    8594   00:40A3                      ; ix+15 = data pointer low.
    8595   00:40A3                      ; ix+16 = data pointer high.
    8596   00:40A3                      
    8597   00:40A3  00 (17)             ssprit:		ds TABSIZ
    8598   00:40B4  00 (544)            sprtab:		ds SPRBUF	   
    8599   00:42D4                      		
    8600   00:42D4                      	if (MAPSIZE > 128)
    8601   00:42D4  00 (472)            mapbuf:		ds MAPSIZE - 128	; spratr2+unaligned bytes are recycled
    8602   00:44AC                      	else
    8603   00:44AC                    ~ mapbuf:		equ $				; spratr2 is enough
    8604   00:44AC                    ~ 	endif
    8605   00:44AC                      ;
    8606   00:44AC                      ; aligned tables
    8607   00:44AC                      ;
    8608   00:44AC                      ; move wisely!
    8609   00:44AC                      ;
    8610   00:44AC  (0054)              		ALIGN 256
    8611   00:4500                      		
    8612   00:4500  00 (128)            spratr2:	ds 128			; secondary sprite attribute table
    8613   00:4580  00 (128)            spratr:		ds 128			; full sprite attribute table. Cannot cross a 256 byte boundary
    8614   00:4600  00 (768)            MAP:		ds 768			; main attributes map. Stores tile attributes		
    8615   00:4900                      	
    8616   00:4900                      	if OFLAG
    8617   00:4900  00 (256)            objlist:	ds 256			; Objects coords list (max. 128 objects). Needs exact 256 alignment
    8618   00:4A00                      	endif
    8619   00:4A00                      
    8620   00:4A00  00 (768)            scrmap:		ds 768			; Blocks map. Keeps tile codes
    8621   00:4D00                      
    8622   00:4D00  00 (128)            mapspr:		ds 128			; Sprite mapping list (max. 64 sprites). Needs exact 256 alignment		
    8623   00:4D80                      
    8624   00:4D80  00 (64)             colltab:	ds 16*4			; Support till 16 Y-aligned sprites. Must not cross a 256 byte boundary
    8625   00:4DC0                      
    8626   00:4DC0                      ; end of aligned tables or data areas
    8627   00:4DC0                      
    8628   00:4DC0                      	if SFLAG
    8629   00:4DC0                    ~ scrbuf:		ds 256+8
    8630   00:4DC0                    ~ 	endif
    8631   00:4DC0                      	
    8632   00:4DC0                      	if PFLAG
    8633   00:4DC0  00 (2)              shraddr:	ds 2
    8634   00:4DC2  00 (486)            SHRAPN:		ds NUMSHR*SHRSIZ
    8635   00:4FA8                      	endif
    8636   00:4FA8                      		
    8637   00:4FA8                      	if (OFLAG and DISTYPE=ROM)
    8638   00:4FA8  00 (120)            objatr:		ds NUMOBJ*3
    8639   00:5020                      	endif
    8640   00:5020                      
    8641   00:5020                      	; if (DISTYPE=ROM and DISSIZE=48) or (DISTYPE!=ROM and DISSIZE=64)
    8642   00:5020                      	ifdef NOBIOS
    8643   00:5020                    ~ biosvars:	ds $38	
    8644   00:5020                    ~ 	endif
    8645   00:5020                      	
    8646   00:5020                      frames_passed:
    8647   00:5020  00                  	db 0
    8648   00:5021                      
    8649   00:5021  (00:5021)           eop:		equ $
    8650   00:5021                      
    8651   00:5021  (1021)              	dephase
    8652   00:1021                      
    8653   00:1021                      ;
    8654   00:1021                      ; Extra binary. Loaders for disk/tape versions
    8655   00:1021                      ;
    8656   00:1021                      
    8657   00:1021                      	if (DISTYPE!=ROM and DISSIZE>32)
    8658   00:1021                    ~ 	
    8659   00:1021                    ~ 		output loader.bin
    8660   00:1021                    ~ 
    8661   00:1021                    ~ 		db $FE
    8662   00:1021                    ~ 		dw slots
    8663   00:1021                    ~ 		dw endslots-1
    8664   00:1021                    ~ 		dw slots
    8665   00:1021                    ~ 
    8666   00:1021                    ~ 		org $F41F				; KBUF F41F-F55C(318 bytes available)
    8667   00:1021                    ~ 		
    8668   00:1021                    ~ slots:	equ $
    8669   00:1021                    ~ 	
    8670   00:1021                    ~ mvpage0:
    8671   00:1021                    ~ 		di
    8672   00:1021                    ~ 		call saveslots
    8673   00:1021                    ~ 		push de
    8674   00:1021                    ~ 		call enapage1
    8675   00:1021                    ~ 		call enapage0
    8676   00:1021                    ~ 		ld de,$0000
    8677   00:1021                    ~ 		jr putram
    8678   00:1021                    ~ mvpage1:  
    8679   00:1021                    ~ 		di
    8680   00:1021                    ~ 		call saveslots
    8681   00:1021                    ~ 		push de
    8682   00:1021                    ~ 		call enapage1
    8683   00:1021                    ~ 		ld de,$4000
    8684   00:1021                    ~ putram:
    8685   00:1021                    ~ 		ld hl,$8080
    8686   00:1021                    ~ 		ld bc,$4000
    8687   00:1021                    ~ 		ldir 
    8688   00:1021                    ~ 		pop de
    8689   00:1021                    ~ 		call loadslots
    8690   00:1021                    ~ 		ei
    8691   00:1021                    ~ 		ret
    8692   00:1021                    ~ 
    8693   00:1021                    ~ runpage0:
    8694   00:1021                    ~ 		jp runpage0a
    8695   00:1021                    ~ 
    8696   00:1021                    ~ runpage1:
    8697   00:1021                    ~ 		jp runpage1a
    8698   00:1021                    ~ 				
    8699   00:1021                    ~ saveslots:
    8700   00:1021                    ~ 		ld a,(MSX_SSSREG)
    8701   00:1021                    ~ 		cpl			; reverse all bits
    8702   00:1021                    ~ 		ld d,a		; Store the current secondary slots register
    8703   00:1021                    ~ 		in a,(MSX_PPIA)
    8704   00:1021                    ~ 		ld e,a		; Store the current primary slots register
    8705   00:1021                    ~ 		ret
    8706   00:1021                    ~ 		
    8707   00:1021                    ~ loadslots:		
    8708   00:1021                    ~ 		ld a,e
    8709   00:1021                    ~ 		out	(MSX_PPIA),a	; Restore the register as at start
    8710   00:1021                    ~ 		ld a,d
    8711   00:1021                    ~ 		ld (MSX_SSSREG),a	; Restore the register as at start				
    8712   00:1021                    ~ 		ret
    8713   00:1021                    ~ 
    8714   00:1021                    ~ runpage1a:
    8715   00:1021                    ~ 		di
    8716   00:1021                    ~ 		call inipage1
    8717   00:1021                    ~ 		jr run				
    8718   00:1021                    ~ 		
    8719   00:1021                    ~ runpage0a:
    8720   00:1021                    ~ 		di
    8721   00:1021                    ~ 		call inipage1
    8722   00:1021                    ~ 	if DISSIZE=64
    8723   00:1021                    ~ 		call cpbiosvars
    8724   00:1021                    ~ 	endif
    8725   00:1021                    ~ 		call enapage0
    8726   00:1021                    ~ run:		
    8727   00:1021                    ~ 		jp $4000
    8728   00:1021                    ~ 
    8729   00:1021                    ~ turboon:		
    8730   00:1021                    ~ 		ld a,(MSX_CHGCPU)
    8731   00:1021                    ~ 		cp $C3
    8732   00:1021                    ~ 		ld a,$81
    8733   00:1021                    ~ 		jp z,MSX_CHGCPU
    8734   00:1021                    ~ 		ret
    8735   00:1021                    ~ 		
    8736   00:1021                    ~ 	if DISTYPE=DISK
    8737   00:1021                    ~ drvmotoff:
    8738   00:1021                    ~ 		ld a,(MSX_MSLOT)	; motor off entry present?
    8739   00:1021                    ~ 		ld hl,MSX_MTOFF
    8740   00:1021                    ~ 		call MSX_RDSLT
    8741   00:1021                    ~ 		and	a
    8742   00:1021                    ~ 		ret	z				; no, no way....
    8743   00:1021                    ~ 		ld iy,(MSX_MSLOT-1)	; we have it! call it now
    8744   00:1021                    ~ 		ld ix,MSX_MTOFF
    8745   00:1021                    ~ 		jp MSX_CALSLT
    8746   00:1021                    ~ 	endif
    8747   00:1021                    ~ 
    8748   00:1021                    ~ 	if DISSIZE=64
    8749   00:1021                    ~ cpbiosvars:		
    8750   00:1021                    ~ 		ld hl,0
    8751   00:1021                    ~ 		ld de,biosvars
    8752   00:1021                    ~ 		ld bc,$0038
    8753   00:1021                    ~ 		ldir
    8754   00:1021                    ~ 		ret		
    8755   00:1021                    ~ 	endif
    8756   00:1021                    ~ 
    8757   00:1021                    ~ enapage0:
    8758   00:1021                    ~ 		ld d,$00
    8759   00:1021                    ~ 		ld hl,MSX_ENASLT
    8760   00:1021                    ~ 		jr setcall
    8761   00:1021                    ~ 
    8762   00:1021                    ~ inipage1:
    8763   00:1021                    ~ 	if DISTYPE=DISK
    8764   00:1021                    ~ 		call drvmotoff
    8765   00:1021                    ~ 	endif
    8766   00:1021                    ~ 		call turboon
    8767   00:1021                    ~ 		; falls through to enapage1
    8768   00:1021                    ~ enapage1:
    8769   00:1021                    ~ 		ld d,$40
    8770   00:1021                    ~ 		ld hl,($0025)
    8771   00:1021                    ~ setcall:
    8772   00:1021                    ~ 		ld (VEC_ENASLT+1),hl
    8773   00:1021                    ~ 
    8774   00:1021                    ~ 	
    8775   00:1021                    ~ ;	find a valid RAM page with the aid of BIOS
    8776   00:1021                    ~ ;	Input:
    8777   00:1021                    ~ ;		D = MSB of page address
    8778   00:1021                    ~ ;
    8779   00:1021                    ~ putRAMpgX:
    8780   00:1021                    ~ 		ld b,4
    8781   00:1021                    ~ sl_loop:
    8782   00:1021                    ~ 		ld c,b
    8783   00:1021                    ~ 		dec	c
    8784   00:1021                    ~ 		push de
    8785   00:1021                    ~ 		push bc
    8786   00:1021                    ~ 		call chkExp	;modifies B,AF,HL
    8787   00:1021                    ~ 		jp p,isNotExp
    8788   00:1021                    ~ 		call sub_chk
    8789   00:1021                    ~ 		jr nz,found
    8790   00:1021                    ~ 		jr sl_end
    8791   00:1021                    ~ isNotExp:            	
    8792   00:1021                    ~ 		;ld	h,#80
    8793   00:1021                    ~ 		ld	h,d
    8794   00:1021                    ~ 		ld	a,c
    8795   00:1021                    ~ 		push	hl
    8796   00:1021                    ~ 		push	af	
    8797   00:1021                    ~ 		call	VEC_ENASLT	;select unexpanded slot
    8798   00:1021                    ~ 		pop	de	;D contains the slot/subslot/expn bit
    8799   00:1021                    ~ 		pop	hl
    8800   00:1021                    ~ 		call	chkWrite
    8801   00:1021                    ~ 		jr	nz,found	;is RAM
    8802   00:1021                    ~ sl_end:	
    8803   00:1021                    ~ 		pop	bc
    8804   00:1021                    ~ 		pop	de
    8805   00:1021                    ~ 		djnz	sl_loop
    8806   00:1021                    ~ 		;if nothing jumped to "found", then A must be -1
    8807   00:1021                    ~ 		ld	a,-1
    8808   00:1021                    ~ 		jr	found2
    8809   00:1021                    ~ 
    8810   00:1021                    ~ found:
    8811   00:1021                    ~ 		pop	hl	;balance stack
    8812   00:1021                    ~ 		pop	hl
    8813   00:1021                    ~ 		;D = slot/sub/slot/expand bit
    8814   00:1021                    ~ found2:			;exit if stack is balanced
    8815   00:1021                    ~ 		ret
    8816   00:1021                    ~ 
    8817   00:1021                    ~ sub_chk:
    8818   00:1021                    ~ 		ld	a,c
    8819   00:1021                    ~ 		or	#80	;set expanded bit
    8820   00:1021                    ~ 		ld	b,4
    8821   00:1021                    ~ 		ld	h,d	;prepare page address in H
    8822   00:1021                    ~ sub_loop:
    8823   00:1021                    ~ 		push	bc
    8824   00:1021                    ~ 		ld	c,b
    8825   00:1021                    ~ 		dec	c
    8826   00:1021                    ~ 		rl	c
    8827   00:1021                    ~ 		rl	c
    8828   00:1021                    ~ 		or	c
    8829   00:1021                    ~ 		;ld	h,#80
    8830   00:1021                    ~ 		push	hl
    8831   00:1021                    ~ 		push	af
    8832   00:1021                    ~ 		call	VEC_ENASLT
    8833   00:1021                    ~ 		pop	af
    8834   00:1021                    ~ 		ld	d,a	;save slot/subslot/exp on D register
    8835   00:1021                    ~ 		and	#f3	;clean subslot bits for next iteration
    8836   00:1021                    ~ 		ld	e,a
    8837   00:1021                    ~ 		pop	hl
    8838   00:1021                    ~ 		call	chkWrite
    8839   00:1021                    ~ 		jr	nz,sub_end	;is RAM
    8840   00:1021                    ~ 		ld	a,e
    8841   00:1021                    ~ 		pop	bc
    8842   00:1021                    ~ 		djnz	sub_loop
    8843   00:1021                    ~ 		jr 	sub_end2
    8844   00:1021                    ~ 
    8845   00:1021                    ~ sub_end:
    8846   00:1021                    ~ 		pop	hl; 	balance stack
    8847   00:1021                    ~ 	;	pop	hl
    8848   00:1021                    ~ 
    8849   00:1021                    ~ sub_end2:	;exit if stack is balanced
    8850   00:1021                    ~ 		ret
    8851   00:1021                    ~ 
    8852   00:1021                    ~ chkWrite:
    8853   00:1021                    ~ 		;**********************************************		
    8854   00:1021                    ~ 		;chkWrite
    8855   00:1021                    ~ 		;
    8856   00:1021                    ~ 		;Checks whether address WRTTST is writable or not
    8857   00:1021                    ~ 		;
    8858   00:1021                    ~ 		;Input: none
    8859   00:1021                    ~ 		;Output: flag Z if non writable
    8860   00:1021                    ~ 		;Modified: AF
    8861   00:1021                    ~ 		;
    8862   00:1021                    ~ 
    8863   00:1021                    ~ 		ld	a,(hl)
    8864   00:1021                    ~ 		inc	(hl)
    8865   00:1021                    ~ 		cp	(hl)
    8866   00:1021                    ~ 		ld (hl),a
    8867   00:1021                    ~ 		ret
    8868   00:1021                    ~ 	
    8869   00:1021                    ~ 
    8870   00:1021                    ~ chkExp:
    8871   00:1021                    ~ 		;**********************************************	
    8872   00:1021                    ~ 		;chkExp
    8873   00:1021                    ~ 
    8874   00:1021                    ~ 		;Checks whether slot C is expanded or not
    8875   00:1021                    ~ 		;Result is returned in S flag (jp M or jp P)
    8876   00:1021                    ~ 		;
    8877   00:1021                    ~ 		;Input registers:
    8878   00:1021                    ~ 		;
    8879   00:1021                    ~ 		; C = primary slot
    8880   00:1021                    ~ 		;
    8881   00:1021                    ~ 		;Output:
    8882   00:1021                    ~ 		;
    8883   00:1021                    ~ 		; S flag
    8884   00:1021                    ~ 		;
    8885   00:1021                    ~ 		;Modified:
    8886   00:1021                    ~ 		;
    8887   00:1021                    ~ 		; B,HL,AF
    8888   00:1021                    ~ 		
    8889   00:1021                    ~ 		ld	b,0
    8890   00:1021                    ~ 		ld	hl,MSX_EXPTBL
    8891   00:1021                    ~ 		add	hl,bc
    8892   00:1021                    ~ 		ld	a,(hl)          ;see if this slot is expanded or not
    8893   00:1021                    ~ 		and	#80             
    8894   00:1021                    ~ 		ret
    8895   00:1021                    ~ 	
    8896   00:1021                    ~ VEC_ENASLT:
    8897   00:1021                    ~ 		db $C3
    8898   00:1021                    ~ 		ds 2
    8899   00:1021                    ~ 		
    8900   00:1021                    ~ 		
    8901   00:1021                    ~ endslots:	equ $
    8902   00:1021                    ~ 		
    8903   00:1021                    ~ 	endif
    8904   00:1021                      
    8905   00:1021                      
    8906   00:1021                      		end

    LABELS
-------------------------------------------------
00:00000000 X DISTYPE
00:00000020 X DISSIZE
00:00000000 X AFLAG
00:00000000 X MFLAG
00:00000001 X PFLAG
00:00000000 X SFLAG
00:00000000 X DFLAG
00:00000000 X CFLAG
00:00000001 X OFLAG
00:00000000 X LFLAG
00:00000001 X EFLAG
00:00000000 X YFLAG
00:00000001 X XFLAG
00:00000000 X QFLAG
00:00000000 X CRFLAG
00:00000000 X MBFLAG
00:00000000 X UFLAG
00:00000000 X RTFLAG
00:00000000 X HCFLAG
00:00000000 X TVFREQ
00:00000000 X FX_RELATIVE
00:00000000   FX_MODE
00:00000001   FX_CHANNEL
00:00004000 X PageSize
00:0000800C X rst_8
00:0000800F X rst_10
00:00008012 X rst_18
00:00008015 X rst_20
00:00008018 X rst_28
00:0000801B X rst_30
00:0000801E X rst_38
00:00008021 X nmi_vec
00:00001FDC   READ_REGISTER
00:0000803D   init
00:00008049   NMI
00:00000000 X MSX_CHKRAM
00:00000010 X MSX_CHRGTR
00:00000014 X MSX_WRSLT
00:00000018 X MSX_OUTDO
00:00000020 X MSX_DCOMPR
00:00000028 X MSX_GETYPR
00:00000030 X MSX_CALLF
00:00000038 X MSX_KEYINT
00:0000003B X MSX_INITIO
00:0000003E X MSX_INIFNK
00:0000005F X MSX_CHGMOD
00:00000062 X MSX_CHGCLR
00:00000066 X MSX_NMI
00:00000069 X MSX_CLRSPR
00:0000006C X MSX_INITXT
00:0000006F X MSX_INIT32
00:00000075 X MSX_INIMLT
00:00000078 X MSX_SETTXT
00:0000007B X MSX_SETT32
00:0000007E X MSX_SETGRP
00:00000081 X MSX_SETMLT
00:00000084 X MSX_CALPAT
00:00000087 X MSX_CALATR
00:0000008A X MSX_GSPSIZ
00:0000008D X MSX_GRPPRT
00:00000090 X MSX_GICINI
00:00000093 X MSX_WRTPSG
00:00000096 X MSX_RDPSG
00:00000099 X MSX_STRTMS
00:0000009C X MSX_CHSNS
00:0000009F X MSX_CHGET
00:000000A2 X MSX_CHPUT
00:000000A5 X MSX_LPTOUT
00:000000A8 X MSX_LPTSTT
00:000000AB X MSX_CNVCHR
00:000000AE X MSX_PINLIN
00:000000B1 X MSX_INLIN
00:000000B4 X MSX_QINLIN
00:000000B7 X MSX_BREAKX
00:000000BA X MSX_ISCNTC
00:000000BD X MSX_CKCNTC
00:000000C0 X MSX_BEEP
00:000000C6 X MSX_POSIT
00:000000C9 X MSX_FNKSB
00:000000CC X MSX_ERAFNK
00:000000CF X MSX_DSPFNK
00:000000D2 X MSX_TOTEXT
00:000000DB X MSX_GTPAD
00:000000DE X MSX_GTPDL
00:000000E1 X MSX_TAPION
00:000000E4 X MSX_TAPIN
00:000000E7 X MSX_TAPIOF
00:000000EA X MSX_TAPOON
00:000000ED X MSX_TAPOUT
00:000000F0 X MSX_TAPOOF
00:000000F3 X MSX_STMOTR
00:000000F6 X MSX_LFTQ
00:000000F9 X MSX_PUTQ
00:000000FC X MSX_RIGHTC
00:000000FF X MSX_LEFTC
00:00000102 X MSX_UPC
00:00000105 X MSX_TUPC
00:00000108 X MSX_DOWNC
00:0000010B X MSX_TDOWNC
00:0000010E X MSX_SCALXY
00:00000111 X MSX_MAPXY
00:00000114 X MSX_FETCHC
00:00000117 X MSX_STOREC
00:0000011A X MSX_SETATR
00:0000011D X MSX_READC
00:00000120 X MSX_SETC
00:00000123 X MSX_NSETCX
00:00000126 X MSX_GTASPC
00:00000129 X MSX_PNTINI
00:0000012C X MSX_SCANR
00:0000012F X MSX_SCANL
00:00000132 X MSX_CHGCAP
00:00000135 X MSX_CHGSND
00:0000013B X MSX_WSLREG
00:0000013E X MSX_RDVDP
00:00000144 X MSX_PHYDIO
00:00000147 X MSX_FORMAT
00:0000014A X MSX_ISFLIO
00:0000014D X MSX_OUTDLP
00:00000150 X MSX_GETVCP
00:00000153 X MSX_GETVC2
00:00000156 X MSX_KILBUF
00:00000159 X MSX_CALBAS
00:0000000C X MSX_RDSLT
00:0000001C X MSX_CALSLT
00:00000138 X MSX_RSLREG
00:00000180 X MSX_CHGCPU
00:00004029 X MSX_MTOFF
00:00000000   MSX_CHRTBL
00:00001800   MSX_NAMTBL
00:00002000   MSX_CLRTBL
00:00003800   MSX_SPRTBL
00:00001B00   MSX_SPRATR
00:00000007   MSX_VDPPRT
00:0000002D X MSX_MSXVER
00:00005348 X MSX_MSLOT
00:000053C7 X MSX_GRPNAM
00:000053C9 X MSX_GRPCOL
00:000053CB X MSX_GRPCGP
00:000053CD X MSX_GRPATR
00:000053CF X MSX_GRPPAT
00:000053DB X MSX_CLIKSW
00:000053E9   MSX_FORCLR
00:000053EA   MSX_BAKCLR
00:000053EB   MSX_BDRCLR
00:000053DF X MSX_RG0SAV
00:000053E0 X MSX_RG1SAV
00:000053E1 X MSX_RG2SAV
00:000053E2 X MSX_RG3SAV
00:000053E3 X MSX_RG4SAV
00:000053E4 X MSX_RG5SAV
00:000053E5 X MSX_RG6SAV
00:000053E6 X MSX_RG7SAV
00:00005FE7 X MSX_RG8SAV
00:00005FE8   MSX_RG9SAV
00:000053E7   MSX_STATFL
00:000053F6 X MSX_SCNCNT
00:000053F7 X MSX_REPCNT
00:0000587F X MSX_FNKSTR
00:00005BE5 X MSX_NEWKEY
00:00005C4A X MSX_HIMEM
00:00005C9E   MSX_JIFFY
00:00005CA2 X MSX_INTCNT
00:00005CC1 X MSX_EXPTBL
00:00005CC5 X MSX_SLTTBL
00:00005D9A X MSX_HKEYI
00:00005D9F X MSX_HTIMI
00:00005FFF X MSX_SSSREG
00:00003000   CV_STACK
00:00000040 X MSX_DEVID
00:00000041 X MSX_SWTIO
00:000000A0   MSX_PSGLW
00:000000A1   MSX_PSGDW
00:000000A2 X MSX_PSGDR
00:0000000E X MSX_PSGPA
00:0000000F X MSX_PSGPB
00:000000BE   MSX_VDPDRW
00:000000BF   MSX_VDPCW
00:000000BF X MSX_VDPSR
00:0000009B X MSX_VDPPAL
00:000000A8 X MSX_PPIA
00:000000A9 X MSX_PPIB
00:000000AA X MSX_PPIC
00:000000AB   MSX_PPICM
00:000000FC X MSX_MMAP0
00:000000FD X MSX_MMAP1
00:000000FE X MSX_MMAP2
00:000000FF X MSX_MMAP3
00:000000D0   MSX_HIDE_SPRITES
00:000000D1   MSX_HIDE_SPRITE
00:00000024 X MSX_ENASLT
00:00000041   MSX_DISSCR
00:00000044   MSX_ENASCR
00:00000047   MSX_WRTVDP
00:0000004A X MSX_RDVRM
00:0000CBA3   MSX_WRTVRM
00:00000050 X MSX_SETRD
00:0000CB96   MSX_SETWRT
00:00000056 X MSX_FILVRM
00:00000059 X MSX_LDIRMV
00:0000005C X MSX_LDIRVM
00:00000072 X MSX_INIGRP
00:0000CB71   MSX_CLS
00:000000D5 X MSX_GTSTCK
00:000000D8 X MSX_GTTRIG
00:00000141 X MSX_SNSMAT
00:00000001   WINDOWTOP
00:00000001   WINDOWLFT
00:00000014   WINDOWHGT
00:0000001E   WINDOWWID
00:0000000D   MAPWID
00:00008073 X mapedge
00:00008080   mapdat
00:000080A7   stmap
00:000080A8   evnt00
00:000080BC   a00039
00:000080F6   a00143
00:000080FC   a00152
00:00008100   a00161
00:0000812E   a00248
00:0000816B   a00357
00:00008189   a00411
00:000081C6   a00520
00:000081F1   a00599
00:0000821B   a00678
00:0000823E   a00739
00:0000824A   a00763
00:00008278   a00847
00:0000829E   a00918
00:000082BA   a00965
00:000082C7   a00990
00:000082EB   a01054
00:000082EF   a01062
00:0000830B   a01113
00:0000833B   a01210
00:00008362   a01285
00:00008363   evnt01
00:00008370   b00025
00:00008387   b00066
00:00008398   b00098
00:000083A9   b00129
00:000083BA   b00161
00:000083CE   b00197
00:000083DF   b00229
00:000083F0   b00261
00:00008401   b00293
00:0000840D   b00317
00:00008410   b00321
00:00008419   b00338
00:0000841A   evnt02
00:00008427   c00025
00:0000843F   c00068
00:00008442   c00072
00:0000844B   c00089
00:0000844C   evnt03
00:00008459   d00025
00:0000847E   d00093
00:00008481   d00097
00:0000848B   d00115
00:0000848C   evnt04
00:00008499   e00025
00:000084AE   e00066
00:000084B1   e00070
00:000084C9   e00113
00:000084CC   e00118
00:000084D6   e00135
00:000084D7   evnt05
00:000084E4   f00025
00:000084FB   f00067
00:000084FE   f00071
00:00008522   f00139
00:00008523   evnt06
00:00008530   g00025
00:00008558   g00097
00:0000855C   g00105
00:0000855D   evnt07
00:00008571   h00043
00:00008594   h00104
00:000085AF   h00152
00:000085C8   h00204
00:000085D9   h00239
00:000085EA   h00275
00:000085F6   h00301
00:000085F9   h00305
00:000085FE   h00314
00:0000861A   h00362
00:00008628   h00388
00:00008636   h00413
00:00008644   h00439
00:00008657   h00473
00:00008673   h00521
00:00008686   h00556
00:00008699   h00590
00:000086AC   h00625
00:000086BF   h00659
00:000086D2   h00694
00:000086EE   h00742
00:000086FC   h00767
00:0000870A   h00793
00:00008718   h00818
00:00008726   h00844
00:00008742   h00891
00:00008755   h00925
00:00008768   h00960
00:0000877B   h00994
00:00008789   h01020
00:000087A5   h01067
00:000087B8   h01101
00:000087CB   h01136
00:000087DE   h01170
00:000087F1   h01204
00:000087FF   h01230
00:0000881B   h01277
00:0000882E   h01312
00:00008841   h01346
00:00008854   h01380
00:00008862   h01406
00:00008875   h01440
00:00008891   h01487
00:0000889F   h01513
00:000088B2   h01547
00:000088C0   h01573
00:000088D3   h01607
00:000088EF   h01654
00:00008902   h01688
00:00008915   h01723
00:00008928   h01757
00:0000893B   h01791
00:00008957   h01838
00:0000896A   h01872
00:0000897D   h01907
00:0000898B   h01932
00:0000899E   h01966
00:000089AC   h01992
00:000089C8   h02039
00:000089DB   h02073
00:000089EE   h02108
00:000089FC   h02133
00:00008A0F   h02167
00:00008A22   h02201
00:00008A23   evnt08
00:00008A2F   i00028
00:00008A5A   i00104
00:00008A76   i00151
00:00008A89   i00186
00:00008A9C   i00220
00:00008AAF   i00254
00:00008AC2   i00288
00:00008ADE   i00335
00:00008AF1   i00369
00:00008B04   i00404
00:00008B17   i00438
00:00008B25   i00464
00:00008B41   i00511
00:00008B54   i00545
00:00008B62   i00571
00:00008B75   i00605
00:00008B88   i00639
00:00008BA4   i00687
00:00008BB7   i00721
00:00008BCA   i00755
00:00008BDD   i00789
00:00008BF0   i00823
00:00008C0C   i00871
00:00008C1F   i00905
00:00008C32   i00939
00:00008C45   i00973
00:00008C61   i01020
00:00008C74   i01054
00:00008C87   i01089
00:00008C9A   i01122
00:00008CA8   i01148
00:00008CBB   i01182
00:00008CD7   i01228
00:00008CEA   i01263
00:00008CF8   i01288
00:00008D06   i01313
00:00008D22   i01360
00:00008D35   i01394
00:00008D48   i01429
00:00008D5B   i01463
00:00008D77   i01510
00:00008D85   i01536
00:00008D86   evnt09
00:00008D92   j00024
00:00008DA3   j00054
00:00008DB4   j00083
00:00008DC5   j00113
00:00008DD6   j00142
00:00008DD7   evnt10
00:00008E11   evnt11
00:00008E21   l00032
00:00008E28   l00045
00:00008E33   l00066
00:00008E3A   l00079
00:00008EB2   l00313
00:00008EB3   evnt12
00:00008FBD   m00549
00:00008FD6   m00602
00:00008FE7   m00637
00:00008FF8   m00672
00:00009004   m00699
00:00009007   m00703
00:00009013   evnt13
00:00009078   evnt14
00:000090C3   o00160
00:0000913E   o00423
00:0000913F   evnt15
00:0000914A   p00025
00:0000914B   evnt16
00:0000915E   evnt17
00:000091C3   evnt18
00:000091CD   evnt19
00:000091CE X evnt20
00:000091CF   ptcusr
00:000091D0   msgdat
00:000092B6 X nummsg
00:000092B7   scdat
00:0000979B   numsc
00:0000979C   chgfx
00:00009D8C   bprop
00:00009DEB   sprgfx
00:0000A50B   frmlst
00:0000A531   nmedat
00:00000028   NUMOBJ
00:0000A740   objdta
00:0000B1B8 X palett
00:0000B1D8   font
00:0000B4D8   jtab
00:0000B4D9   keytab
00:00000000 X ROM
00:00000001 X DISK
00:00000002 X TAPE
00:00000001 X PAL
00:00000002 X NTSC
00:00000018   MSX_MAXROWS
00:00000020   MSX_MAXCOLS
00:000000FF X MSX_MAXCX
00:000000BF   MSX_MAXCY
00:00000010   MSX_SPRHS
00:00000010   MSX_SPRVS
00:00000001   PLATFM
00:00000002   WALL
00:00000003   LADDER
00:00000004   FODDER
00:00000005   DEADLY
00:00000006   CUSTOM
00:00000007   WATER
00:00000008   COLECT
00:00000009 X NUMTYP
00:00000007 X CRUMBLING_SPEED
00:00000043   OBJSIZ
00:00000003   ODTSIZ
00:00000020   NUMSPR
00:00000011   TABSIZ
00:00000220   SPRBUF
00:00000005   NMESIZ
00:00000003   X
00:00000004   Y
00:00000005 X PAM1ST
00:00000258   MAPSIZE
00:00000036   NUMSHR
00:00000009   SHRSIZ
00:0000000A   VAPTIM
00:0000B4EF   start
00:0000B553   numob
00:0000B554   wntopx
00:0000B555   wnlftx
00:0000B556   wnbotx
00:0000B557   wnrgtx
00:0000B558   frmptr
00:0000B55A   blkptr
00:0000B55C   proptr
00:0000B55E   scrptr
00:0000B560   nmeptr
00:0000B562 X isr
00:0000B583 X chkkey
00:0000B583   prskey
00:0000B5A2   debkey
00:0000B5BF   delay
00:0000B5C7   xspr
00:0000B5D8   xspr0
00:0000B5E6   iniob
00:0000B5F0   iniob.loop
00:0000B601   vsync
00:0000B608   check_if_enough_frames_passed
00:0000B62F   check_if_enough_frames_passed.novbl1
00:0000B641   check_if_enough_frames_passed.novbl2
00:0000B64C   check_if_enough_frames_passed.novbl3
00:0000B658   check_if_enough_frames_passed.wait
00:0000B65B   check_if_enough_frames_passed.nowait
00:0000B65C   beeper
00:0000B66A   beeper.beep2
00:0000B67B   beeper.nodelay
00:0000B67C   beeper.beep3
00:0000B684   beeper.beep4
00:0000B685   vsynca
00:0000B688   beep1
00:0000B68A   noise
00:0000B68D   vsync7
00:0000B69C   vsync9
00:0000B6A1   vsync8
00:0000B6A4 X redraw
00:0000B6C2 X rpblc1
00:0000B6C8 X swaphz
00:0000B6D6   cls
00:0000B6F9 X setpal
00:0000B70B   fdchk
00:0000B731   cspr
00:0000B735   proshr
00:0000B738   proshrnoset
00:0000B750   proshr0
00:0000B756   proshloop
00:0000B769   setshr
00:0000B769   setshr0
00:0000B772   setshr0.shrodd
00:0000B776   proshx
00:0000B77A   prosh1
00:0000B789   prosh2
00:0000B792   shrap
00:0000B7B2   dotl
00:0000B7B6   dotr
00:0000B7BA   dotu
00:0000B7BE   dotd
00:0000B7C2   chkxy
00:0000B7E4   kilshr
00:0000B7E9   plot
00:0000B7F8 X plot0
00:0000B80A   pltwrt
00:0000B817   plot1
00:0000B826   trail
00:0000B839   trail.traill
00:0000B83D   trail.trailv
00:0000B844   trail.trailu
00:0000B848   trailk
00:0000B84D   laser
00:0000B857   laserl
00:0000B859   laserm
00:0000B879   laserm.exit
00:0000B87A   plotde
00:0000B880 X shoot
00:0000B884 X shoot1
00:0000B8A0   shoot0
00:0000B8A7   shootr
00:0000B8AC X vapour
00:0000B8B4 X vapou3
00:0000B8BD   vapou2
00:0000B8C0   vapou1
00:0000B8D4   vapou0
00:0000B8D9 X ptusr
00:0000B8EA   ptusr.ptusr1
00:0000B8FB X star
00:0000B903   star0
00:0000B906   star7
00:0000B915   star8
00:0000B91B   star9
00:0000B92C   star1
00:0000B93A   star2
00:0000B946   star3
00:0000B94E   fpslot
00:0000B957   fpslt0
00:0000B961   explod
00:0000B973   expld0
00:0000B979   expld2
00:0000B97D   expld3
00:0000B980   expld1
00:0000B9A6   qrand
00:0000B9B3   dshrp
00:0000B9CF   delshr
00:0000B9D5   delshr.loop
00:0000B9E0   delshr.noshr
00:0000B9E8   inishr
00:0000B9F6 X lcol
00:0000B9FE   lcol.loop
00:0000BA02   lcol.nxtshr
00:0000BA06   lcol.chkcol
00:0000BA1C   lcol.missed
00:0000BA1F   lcol.exit
00:0000BA21   game
00:0000BA24 X evintr
00:0000BA45 X mapst
00:0000BA4B X inipbl
00:0000BA52 X evini
00:0000BA55   rstrt
00:0000BA63   rstrtn
00:0000BA72   rstrt0
00:0000BA85 X rpblc0
00:0000BA8B   mloop
00:0000BA95 X evlp1
00:0000BA9F X evlp2
00:0000BACA X qoff
00:0000BACD   newlev
00:0000BADD   evwon
00:0000BAE3   pdead
00:0000BAE7 X evdie
00:0000BAF7   tidyup
00:0000BAFF   tidyup.tidyu2
00:0000BB09   tidyu0
00:0000BB0C   tidyu1
00:0000BB1F   rsevt
00:0000BB23 X evrs
00:0000BB26   num2ch
00:0000BB2B   numdg3
00:0000BB31   numdg2
00:0000BB3C   numdg
00:0000BB3E   numdg1
00:0000BB47   numdg0
00:0000BB4E X num2dd
00:0000BB5D X num2td
00:0000BB64   inisc
00:0000BB66   inisc0
00:0000BB6C   imul
00:0000BB6E X imul0
00:0000BB74   imul0.loop
00:0000BB7A   imul0.imul2
00:0000BB81 X idiv
00:0000BB84   idiv.loop
00:0000BB8C   idiv.nodiv
00:0000BB8F   shwob
00:0000BB96   shwob.loop0
00:0000BBAF   dobj
00:0000BBBE   putobj
00:0000BBE1   putrow
00:0000BBE9   putrow0
00:0000BBEB   putrow0.loop
00:0000BBF1   objimg
00:0000BC0A X remob
00:0000BC1A   getob
00:0000BC39   getob.notinscr
00:0000BC3C   objptr
00:0000BC47   wobj
00:0000BC4F   robj
00:0000BC89   robjs
00:0000BC93   robjs.loop
00:0000BCA0 X drpob
00:0000BCC9   skobj
00:0000BCD3   skobj.sk0
00:0000BCE0   skobj.sk1
00:0000BCFE   skobj.sk3
00:0000BCFF   skobj.sk2
00:0000BD01   gotob
00:0000BD0A   gotob.gotob1
00:0000BD0D   gotob.gotob0
00:0000BD11   findob
00:0000BD20 X spawn
00:0000BD23 X numsp1
00:0000BD28   numsp1.nxtslot
00:0000BD32   numsp1.spaw1
00:0000BD6B X rtssp
00:0000BD6F X evis1
00:0000BD74   hslot
00:0000BD7E   hslot.nxtslot
00:0000BD84   hslot.found
00:0000BD89   checkx
00:0000BD8F X dscor
00:0000BD9C   dscor0
00:0000BDB1   dscor2
00:0000BDB8   bscor0
00:0000BDC6 X addsc
00:0000BDE8   incsc
00:0000BDF7   incsc0
00:0000BDF9   incsc2
00:0000BE05 X addbo
00:0000BE0F   addbo0
00:0000BE1A   addbo1
00:0000BE20 X swpsb
00:0000BE28   swpsb0
00:0000BE32   gp2tp
00:0000BE49   gprad
00:0000BE54   pradd
00:0000BE6D X chradd
00:0000BE88   ptxt
00:0000BEA7   ldirvm0
00:0000BEBB   ldirvm0.nxtrow
00:0000BEC0   pattr
00:0000BEC0   pattr2
00:0000BED4   pattr1
00:0000BEE8   pchr
00:0000BF08   pchr.ldirvm0
00:0000BF19   pchr.loop
00:0000BF1E   pattrnxt
00:0000BF23   groom
00:0000BF26 X groomx
00:0000BF2C   groom1
00:0000BF39   groom0
00:0000BF46   droom
00:0000BF4C X droom2
00:0000BF62   droom0
00:0000BF6C   droom1
00:0000BF84   cangu
00:0000BFA6   cangd
00:0000BFAC X numsp3
00:0000BFC5   plchk
00:0000BFD2   plchk0
00:0000BFD4   plchkx
00:0000BFDD   cangl
00:0000BFE8   cangr
00:0000BFF1   cangh
00:0000BFF4 X cangh2
00:0000BFFC   cangh0
00:0000C002   cangh1
00:0000C00A   lrchk
00:0000C013 X always
00:0000C015   lrchkx
00:0000C018   tded
00:0000C03A   tded.tded0
00:0000C04B   tded.tded1
00:0000C060   tstbl
00:0000C07B X jump
00:0000C07E X jump0
00:0000C08A X hop
00:0000C098   random
00:0000C0AA   ktest
00:0000C0BB   keypressed
00:0000C0BF   joykey
00:0000C0CD   joyjoy1
00:0000C0D2   joyjoy2
00:0000C0D5   readkeys
00:0000C0D9   readkeys.loop
00:0000C0EA   joykey1
00:0000C0F8   joykey2
00:0000C106   dmsg
00:0000C10C   dmsg3
00:0000C120   dmsg0
00:0000C133   dmsg2
00:0000C149   dmsg2.btzero
00:0000C152   dmsg2.strseg
00:0000C160   dmsg2.wrapped
00:0000C175   dmsg2.bottom
00:0000C17D   dmsg2.nxtchr
00:0000C181   dmsg1
00:0000C18C   dmsg4
00:0000C191   bmsg1
00:0000C19C   bmsg1.bmsg3
00:0000C1B6   bmsg1.btzero
00:0000C1D4   bmsg1.bmsg2
00:0000C1E5   bchar
00:0000C1F9   bchar.nxtchar
00:0000C205   bchar.nxtrow
00:0000C21F   nxtchar2
00:0000C227   nxtfile2
00:0000C22F X bchar1
00:0000C235   bchar3
00:0000C239   bchar2
00:0000C23C X achar
00:0000C254   nexpos
00:0000C25E   nexlin
00:0000C266   preprt
00:0000C26D X prescr
00:0000C276   getwrd
00:0000C279   getwd0
00:0000C282   pspr
00:0000C28C   pspr.loop
00:0000C29E   pspr2
00:0000C2B8   pspr3
00:0000C2BB X pspr4
00:0000C2C1   jumphl
00:0000C2C6   evtyp0
00:0000C2C8 X evtyp1
00:0000C2CA X evtyp2
00:0000C2CC X evtyp3
00:0000C2CE X evtyp4
00:0000C2D0 X evtyp5
00:0000C2D2 X evtyp6
00:0000C2D4 X evtyp7
00:0000C2D6 X evtyp8
00:0000C2D8   chkimg
00:0000C2E1   chkimg.loop
00:0000C2FB   chkimg.nxtspr
00:0000C300 X disscreen
00:0000C303   enascreen
00:0000C306   dissprs
00:0000C30E   ram2vram
00:0000C319   ram2vram.loop
00:0000C32D   ram2vram_slow
00:0000C338   ram2vram_slow.loop
00:0000C33E   buildspr
00:0000C34E   buildspr.loop
00:0000C35C   buildspr.ison
00:0000C37E   buildspr.nxtspr
00:0000C389 X sprflick
00:0000C39A   sprflick.flick
00:0000C3B6   sprflick.lp
00:0000C3BC   sprflick.bottom
00:0000C3CC   sprflick.noovlp
00:0000C3DC   sprflick.nxt
00:0000C3F0   sprflick.noreset
00:0000C3FE   sprflick.fullsat
00:0000C40C   sprflick.no5th
00:0000C410   dumpspr
00:0000C426   scadd
00:0000C43F   animsp
00:0000C453   anims0
00:0000C457 X animbk
00:0000C46A   animbk.rtanb0
00:0000C46D   sktyp
00:0000C475   sktyp.loop
00:0000C47D   sktyp.sktyp1
00:0000C490 X sktyp.nocoll
00:0000C491   coltyp
00:0000C497   coltyp.colty0
00:0000C4A6   coltyp.colc1a
00:0000C4B3   coltyp.colc1b
00:0000C4BE   coltyp.colty1
00:0000C4CA   disply
00:0000C4D0 X displ1
00:0000C4DB   initsc
00:0000C4E8   tstsc
00:0000C4F4 X scrl
00:0000C4F8   scrl0
00:0000C501   scrl1
00:0000C50A X scrr
00:0000C510 X scru
00:0000C517 X scrd
00:0000C51E X nwscr
00:0000C524   nwscr0
00:0000C52C   nwscr1
00:0000C532 X grav
00:0000C550   grav0
00:0000C55B X gravd
00:0000C55C   gravd0
00:0000C567   gravu
00:0000C56A   gravu0
00:0000C576   gravst
00:0000C583   evftf
00:0000C587   ogrv
00:0000C599   ogrv0
00:0000C59C   ogrv1
00:0000C5A2 X ogrvd
00:0000C5A3   ogrvd0
00:0000C5AE   ogrvu
00:0000C5B1   ogrvu0
00:0000C5BC   ogrvst
00:0000C5D3   ogrv2
00:0000C5D8   ogrv4
00:0000C5E1   ogrv3
00:0000C5E5   ifall
00:0000C60E   ifalls
00:0000C616 X tfall
00:0000C629   gfrm
00:0000C633   sprlst
00:0000C63F   sprlst.loop
00:0000C646   sprlst.nxtscr
00:0000C64A   nspr
00:0000C653   nspr.loop
00:0000C65D   nspr.loop1
00:0000C662   ispr
00:0000C66C   ispr.loop2
00:0000C670   ispr.loop1
00:0000C67F   ispr.copyspr
00:0000C684   ispr.exit
00:0000C687   kspr
00:0000C696   kspr.loop2
00:0000C6AA   kspr.loop1
00:0000C6B9   kspr.copyspr
00:0000C6BE   kspr.exit
00:0000C6C1   cpsp
00:0000C6FF   mapsprite
00:0000C71F   nxtsprbyt
00:0000C727   nomap
00:0000C72A   spradr
00:0000C73F   mult32
00:0000C74B   clrobjlst
00:0000C755   clrscrmap
00:0000C75C   fastfill
00:0000C75E   fastfill.loop1
00:0000C76C X clw
00:0000C784   clw.loop3
00:0000C789   clw.loop1
00:0000C798   clw.loop2
00:0000C800   dots
00:0000C808   shrptr
00:0000C818   shrsin
00:0000C858   unpack
00:0000C87C   pletter.literal
00:0000C87E   pletter.loop
00:0000C887 X pletter.getlen
00:0000C88D   pletter.getlen.lus
00:0000C8A8   pletter.getlen.lenok
00:0000C8B5   pletter.mode6
00:0000C8BB   pletter.mode5
00:0000C8C1   pletter.mode4
00:0000C8C7   pletter.mode3
00:0000C8CD   pletter.mode2
00:0000C8DD   pletter.offsok
00:0000C8EC   pletter.getbit
00:0000C8F0   pletter.getbitexx
00:0000C8F6   pletter.modes
00:00000000 X CHNPRM_PsInOr
00:00000001 X CHNPRM_PsInSm
00:00000002 X CHNPRM_CrAmSl
00:00000003 X CHNPRM_CrNsSl
00:00000004 X CHNPRM_CrEnSl
00:00000005 X CHNPRM_TSlCnt
00:00000006 X CHNPRM_CrTnSl
00:00000008 X CHNPRM_TnAcc
00:0000000A X CHNPRM_COnOff
00:0000000B X CHNPRM_OnOffD
00:0000000C X CHNPRM_OffOnD
00:0000000D X CHNPRM_OrnPtr
00:0000000F X CHNPRM_SamPtr
00:00000011 X CHNPRM_NNtSkp
00:00000012 X CHNPRM_Note
00:00000013 X CHNPRM_SlToNt
00:00000014 X CHNPRM_Env_En
00:00000015 X CHNPRM_Flags
00:00000016 X CHNPRM_TnSlDl
00:00000017 X CHNPRM_TSlStp
00:00000019 X CHNPRM_TnDelt
00:0000001B X CHNPRM_NtSkCn
00:0000001C X CHNPRM_Volume
00:0000001D X CHNPRM_Size
00:00000000 X AR_TonA
00:00000002 X AR_TonB
00:00000004 X AR_TonC
00:00000006 X AR_Noise
00:00000007   AR_Mixer
00:00000008 X AR_AmplA
00:00000009 X AR_AmplB
00:0000000A X AR_AmplC
00:0000000B X AR_Env
00:0000000D X AR_EnvTp
00:0000C902   sfx_init
00:0000C955   sfx_play
00:0000C90B   ayFX_SETUP
00:0000C918   sfx_mute
00:0000C920   sfx_set
00:0000C920 X ayFX_INIT
00:0000C931   ayFX_INIT.CHECK_PRI
00:0000C951   ayFX_INIT.INIT_END
00:0000C955   ayFX_PLAY
00:0000C969   ayFX_PLAY.TAKECB
00:0000C97A   ayFX_PLAY.CHECK_NN
00:0000C988   ayFX_PLAY.SETPOINTER
00:0000C99C   ayFX_PLAY.SETMASKS
00:0000C9AA X ayFX_PLAY.CHK1
00:0000C9AC X ayFX_PLAY.PLAY_C
00:0000C9B9   ayFX_PLAY.CHK2
00:0000C9BE X ayFX_PLAY.PLAY_B
00:0000C9CB   ayFX_PLAY.CHK3
00:0000C9CE X ayFX_PLAY.PLAY_A
00:0000C9DB   ayFX_PLAY.SETMIXER
00:0000C9EB   resetregs
00:0000C9F9   psgrout
00:0000CA06   psgrout.lout
00:0000CA17   sfxbank
00:0000CB2D X endprogram
00:00001FD9   WRITE_REGISTER
00:000000C9 X PATSIZE
00:00001105   CONTROLLER_INIT
00:00001FEB   POLLER
00:0000CB2D   CV_INIGRP
00:0000CB66   nxtblk
00:0000CB71   CV_CLS
00:0000CB87   FILVRM
00:0000CB8B   FLOOP
00:0000CB96   CV_SETWRT
00:0000CBA3   CV_WRTVRM
00:00004000   varbegin
00:00004000   score
00:00004006   hiscor
00:0000400C   bonus
00:00004012   displ0
00:00004016   sndtyp
00:00004017   shrplot
00:00004019   loopa
00:0000401A X loopb
00:0000401B X loopc
00:0000401C   vara
00:0000401D   varb
00:0000401E   varc
00:0000401F   vard
00:00004020   vare
00:00004021   varf
00:00004022   varg
00:00004023   varh
00:00004024   vari
00:00004025   varj
00:00004026   vark
00:00004027   varl
00:00004028   varm
00:00004029 X varn
00:0000402A X varo
00:0000402B X varp
00:0000402C X varq
00:0000402D X varr
00:0000402E X vars
00:0000402F X vart
00:00004030 X varu
00:00004031 X varv
00:00004032 X varw
00:00004033 X varz
00:00004034   contrl
00:00004035   charx
00:00004036   chary
00:00004037   colpat
00:00004038   prtmod
00:00004039   clratt
00:0000403A   snddelay
00:0000403B   spptr
00:0000403D   seed
00:0000403E   grbase
00:00004040   joyval
00:00004041   scno
00:00004042   ogptr
00:00004044   nsprite
00:00004045   numlif
00:00004046   curobj
00:00004047 X dirthig
00:00004049   skptr
00:0000404B   highslot
00:0000404C   roomtb
00:0000404D   frmno
00:0000404E X combyt
00:0000404F   seed3
00:00004050   nexlev
00:00004051   restfl
00:00004052   deadf
00:00004053   gamwon
00:00004054   dispx
00:00004055   dispy
00:00004056   varrnd
00:00004057   varobj
00:00004058 X varopt
00:00004059 X varblk
00:0000405A   offset
00:0000405B X select
00:0000405C X ticks
00:0000405D   varend
00:0000405D   ayFX_MODE
00:0000405E   ayFX_BANK
00:00004060   ayFX_PRIORITY
00:00004061   ayFX_POINTER
00:00004063   ayFX_TONE
00:00004065   ayFX_NOISE
00:00004066   ayFX_VOLUME
00:00004067   ayFX_CHANNEL
00:00004068   AYREGS
00:00004076   sprptr
00:00004078 X pblkptr
00:0000407A   stack
00:0000407C   time
00:0000407D   keys
00:00004093   wintop
00:00004094   winlft
00:00004095   winhgt
00:00004096   winwid
00:00004097   CONTROLLER_BUFFER
00:000040A3   ssprit
00:000040B4   sprtab
00:000042D4   mapbuf
00:00004500   spratr2
00:00004580   spratr
00:00004600   MAP
00:00004900   objlist
00:00004A00   scrmap
00:00004D00   mapspr
00:00004D80   colltab
00:00004DC0   shraddr
00:00004DC2   SHRAPN
00:00004FA8   objatr
00:00005020 X frames_passed
00:00005021 X eop


 Output: BALDY.out
-------------------------------------------------

 Page: 00
  Org: 00000000  Size: *  Used: 00000000

    No output

 Output: BALDY.rom
-------------------------------------------------

 Page: 00
  Org: 00008000  Size: 00008000  Used: 00004BAB

   Address   Length Align   Label
   00008000   19371     @   rst_8
   0000CBAB   13397       <empty>

 Output: ram_vars.tmp
-------------------------------------------------

 Page: 00
  Org: 00000000  Size: *  Used: 00001021

   Address   Length Align   Label
   00000000    4129         score
